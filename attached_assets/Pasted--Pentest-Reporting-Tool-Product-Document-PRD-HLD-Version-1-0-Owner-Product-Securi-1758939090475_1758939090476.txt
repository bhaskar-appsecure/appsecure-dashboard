# Pentest Reporting Tool — Product Document (PRD + HLD)

**Version:** 1.0
**Owner:** Product (Security)
**Last updated:** 27 Sep 2025

---

## 1) Executive Summary

A secure, multi-tenant platform to manage penetration testing projects end‑to‑end. The tool provides:

* **Security Researcher portal:** View all assigned projects; submit structured findings with rich formatting and evidence; compute CVSS; and submit findings per project.
* **Project (Customer) portal:** View all findings for their projects, collaborate on remediation, and **export templatized reports** (PDF/DOCX/HTML) using **custom, brandable templates** that pull in content directly from findings and attachments.

Primary goals: reduce reporting friction, standardize quality, enable customer‑branded exports, and maintain a verifiable audit trail.

---

## 2) Goals & Non‑Goals

**Goals**

1. Fast, consistent finding submission with CVSS v3.1+ support.
2. Rich text (HTML) formatting per field (Description, Steps to Reproduce, Impact, Fix, References).
3. Evidence uploads, inline embedding, and metadata capture.
4. Company portal for triage, comments, remediation tracking.
5. **Customizable report templates** (per customer/project) with preview and one‑click export.
6. Complete audit/version history and role‑based permissions.
7. API + webhooks for integrations (Jira, Slack, GitHub/GitLab).

**Non‑Goals**

* Vulnerability scanning engine (out of scope; can ingest outputs).
* Remediation workflow beyond tracking status/comments (no task mgmt replacement).

---

## 3) Personas & Roles

* **Security Researcher** (internal/external tester): creates & edits findings, uploads evidence, submits for review.
* **Project User (Company)**: reads findings, comments, sets statuses (Accepted Risk/Remediating/Ready for Retest/Closed), exports reports, manages templates.
* **Org Admin (Internal)**: manages researchers, projects, templates, exports, and global settings.
* **Customer Admin**: manages project members, company templates, and report branding.

---

## 4) Key Use Cases

1. Researcher views all projects they can access; opens Project → adds multiple findings; saves drafts; submits when ready.
2. Customer logs into Project Portal → filters findings by severity/status → adds comments → requests retest → exports a branded report.
3. Customer creates a DOCX/HTML template with placeholders (e.g., company logo, executive summary, grouped findings) → previews with current project data → exports to PDF.
4. Auditor requests history → Admin exports audit log for findings, comments, and template versions.

---

## 5) Functional Requirements

### 5.1 Authentication & Access

* SSO/SAML/OIDC + email/password (configurable). 2FA optional.
* Multi‑tenant isolation: org‑scoped data separation.
* Role‑based access control (RBAC) with project‑level ACLs.

### 5.2 Projects

* Fields: Name, Customer, Scope, Start/End Dates, Contacts, Tags, Methodologies, Attachments (scoping docs), Status (Planned/In‑Progress/Complete).
* Researcher: **View all projects** they are assigned (or all, as per org policy); add findings to selected project.
* Customer: View own projects only.

### 5.3 Findings (Researcher Portal)

**Create/Edit Fields**

* **Title** (text)
* **CVSS**: vector string (v3.1+), auto‑computed Base Score + Severity (Critical/High/Medium/Low/Informational). Manual override (with justification).
* **Description** (rich HTML)
* **Steps to Reproduce** (rich HTML; ordered lists, code blocks, images)
* **Impact** (rich HTML)
* **Fix/Remediation** (rich HTML)
* **References** (links, CWE, CAPEC, etc.)
* **Affected Assets/Endpoints** (list)
* **Evidence Attachments** (files: images, videos, pcap, txt, pdf, csv, json, html; per‑file description)
* **Tags** (e.g., OWASP Top 10, CWE, MITRE ATT&CK)
* **Status**: Draft → Submitted → Company Review → Remediation In‑Progress → Ready for Retest → Verified (Fixed) / Risk Accepted → Closed

**Behaviors**

* WYSIWYG editor with sanitized HTML allow‑list (p, h1‑h4, strong/em, ul/ol/li, pre/code, table, a[href], img, blockquote, hr).
* Inline image/evidence embedding (e.g., `{{evidence.image}}`).
* Autosave drafts; version history per field; diff view.
* Duplicate detection (title/similarity on description + asset).
* Bulk import (CSV/JSON) optional (MVP+1).

### 5.4 Project Portal (Customer)

* Table/grid of findings with filters: Severity, Status, Tag, Affected Asset, Date, Researcher.
* Finding detail page with all fields + evidence gallery.
* Comments & mentions; activity timeline; private notes (customer‑only).
* State transitions:

  * **Set to Remediation In‑Progress**, **Request Clarification**, **Request Retest**, **Risk Acceptance** (with rationale/expiry), **Close as Fixed**.
* Export area: choose template + output (PDF/DOCX/HTML/Markdown). Preview before export.
* Template management (customer‑scoped): upload DOCX/HTML, edit HTML templates, set default per project.

### 5.5 Report Templating

**Template Types**

* **DOCX** (with content controls/placeholders)
* **HTML/Markdown** (rendered to PDF)
* Optional: **ODT**

**Template Engine**

* Must support **variables, loops, and conditionals**.
* Example variables (project‑scoped):

  * `{{ project.name }}`, `{{ project.customer.name }}`, `{{ project.dates.start }}`, `{{ project.scope }}`
* Findings collection:

  * `{{ findings | by_severity('Critical') }}`
  * Loop: `{% for f in findings %} ... {% endfor %}`
* Field access: `{{ f.title }}`, `{{ f.cvss.score }}`, `{{ f.cvss.vector }}`, `{{ f.description | html }}`, `{{ f.steps | html }}`, `{{ f.impact | html }}`, `{{ f.fix | html }}`
* Evidence loops: `{% for e in f.evidence %} {{ e.caption }} {{ e.file_url }} {% endfor %}`
* Conditionals: `{% if findings|count == 0 %}No findings reported{% endif %}`
* Partials (reusable blocks) for cover page, ToC, executive summary, methodology, appendix.
* Asset grouping helpers (e.g., `findings | group_by('severity')`).

**Template Storage & Governance**

* Versioned templates with changelogs; per‑customer defaults.
* Validation linter (checks for unknown variables).
* Preview with sample data; diff between template versions.
* Brand assets: customer logo, colors (for HTML/PDF), headers/footers.

### 5.6 Exports

* Formats: PDF, DOCX, HTML (MD optional).
* Rendering pipeline:

  1. Fetch project JSON → 2) Apply template → 3) Render → 4) Stamp metadata (timestamp, hash, template version) → 5) Store & allow download.
* Watermarking & page numbers; optional appendix with raw evidence list/hashes.

### 5.7 Evidence & File Handling

* Supported types (configurable): jpg/png/webp/gif, mp4, pdf, txt, csv, json, html, pcap, har, zip.
* Size limits (configurable per org); multi‑file upload w/ drag‑drop.
* Server‑side AV/malware scan; MIME sniffing; extension allow‑list.
* Hashing (SHA‑256) for evidence integrity; EXIF scrubbing (images) optional.
* Secure CDN or pre‑signed URLs for access; **private by default**.

### 5.8 HTML Editing & Safety

* Sanitize via allow‑list; strip scripts/styles/iframes by default.
* Code blocks with monospace + copy button.
* Tables for complex PoCs; anchor links for ToC.

### 5.9 Activity, Versioning, Audit

* Per‑finding version history (field‑level); compare revisions.
* Activity log: user, action, timestamp, IP, object, diff summary.
* Export audit: who exported which template and when (incl. checksum).

### 5.10 Notifications

* Email & Slack: mentions, state changes, export completion, risk acceptance expiring.
* Notification preferences per user/project.

### 5.11 Integrations (MVP/roadmap)

* **Jira**: create ticket from finding; sync status/comments.
* **GitHub/GitLab**: open issue; link PRs to finding.
* **SIEM/DefectDojo**: export via API.

### 5.12 API & Webhooks

* REST + API keys/OAuth.
* Webhooks: `finding.created`, `finding.updated`, `finding.status_changed`, `report.exported`.

### 5.13 Internationalization & Accessibility

* Timezone aware (project locale); date formats configurable.
* WCAG AA for UI.

---

## 6) Data Model (High‑Level)

**Entities**

* Organization, User, Role (Researcher, Org Admin, Customer Admin, Project User)
* Project (belongs to Organization, has many Findings, Templates, Exports)
* Finding (has many Evidence, Comments, Tags, Versions)
* EvidenceAttachment (file_url, filename, mime, size, hash, caption)
* Template (name, type, version, content, org_id/customer_id scope)
* ReportExport (template_id, format, checksum, created_by, created_at)
* Comment (author, body, visibility)
* ActivityLog (actor, action, target, diff)

**Finding JSON (example)**

```json
{
  "id": "f-123",
  "project_id": "p-001",
  "title": "IDOR in /api/v1/orders",
  "cvss": {"vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:N", "score": 9.1, "severity": "Critical"},
  "description_html": "<p>…</p>",
  "steps_html": "<ol><li>…</li></ol>",
  "impact_html": "<p>…</p>",
  "fix_html": "<p>…</p>",
  "references": ["https://owasp.org/ASVS"],
  "assets": ["api.example.com"],
  "evidence": [
    {"id": "e1", "filename": "poc.mp4", "mime": "video/mp4", "size": 1048576, "hash": "…", "caption": "PoC video", "url": "…"}
  ],
  "status": "Submitted",
  "tags": ["OWASP-A01", "CWE-639"],
  "created_by": "u-007",
  "created_at": "2025-09-27T02:00:00Z"
}
```

---

## 7) Permissions Matrix (Summary)

| Capability            | Researcher                     | Project User (Company) | Customer Admin | Org Admin    |
| --------------------- | ------------------------------ | ---------------------- | -------------- | ------------ |
| View projects         | ✓ (assigned or all per policy) | ✓ (own)                | ✓ (own)        | ✓            |
| Create/edit findings  | ✓ (own drafts)                 | ✗                      | ✗              | ✓ (override) |
| Submit findings       | ✓                              | ✗                      | ✗              | ✓            |
| Comment on findings   | ✓                              | ✓                      | ✓              | ✓            |
| Change finding status | Propose only                   | ✓                      | ✓              | ✓            |
| Upload evidence       | ✓                              | Optional (if enabled)  | ✓              | ✓            |
| Manage templates      | ✗                              | ✓ (customer scope)     | ✓              | ✓ (global)   |
| Export reports        | ✓ (internal)                   | ✓                      | ✓              | ✓            |
| Manage users/projects | ✗                              | ✗                      | ✓ (customer)   | ✓            |

---

## 8) Workflows

**Finding Lifecycle**

1. Draft (Researcher) → 2. Submitted (Researcher) → 3. Company Review (Customer) → 4a. Remediation In‑Progress or 4b. Risk Acceptance → 5. Ready for Retest → 6. Verified (Fixed) or Closed (Risk Accepted/Invalid).

**Report Export**

1. Customer chooses template → 2. Preview with project data → 3. Export → 4. System stores export (immutable) with checksum + template version.

---

## 9) Non‑Functional Requirements

* **Security:** TLS 1.2+, HSTS, CSP, secure cookies; encryption at rest (KMS); S3‑style private buckets; AV scanning; SSRF protection on template assets; HTML sanitization; permission checks at service & DB layers; audit logging immutable store.
* **Privacy:** Minimization, optional PII redaction, data retention policies per org.
* **Performance:** <200ms median for list views; exports under 60s for projects ≤500 findings.
* **Availability:** 99.9% monthly SLA; blue‑green deploys.
* **DR/Backups:** Daily encrypted backups; 30‑day retention; tested restores quarterly.
* **Observability:** Structured logs, metrics (p95 latencies), tracing, alerting.

---

## 10) UI/UX Blueprint (Text Wireframes)

**Researcher Dashboard**

* Left: Projects list (search, filter by status/date)
* Right: Selected project → Findings table (Add Finding, Bulk Import)
* Add/Edit Finding modal with tabs: Details | Steps | Impact | Fix | Evidence | Preview

**Customer Project View**

* Header: Project name, severity summary chips
* Tabs: Findings | Templates | Exports | Activity
* Findings table: severity pill, title, status, updated_at; actions: view, comment, state change, export selection.

**Template Manager**

* List of templates (name, type, version, default?)
* Editor (HTML) with live preview; DOCX upload with validator; variable browser sidebar.

---

## 11) Analytics & KPIs

* Time from first finding draft → submission per researcher.
* % findings with complete fields (Fix, Impact, References).
* Export success rate, mean export time.
* Customer template adoption rate.
* Retest closure time by severity.

---

## 12) Delivery Plan (Milestones)

1. **M1 (Backend Core):** Auth, Org/Project models, Findings CRUD, Evidence upload, CVSS compute.
2. **M2 (Researcher UI):** Rich editor, drafts/versioning, submit.
3. **M3 (Customer UI):** Findings view, comments, state changes.
4. **M4 (Templating v1):** HTML templates → PDF/HTML exports.
5. **M5 (DOCX templates):** Upload/parse DOCX placeholders; export DOCX/PDF.
6. **M6 (Audit & Exports):** Immutable exports, checksums, audit log.
7. **M7 (Integrations):** Jira + Slack; webhooks.

---

## 13) Open Questions & Assumptions

* **View all projects for researchers**: default to assigned‑only; org setting may allow global view.
* Evidence retention defaults (e.g., 12 months) and eDiscovery needs.
* Allow customers to edit researcher text for final reports? (recommend suggest‑mode only).

---

## 14) Appendix

**A) Example HTML Template Snippet**

```html
<h1>{{ project.name }} — Penetration Test Report</h1>
<p>Customer: {{ project.customer.name }}</p>
<h2>Findings Summary</h2>
{% for severity in ["Critical","High","Medium","Low","Informational"] %}
  <h3>{{ severity }}</h3>
  <ul>
  {% for f in findings | by_severity(severity) %}
    <li>
      <strong>{{ f.title }}</strong> — CVSS {{ f.cvss.score }} ({{ f.cvss.vector }})
      <div>{{ f.description_html | html }}</div>
      <div><em>Impact</em>: {{ f.impact_html | html }}</div>
      <div><em>Fix</em>: {{ f.fix_html | html }}</div>
    </li>
  {% endfor %}
  </ul>
{% endfor %}
```

**B) DOCX Placeholder Examples**

* `{{ project.name }}` in header
* `{{#each findings}}` … `{{/each}}` blocks
* Severity sections via content controls named `Critical`, `High`, etc.

**C) CVSS Handling**

* Parse vector; compute Base Score; support Environmental/Temporal (roadmap); store raw vector & computed values.

**D) REST Endpoints (sample)**

```
POST /api/v1/auth/login
GET  /api/v1/projects
GET  /api/v1/projects/{id}
POST /api/v1/projects/{id}/findings
GET  /api/v1/projects/{id}/findings
GET  /api/v1/findings/{id}
PUT  /api/v1/findings/{id}
POST /api/v1/findings/{id}/evidence
POST /api/v1/projects/{id}/export { template_id, format }
GET  /api/v1/projects/{id}/templates
POST /api/v1/templates
```

**E) Acceptance Criteria (Sampling)**

* Researcher can create a finding with all required fields and submit; CVSS auto‑calculates from a valid vector.
* Customer can filter findings by severity and export a PDF using a custom template.
* HTML sanitization removes scripts/iframes while preserving allowed formatting.
* Evidence files are scanned and stored with SHA‑256 hashes; links are private.
* Audit log shows creation, edits, submissions, status changes, and exports with timestamps.

---

**End of Document**
