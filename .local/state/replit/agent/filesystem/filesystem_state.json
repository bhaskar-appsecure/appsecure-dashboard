{"file_contents":{"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated, hasPermission, isSuperAdmin, hashPassword } from \"./auth\";\nimport crypto from \"crypto\";\nimport { z } from \"zod\";\nimport { \n  insertFindingSchema,\n  insertProjectSchema,\n  insertCredentialSchema, \n  insertPostmanCollectionSchema, \n  insertReportExportSchema,\n  insertRoleSchema,\n  insertRolePermissionSchema,\n  insertUserRoleSchema,\n  insertUserInvitationSchema,\n  insertUserSchema,\n  insertTemplateSchema\n} from \"@shared/schema\";\nimport { fromZodError } from \"zod-validation-error\";\nimport DOMPurify from 'dompurify';\nimport { JSDOM } from 'jsdom';\nimport { createDefaultVAPTTemplate } from '../scripts/create-default-template';\nimport puppeteer from 'puppeteer';\n\n// Initialize DOMPurify with JSDOM\nconst window = new JSDOM('').window;\nconst purify = DOMPurify(window as any);\n\n// Configure DOMPurify with a safe allowlist\nconst sanitizeHtml = (html: string | undefined | null): string => {\n  if (!html) return '';\n  return purify.sanitize(html, {\n    ALLOWED_TAGS: ['p', 'br', 'strong', 'em', 'u', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'ul', 'ol', 'li', 'a', 'blockquote', 'code', 'pre', 'table', 'thead', 'tbody', 'tr', 'th', 'td', 'div', 'span', 'img', 'style'],\n    ALLOWED_ATTR: ['href', 'target', 'rel', 'src', 'alt', 'width', 'height', 'style', 'class', 'id'],\n    ALLOW_DATA_ATTR: false,\n    FORBID_TAGS: ['script', 'object', 'embed', 'base', 'link', 'meta'],\n    FORBID_ATTR: ['onload', 'onerror', 'onclick', 'onmouseover', 'onfocus', 'onblur'],\n  });\n};\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Auth routes are now handled in auth.ts\n\n  // Bootstrap route for setting up super admin\n  app.post('/api/bootstrap/super-admin', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = (req as any).user.id;\n      const { organizationId } = req.body;\n\n      if (!organizationId) {\n        return res.status(400).json({ message: \"Organization ID is required\" });\n      }\n\n      // Verify organization exists\n      const org = await storage.getOrganization(organizationId);\n      if (!org) {\n        return res.status(404).json({ message: \"Organization not found\" });\n      }\n\n      await storage.bootstrapSuperAdmin(userId, organizationId);\n      \n      res.json({ \n        message: \"Super admin setup completed successfully\",\n        userId,\n        organizationId \n      });\n    } catch (error) {\n      console.error(\"Error bootstrapping super admin:\", error);\n      res.status(500).json({ message: \"Failed to bootstrap super admin\" });\n    }\n  });\n\n  // Bootstrap route for creating default VAPT template\n  app.post('/api/bootstrap/default-template', isAuthenticated, hasPermission('export_reports'), async (req: any, res) => {\n    try {\n      const userId = (req as any).user.id;\n      const user = await storage.getUser(userId);\n      \n      if (!user?.organizationId) {\n        return res.status(400).json({ message: \"User must belong to an organization\" });\n      }\n\n      // Check if default template already exists for this organization\n      const existingTemplates = await storage.getTemplatesByOrganization(user.organizationId);\n      const hasDefaultTemplate = existingTemplates.some(template => template.isDefault);\n      \n      if (hasDefaultTemplate) {\n        return res.status(400).json({ message: \"Default template already exists for this organization\" });\n      }\n\n      const template = await createDefaultVAPTTemplate(user.organizationId, userId);\n      \n      res.json({ \n        message: \"Default VAPT template created successfully\",\n        templateId: template.id,\n        templateName: template.name\n      });\n    } catch (error) {\n      console.error(\"Error creating default template:\", error);\n      res.status(500).json({ message: \"Failed to create default template\" });\n    }\n  });\n\n  // Project routes\n  app.get('/api/projects', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = (req as any).user.id;\n      const projects = await storage.getProjectsByUser(userId);\n      res.json(projects);\n    } catch (error) {\n      console.error(\"Error fetching projects:\", error);\n      res.status(500).json({ message: \"Failed to fetch projects\" });\n    }\n  });\n\n  app.get('/api/projects/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = (req as any).user.id;\n      const project = await storage.getProject(req.params.id);\n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n      \n      // Verify user has access to this project\n      const hasAccess = await storage.hasProjectAccess(userId, req.params.id);\n      if (!hasAccess) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      res.json(project);\n    } catch (error) {\n      console.error(\"Error fetching project:\", error);\n      res.status(500).json({ message: \"Failed to fetch project\" });\n    }\n  });\n\n  // Create project\n  app.post('/api/projects', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = (req as any).user.id;\n      \n      console.log(\"Project creation request body:\", JSON.stringify(req.body, null, 2));\n      \n      // Get user to check organization\n      const user = await storage.getUser(userId);\n      let organizationId = user?.organizationId;\n      \n      // If user doesn't have an organization, create a default one\n      if (!organizationId) {\n        try {\n          const defaultOrg = await storage.createOrganization({\n            name: \"Default Organization\",\n            domain: \"default.local\",\n            settings: {}\n          });\n          organizationId = defaultOrg.id;\n          \n          // Update user with the organization\n          await storage.upsertUser({\n            id: userId,\n            email: (req as any).user.email,\n            firstName: (req as any).user.firstName,\n            lastName: (req as any).user.lastName,\n            organizationId: organizationId,\n            role: \"researcher\"\n          });\n        } catch (orgError) {\n          console.error(\"Error creating default organization:\", orgError);\n          return res.status(500).json({ message: \"Failed to setup user organization\" });\n        }\n      }\n      \n      // Validate request data\n      const requestData = { ...req.body, organizationId };\n      const result = insertProjectSchema.safeParse(requestData);\n      if (!result.success) {\n        console.log(\"Validation failed:\", result.error);\n        const errorMessage = fromZodError(result.error).toString();\n        return res.status(400).json({ message: errorMessage });\n      }\n      \n      const projectData = {\n        ...result.data,\n        createdBy: userId,\n        // Sanitize HTML content if present\n        description: sanitizeHtml(result.data.description),\n        scope: sanitizeHtml(result.data.scope),\n        methodology: sanitizeHtml(result.data.methodology)\n      };\n      \n      const project = await storage.createProject(projectData);\n      \n      // Add the creator as a project member with edit permissions\n      await storage.addProjectMember(project.id, userId, true);\n      \n      res.json(project);\n    } catch (error) {\n      console.error(\"Error creating project:\", error);\n      res.status(500).json({ message: \"Failed to create project\" });\n    }\n  });\n\n  // Finding routes\n  app.get('/api/projects/:projectId/findings', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = (req as any).user.id;\n      \n      // Verify user has access to this project first\n      const hasAccess = await storage.hasProjectAccess(userId, req.params.projectId);\n      if (!hasAccess) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const findings = await storage.getFindingsByProject(req.params.projectId);\n      res.json(findings);\n    } catch (error) {\n      console.error(\"Error fetching findings:\", error);\n      res.status(500).json({ message: \"Failed to fetch findings\" });\n    }\n  });\n\n  app.get('/api/findings/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = (req as any).user.id;\n      const finding = await storage.getFinding(req.params.id);\n      if (!finding) {\n        return res.status(404).json({ message: \"Finding not found\" });\n      }\n      \n      // Verify user has access to the parent project\n      const hasAccess = await storage.hasProjectAccess(userId, finding.projectId);\n      if (!hasAccess) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      res.json(finding);\n    } catch (error) {\n      console.error(\"Error fetching finding:\", error);\n      res.status(500).json({ message: \"Failed to fetch finding\" });\n    }\n  });\n\n  // Get all findings for a user across all projects\n  app.get('/api/findings', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = (req as any).user.id;\n      const findings = await storage.getFindingsByUser(userId);\n      res.json(findings);\n    } catch (error) {\n      console.error(\"Error fetching user findings:\", error);\n      res.status(500).json({ message: \"Failed to fetch findings\" });\n    }\n  });\n\n  app.post('/api/projects/:projectId/findings', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = (req as any).user.id;\n      \n      // Verify user has access to this project first\n      const hasAccess = await storage.hasProjectAccess(userId, req.params.projectId);\n      if (!hasAccess) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const findingData = {\n        ...req.body,\n        projectId: req.params.projectId,\n        createdBy: userId\n      };\n      \n      // Validate request data\n      const result = insertFindingSchema.safeParse(findingData);\n      if (!result.success) {\n        const validationError = fromZodError(result.error);\n        return res.status(400).json({ \n          message: \"Invalid finding data\",\n          errors: validationError.message \n        });\n      }\n      \n      // Sanitize HTML content before storing\n      const sanitizedData = {\n        ...result.data,\n        descriptionHtml: sanitizeHtml(result.data.descriptionHtml),\n        stepsHtml: sanitizeHtml(result.data.stepsHtml),\n        impactHtml: sanitizeHtml(result.data.impactHtml),\n        fixHtml: sanitizeHtml(result.data.fixHtml),\n      };\n      \n      const finding = await storage.createFinding(sanitizedData);\n      res.status(201).json(finding);\n    } catch (error) {\n      console.error(\"Error creating finding:\", error);\n      res.status(500).json({ message: \"Failed to create finding\" });\n    }\n  });\n\n  // Update finding\n  app.patch('/api/findings/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = (req as any).user.id;\n      const finding = await storage.getFinding(req.params.id);\n      if (!finding) {\n        return res.status(404).json({ message: \"Finding not found\" });\n      }\n      \n      // Verify user has access to the parent project\n      const hasAccess = await storage.hasProjectAccess(userId, finding.projectId);\n      if (!hasAccess) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      // Create activity log for the change\n      const oldValues = { \n        title: finding.title, \n        status: finding.status,\n        descriptionHtml: finding.descriptionHtml,\n        stepsHtml: finding.stepsHtml,\n        impactHtml: finding.impactHtml,\n        fixHtml: finding.fixHtml,\n      };\n      \n      // Sanitize HTML content in the update data\n      const sanitizedUpdateData = { ...req.body };\n      if (sanitizedUpdateData.descriptionHtml !== undefined) {\n        sanitizedUpdateData.descriptionHtml = sanitizeHtml(sanitizedUpdateData.descriptionHtml);\n      }\n      if (sanitizedUpdateData.stepsHtml !== undefined) {\n        sanitizedUpdateData.stepsHtml = sanitizeHtml(sanitizedUpdateData.stepsHtml);\n      }\n      if (sanitizedUpdateData.impactHtml !== undefined) {\n        sanitizedUpdateData.impactHtml = sanitizeHtml(sanitizedUpdateData.impactHtml);\n      }\n      if (sanitizedUpdateData.fixHtml !== undefined) {\n        sanitizedUpdateData.fixHtml = sanitizeHtml(sanitizedUpdateData.fixHtml);\n      }\n      \n      const updatedFinding = await storage.updateFinding(req.params.id, sanitizedUpdateData);\n      \n      // Log the activity\n      await storage.createActivityLog({\n        actorId: userId,\n        action: 'updated',\n        targetType: 'finding',\n        targetId: req.params.id,\n        oldValues,\n        newValues: sanitizedUpdateData,\n      });\n      \n      res.json(updatedFinding);\n    } catch (error) {\n      console.error(\"Error updating finding:\", error);\n      res.status(500).json({ message: \"Failed to update finding\" });\n    }\n  });\n\n  // Get activity logs for a finding\n  app.get('/api/findings/:id/activities', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = (req as any).user.id;\n      const finding = await storage.getFinding(req.params.id);\n      if (!finding) {\n        return res.status(404).json({ message: \"Finding not found\" });\n      }\n      \n      // Verify user has access to the parent project\n      const hasAccess = await storage.hasProjectAccess(userId, finding.projectId);\n      if (!hasAccess) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const activities = await storage.getActivityLogsByFinding(req.params.id);\n      res.json(activities);\n    } catch (error) {\n      console.error(\"Error fetching activities:\", error);\n      res.status(500).json({ message: \"Failed to fetch activities\" });\n    }\n  });\n\n  // Get comments for a finding\n  app.get('/api/findings/:id/comments', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = (req as any).user.id;\n      const finding = await storage.getFinding(req.params.id);\n      if (!finding) {\n        return res.status(404).json({ message: \"Finding not found\" });\n      }\n      \n      // Verify user has access to the parent project\n      const hasAccess = await storage.hasProjectAccess(userId, finding.projectId);\n      if (!hasAccess) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const comments = await storage.getCommentsByFinding(req.params.id);\n      res.json(comments);\n    } catch (error) {\n      console.error(\"Error fetching comments:\", error);\n      res.status(500).json({ message: \"Failed to fetch comments\" });\n    }\n  });\n\n  // Create comment for a finding\n  app.post('/api/findings/:id/comments', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = (req as any).user.id;\n      const finding = await storage.getFinding(req.params.id);\n      if (!finding) {\n        return res.status(404).json({ message: \"Finding not found\" });\n      }\n      \n      // Verify user has access to the parent project\n      const hasAccess = await storage.hasProjectAccess(userId, finding.projectId);\n      if (!hasAccess) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const commentData = {\n        ...req.body,\n        findingId: req.params.id,\n        authorId: userId\n      };\n      \n      const comment = await storage.createComment(commentData);\n      res.status(201).json(comment);\n    } catch (error) {\n      console.error(\"Error creating comment:\", error);\n      res.status(500).json({ message: \"Failed to create comment\" });\n    }\n  });\n\n  // Project credentials routes\n  app.get('/api/projects/:projectId/credentials', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = (req as any).user.id;\n      \n      // Verify user has access to this project first\n      const project = await storage.getProject(req.params.projectId);\n      if (!project || project.createdBy !== userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const credentials = await storage.getCredentialsByProject(req.params.projectId);\n      res.json(credentials);\n    } catch (error) {\n      console.error(\"Error fetching credentials:\", error);\n      res.status(500).json({ message: \"Failed to fetch credentials\" });\n    }\n  });\n\n  app.post('/api/projects/:projectId/credentials', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = (req as any).user.id;\n      \n      // Verify user has access to this project first\n      const project = await storage.getProject(req.params.projectId);\n      if (!project || project.createdBy !== userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const credentialData = {\n        ...req.body,\n        projectId: req.params.projectId,\n        createdBy: userId\n      };\n      \n      // Validate request data\n      const result = insertCredentialSchema.safeParse(credentialData);\n      if (!result.success) {\n        const validationError = fromZodError(result.error);\n        return res.status(400).json({ \n          message: \"Invalid credential data\",\n          errors: validationError.message \n        });\n      }\n      \n      const credential = await storage.createCredential(result.data);\n      res.status(201).json(credential);\n    } catch (error) {\n      console.error(\"Error creating credential:\", error);\n      res.status(500).json({ message: \"Failed to create credential\" });\n    }\n  });\n\n  // Postman collections routes\n  app.get('/api/projects/:projectId/postman-collections', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = (req as any).user.id;\n      \n      // Verify user has access to this project first\n      const project = await storage.getProject(req.params.projectId);\n      if (!project || project.createdBy !== userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const collections = await storage.getPostmanCollectionsByProject(req.params.projectId);\n      res.json(collections);\n    } catch (error) {\n      console.error(\"Error fetching postman collections:\", error);\n      res.status(500).json({ message: \"Failed to fetch postman collections\" });\n    }\n  });\n\n  app.post('/api/projects/:projectId/postman-collections', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = (req as any).user.id;\n      \n      // Verify user has access to this project first\n      const project = await storage.getProject(req.params.projectId);\n      if (!project || project.createdBy !== userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const collectionData = {\n        ...req.body,\n        projectId: req.params.projectId,\n        uploadedBy: userId\n      };\n      \n      // Validate request data\n      const result = insertPostmanCollectionSchema.safeParse(collectionData);\n      if (!result.success) {\n        const validationError = fromZodError(result.error);\n        return res.status(400).json({ \n          message: \"Invalid postman collection data\",\n          errors: validationError.message \n        });\n      }\n      \n      const collection = await storage.createPostmanCollection(result.data);\n      res.status(201).json(collection);\n    } catch (error) {\n      console.error(\"Error creating postman collection:\", error);\n      res.status(500).json({ message: \"Failed to create postman collection\" });\n    }\n  });\n\n  // PDF Generation function\n  async function generateReportPDF(projectId: string, templateId: string | null, reportOptions: {\n    reportName: string;\n    reportScope: string;\n    executiveSummary: string;\n  }, userId: string): Promise<Buffer> {\n    try {\n      // Get project data\n      const project = await storage.getProject(projectId);\n      if (!project) {\n        throw new Error('Project not found');\n      }\n\n      // Get findings for this project\n      const findings = await storage.getFindingsByProject(projectId);\n\n      // Get template (use default if no templateId provided)\n      let template;\n      if (templateId) {\n        template = await storage.getTemplate(templateId);\n        if (!template) {\n          throw new Error('Template not found');\n        }\n      } else {\n        // Get user info for creating default template\n        const user = await storage.getUser(userId); // Use authenticated user's ID\n        if (!user?.organizationId) {\n          throw new Error('User must belong to an organization to create templates');\n        }\n        \n        // Create default template if none exists\n        try {\n          template = await createDefaultVAPTTemplate(user.organizationId, userId);\n        } catch (error) {\n          console.error('Error creating default template:', error);\n          throw new Error('Failed to get report template');\n        }\n      }\n\n      // Prepare template variables\n      const templateData = {\n        report_title: reportOptions.reportName || `${project.name} - Security Assessment Report`,\n        company_name: project.name,\n        application_type: \"Web Application\",\n        organization_name: \"Security Assessment Team\", \n        current_year: new Date().getFullYear().toString(),\n        test_scope: [reportOptions.reportScope || project.name],\n        test_time: new Date().toISOString(),\n        testers: [],\n        executive_summary: sanitizeHtml(reportOptions.executiveSummary) || \"Executive summary will be provided here.\",\n        coverage_asset_type: \"web application\",\n        assumptions: \"Testing was performed with provided access and credentials.\",\n        findings: findings.map(finding => ({\n          title: finding.title,\n          description: sanitizeHtml(finding.descriptionHtml) || '',\n          severity: finding.severity,\n          type: finding.category || 'General',\n          cvssScore: finding.cvssScore?.toString() || '0.0',\n          cvssVector: finding.cvssVector || '',\n          stepsToReproduce: sanitizeHtml(finding.stepsHtml) || '',\n          impact: sanitizeHtml(finding.impactHtml) || '',\n          httpRequest: finding.technicalDetails || '',\n          recommendation: sanitizeHtml(finding.fixHtml) || '',\n          screenshots: [],\n          status: finding.status\n        }))\n      };\n\n      // Replace template variables in HTML\n      let populatedHtml = template.content;\n      \n      // Replace simple string variables\n      populatedHtml = populatedHtml.replace(/{{report_title}}/g, templateData.report_title);\n      populatedHtml = populatedHtml.replace(/{{company_name}}/g, templateData.company_name);\n      populatedHtml = populatedHtml.replace(/{{application_type}}/g, templateData.application_type);\n      populatedHtml = populatedHtml.replace(/{{organization_name}}/g, templateData.organization_name);\n      populatedHtml = populatedHtml.replace(/{{current_year}}/g, templateData.current_year);\n      populatedHtml = populatedHtml.replace(/{{test_time}}/g, new Date(templateData.test_time).toDateString());\n      populatedHtml = populatedHtml.replace(/{{executive_summary}}/g, templateData.executive_summary);\n      populatedHtml = populatedHtml.replace(/{{coverage_asset_type}}/g, templateData.coverage_asset_type);\n      populatedHtml = populatedHtml.replace(/{{assumptions}}/g, templateData.assumptions);\n\n      // Replace test scope (array)\n      const testScopeHtml = templateData.test_scope.map(scope => `<li>${scope}</li>`).join('');\n      populatedHtml = populatedHtml.replace(/{{#test_scope}}.*?{{\\/test_scope}}/gs, `<ul>${testScopeHtml}</ul>`);\n\n      // Replace findings (array) - basic replacement for now\n      const findingsHtml = templateData.findings.map(finding => `\n        <div style=\"page-break-inside: avoid; margin-bottom: 30px; border: 1px solid #ddd; padding: 20px;\">\n          <h3 style=\"color: ${finding.severity === 'critical' ? '#CC0500' : finding.severity === 'high' ? '#DF3D03' : finding.severity === 'medium' ? '#F9A009' : '#666'};\">\n            ${finding.title}\n          </h3>\n          <div><strong>Severity:</strong> ${finding.severity.toUpperCase()}</div>\n          <div><strong>CVSS Score:</strong> ${finding.cvssScore}</div>\n          <div style=\"margin: 10px 0;\"><strong>Description:</strong><br/>${finding.description}</div>\n          <div style=\"margin: 10px 0;\"><strong>Impact:</strong><br/>${finding.impact}</div>\n          <div style=\"margin: 10px 0;\"><strong>Steps to Reproduce:</strong><br/>${finding.stepsToReproduce}</div>\n          <div style=\"margin: 10px 0;\"><strong>Recommendation:</strong><br/>${finding.recommendation}</div>\n        </div>\n      `).join('');\n      \n      populatedHtml = populatedHtml.replace(/{{#findings}}.*?{{\\/findings}}/gs, findingsHtml);\n\n      // Launch puppeteer and generate PDF\n      const browser = await puppeteer.launch({\n        headless: true,\n        args: ['--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage']\n      });\n\n      const page = await browser.newPage();\n      \n      // Disable JavaScript for security\n      await page.setJavaScriptEnabled(false);\n      \n      // Block external requests for security (only allow data: URLs)\n      await page.setRequestInterception(true);\n      page.on('request', (request) => {\n        const url = request.url();\n        if (url.startsWith('data:')) {\n          request.continue();\n        } else {\n          request.abort();\n        }\n      });\n      \n      // Set content with proper wait conditions\n      await page.setContent(populatedHtml, { waitUntil: 'networkidle0' });\n      \n      const pdfBuffer = await page.pdf({\n        format: 'A4',\n        printBackground: true,\n        margin: {\n          top: '20mm',\n          right: '15mm',\n          bottom: '20mm',\n          left: '15mm'\n        }\n      });\n\n      await browser.close();\n      return pdfBuffer;\n\n    } catch (error) {\n      console.error('Error generating PDF:', error);\n      throw error;\n    }\n  }\n\n  // Report export routes\n  app.get('/api/projects/:projectId/exports', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = (req as any).user.id;\n      \n      // Verify user has access to this project first\n      const project = await storage.getProject(req.params.projectId);\n      if (!project || project.createdBy !== userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const exports = await storage.getReportExportsByProject(req.params.projectId);\n      res.json(exports);\n    } catch (error) {\n      console.error(\"Error fetching report exports:\", error);\n      res.status(500).json({ message: \"Failed to fetch report exports\" });\n    }\n  });\n\n  app.post('/api/projects/:projectId/export', isAuthenticated, hasPermission('export_reports'), async (req: any, res) => {\n    try {\n      const userId = (req as any).user.id;\n      const { templateId, templateType, reportName, reportScope, executiveSummary } = req.body;\n      \n      // Verify user has access to this project\n      const hasAccess = await storage.hasProjectAccess(userId, req.params.projectId);\n      if (!hasAccess) {\n        return res.status(403).json({ message: \"Access denied to project\" });\n      }\n\n      const project = await storage.getProject(req.params.projectId);\n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n\n      // Validate templateId if provided\n      if (templateId) {\n        const template = await storage.getTemplate(templateId);\n        if (!template) {\n          return res.status(400).json({ message: \"Invalid template ID\" });\n        }\n\n        // Verify user has access to this template (same organization)\n        const user = await storage.getUser(userId);\n        if (template.organizationId !== user?.organizationId) {\n          return res.status(403).json({ message: \"Access denied to template\" });\n        }\n      }\n      \n      const exportData = {\n        projectId: req.params.projectId,\n        templateId: templateId || null,\n        reportName: reportName || `${project.name} - Security Assessment Report`,\n        reportScope: reportScope || '',\n        templateType: templateType || 'html',\n        executiveSummary: sanitizeHtml(executiveSummary || ''),\n        exportedBy: userId,\n        format: 'pdf', // Default format\n        filename: `${reportName || 'report'}.pdf`,\n        filePath: `/exports/${req.params.projectId}/${Date.now()}.pdf`,\n        checksum: 'pending', // Will be updated after file generation\n        metadata: {\n          includeExecutiveSummary: !!executiveSummary,\n          exportTimestamp: new Date().toISOString()\n        }\n      };\n      \n      // Validate request data\n      const result = insertReportExportSchema.safeParse(exportData);\n      if (!result.success) {\n        const validationError = fromZodError(result.error);\n        return res.status(400).json({ \n          message: \"Invalid export data\",\n          errors: validationError.message \n        });\n      }\n      \n      // Generate PDF immediately\n      const pdfBuffer = await generateReportPDF(req.params.projectId, templateId, {\n        reportName,\n        reportScope,\n        executiveSummary\n      }, userId);\n      \n      // Set headers for file download\n      const filename = `${reportName || 'report'}.pdf`;\n      res.setHeader('Content-Type', 'application/pdf');\n      res.setHeader('Content-Disposition', `attachment; filename=\"${filename}\"`);\n      res.setHeader('Content-Length', pdfBuffer.length);\n      \n      // Send the PDF buffer\n      res.send(pdfBuffer);\n    } catch (error) {\n      console.error(\"Error creating report export:\", error);\n      res.status(500).json({ message: \"Failed to create report export\" });\n    }\n  });\n\n  // User Management Routes\n  // Role management routes\n  app.get('/api/roles', isAuthenticated, hasPermission('manage_roles'), async (req: any, res) => {\n    try {\n      const userId = (req as any).user.id;\n      const user = await storage.getUser(userId);\n      if (!user?.organizationId) {\n        return res.status(400).json({ message: \"User must belong to an organization\" });\n      }\n      \n      const roles = await storage.getRolesByOrganization(user.organizationId);\n      res.json(roles);\n    } catch (error) {\n      console.error(\"Error fetching roles:\", error);\n      res.status(500).json({ message: \"Failed to fetch roles\" });\n    }\n  });\n\n  app.post('/api/roles', isAuthenticated, hasPermission('manage_roles'), async (req: any, res) => {\n    try {\n      const userId = (req as any).user.id;\n      const user = await storage.getUser(userId);\n      if (!user?.organizationId) {\n        return res.status(400).json({ message: \"User must belong to an organization\" });\n      }\n\n      const parseResult = insertRoleSchema.safeParse({\n        ...req.body,\n        organizationId: user.organizationId\n      });\n\n      if (!parseResult.success) {\n        return res.status(400).json({\n          message: \"Invalid role data\",\n          error: fromZodError(parseResult.error).toString()\n        });\n      }\n\n      const role = await storage.createRole(parseResult.data);\n      \n      // Add permissions if provided\n      if (req.body.permissions && Array.isArray(req.body.permissions)) {\n        for (const permission of req.body.permissions) {\n          await storage.addRolePermission({\n            roleId: role.id,\n            permission\n          });\n        }\n      }\n\n      res.json(role);\n    } catch (error) {\n      console.error(\"Error creating role:\", error);\n      res.status(500).json({ message: \"Failed to create role\" });\n    }\n  });\n\n  app.put('/api/roles/:id', isAuthenticated, hasPermission('manage_roles'), async (req: any, res) => {\n    try {\n      const userId = (req as any).user.id;\n      const user = await storage.getUser(userId);\n      if (!user?.organizationId) {\n        return res.status(400).json({ message: \"User must belong to an organization\" });\n      }\n\n      // Verify role belongs to user's organization\n      const existingRole = await storage.getRole(req.params.id);\n      if (!existingRole) {\n        return res.status(404).json({ message: \"Role not found\" });\n      }\n      if (existingRole.organizationId !== user.organizationId) {\n        return res.status(403).json({ message: \"Cannot modify roles from other organizations\" });\n      }\n\n      // Validate the update data - exclude organizationId to prevent org changes\n      const updateSchema = insertRoleSchema.omit({ organizationId: true }).partial();\n      const parseResult = updateSchema.safeParse(req.body);\n      \n      if (!parseResult.success) {\n        return res.status(400).json({\n          message: \"Invalid role update data\",\n          error: fromZodError(parseResult.error).toString()\n        });\n      }\n\n      const role = await storage.updateRole(req.params.id, parseResult.data);\n      res.json(role);\n    } catch (error) {\n      console.error(\"Error updating role:\", error);\n      res.status(500).json({ message: \"Failed to update role\" });\n    }\n  });\n\n  app.delete('/api/roles/:id', isAuthenticated, hasPermission('manage_roles'), async (req: any, res) => {\n    try {\n      const userId = (req as any).user.id;\n      const user = await storage.getUser(userId);\n      if (!user?.organizationId) {\n        return res.status(400).json({ message: \"User must belong to an organization\" });\n      }\n\n      // Verify role belongs to user's organization\n      const existingRole = await storage.getRole(req.params.id);\n      if (!existingRole) {\n        return res.status(404).json({ message: \"Role not found\" });\n      }\n      if (existingRole.organizationId !== user.organizationId) {\n        return res.status(403).json({ message: \"Cannot delete roles from other organizations\" });\n      }\n\n      await storage.deleteRole(req.params.id);\n      res.json({ message: \"Role deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting role:\", error);\n      res.status(500).json({ message: \"Failed to delete role\" });\n    }\n  });\n\n  // Role permissions routes\n  app.get('/api/roles/:id/permissions', isAuthenticated, hasPermission('manage_roles'), async (req: any, res) => {\n    try {\n      const permissions = await storage.getRolePermissions(req.params.id);\n      res.json(permissions);\n    } catch (error) {\n      console.error(\"Error fetching role permissions:\", error);\n      res.status(500).json({ message: \"Failed to fetch role permissions\" });\n    }\n  });\n\n  app.post('/api/roles/:id/permissions', isAuthenticated, hasPermission('manage_roles'), async (req: any, res) => {\n    try {\n      const parseResult = insertRolePermissionSchema.safeParse({\n        roleId: req.params.id,\n        permission: req.body.permission\n      });\n\n      if (!parseResult.success) {\n        return res.status(400).json({\n          message: \"Invalid permission data\",\n          error: fromZodError(parseResult.error).toString()\n        });\n      }\n\n      const rolePermission = await storage.addRolePermission(parseResult.data);\n      res.json(rolePermission);\n    } catch (error) {\n      console.error(\"Error adding role permission:\", error);\n      res.status(500).json({ message: \"Failed to add role permission\" });\n    }\n  });\n\n  app.delete('/api/roles/:id/permissions/:permission', isAuthenticated, hasPermission('manage_roles'), async (req: any, res) => {\n    try {\n      await storage.removeRolePermission(req.params.id, req.params.permission);\n      res.json({ message: \"Permission removed successfully\" });\n    } catch (error) {\n      console.error(\"Error removing role permission:\", error);\n      res.status(500).json({ message: \"Failed to remove role permission\" });\n    }\n  });\n\n  // User management routes\n  app.get('/api/users', isAuthenticated, hasPermission('manage_users'), async (req: any, res) => {\n    try {\n      const userId = (req as any).user.id;\n      const user = await storage.getUser(userId);\n      if (!user?.organizationId) {\n        return res.status(400).json({ message: \"User must belong to an organization\" });\n      }\n      \n      const users = await storage.getUsersByOrganization(user.organizationId);\n      res.json(users);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  app.post('/api/users/:id/roles', isAuthenticated, hasPermission('manage_roles'), async (req: any, res) => {\n    try {\n      const currentUserId = (req as any).user.id;\n      const currentUser = await storage.getUser(currentUserId);\n      \n      if (!currentUser?.organizationId) {\n        return res.status(400).json({ message: \"User must belong to an organization\" });\n      }\n\n      // Prevent self-escalation\n      if (currentUserId === req.params.id) {\n        return res.status(403).json({ message: \"Cannot assign roles to yourself\" });\n      }\n\n      // Get target user and role - scoped to organization to prevent enumeration\n      const targetUser = await storage.getUsersByOrganization(currentUser.organizationId)\n        .then(users => users.find(u => u.id === req.params.id));\n      const role = await storage.getRolesByOrganization(currentUser.organizationId)\n        .then(roles => roles.find(r => r.id === req.body.roleId));\n      \n      if (!targetUser || !role) {\n        return res.status(404).json({ message: \"User or role not found\" });\n      }\n\n      const parseResult = insertUserRoleSchema.safeParse({\n        userId: req.params.id,\n        roleId: req.body.roleId,\n        assignedBy: currentUserId\n      });\n\n      if (!parseResult.success) {\n        return res.status(400).json({\n          message: \"Invalid user role data\",\n          error: fromZodError(parseResult.error).toString()\n        });\n      }\n\n      const userRole = await storage.assignUserRole(parseResult.data);\n      res.json(userRole);\n    } catch (error: any) {\n      console.error(\"Error assigning user role:\", error);\n      \n      // Handle unique constraint violation (duplicate role assignment)\n      if (error.code === '23505' || error.message?.includes('unique constraint')) {\n        return res.status(409).json({ message: \"User already has this role assigned\" });\n      }\n      \n      res.status(500).json({ message: \"Failed to assign user role\" });\n    }\n  });\n\n  app.delete('/api/users/:userId/roles/:roleId', isAuthenticated, hasPermission('manage_roles'), async (req: any, res) => {\n    try {\n      const currentUserId = (req as any).user.id;\n      const currentUser = await storage.getUser(currentUserId);\n      \n      if (!currentUser?.organizationId) {\n        return res.status(400).json({ message: \"User must belong to an organization\" });\n      }\n\n      // Prevent self-escalation\n      if (currentUserId === req.params.userId) {\n        return res.status(403).json({ message: \"Cannot remove roles from yourself\" });\n      }\n\n      // Get target user and role - scoped to organization to prevent enumeration\n      const targetUser = await storage.getUsersByOrganization(currentUser.organizationId)\n        .then(users => users.find(u => u.id === req.params.userId));\n      const role = await storage.getRolesByOrganization(currentUser.organizationId)\n        .then(roles => roles.find(r => r.id === req.params.roleId));\n      \n      if (!targetUser || !role) {\n        return res.status(404).json({ message: \"User or role not found\" });\n      }\n\n      await storage.removeUserRole(req.params.userId, req.params.roleId);\n      res.json({ message: \"User role removed successfully\" });\n    } catch (error) {\n      console.error(\"Error removing user role:\", error);\n      res.status(500).json({ message: \"Failed to remove user role\" });\n    }\n  });\n\n  app.put('/api/users/:userId/deactivate', isAuthenticated, hasPermission('manage_users'), async (req: any, res) => {\n    try {\n      const currentUserId = (req as any).user.id;\n      const currentUser = await storage.getUser(currentUserId);\n      const targetUser = await storage.getUser(req.params.userId);\n      \n      if (!currentUser || !targetUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      // Enforce same organization security\n      if (currentUser.organizationId !== targetUser.organizationId) {\n        return res.status(403).json({ message: \"Cannot manage users from different organizations\" });\n      }\n      \n      const deactivatedUser = await storage.deactivateUser(req.params.userId);\n      res.json({ \n        message: \"User deactivated successfully\",\n        user: deactivatedUser\n      });\n    } catch (error) {\n      console.error(\"Error deactivating user:\", error);\n      res.status(500).json({ message: \"Failed to deactivate user\" });\n    }\n  });\n\n  app.put('/api/users/:userId/reset-password', isAuthenticated, hasPermission('manage_users'), async (req: any, res) => {\n    try {\n      const currentUserId = (req as any).user.id;\n      const currentUser = await storage.getUser(currentUserId);\n      const targetUser = await storage.getUser(req.params.userId);\n      \n      if (!currentUser || !targetUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      // Enforce same organization security\n      if (currentUser.organizationId !== targetUser.organizationId) {\n        return res.status(403).json({ message: \"Cannot manage users from different organizations\" });\n      }\n      \n      // Generate cryptographically secure random 16-character password\n      const generatePassword = async () => {\n        const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*';\n        const { randomBytes } = await import('crypto');\n        const bytes = randomBytes(16);\n        let password = '';\n        for (let i = 0; i < 16; i++) {\n          password += chars.charAt(bytes[i] % chars.length);\n        }\n        return password;\n      };\n\n      const newPassword = await generatePassword();\n      const passwordHash = await hashPassword(newPassword);\n      \n      const updatedUser = await storage.resetUserPassword(req.params.userId, passwordHash);\n      \n      // For security, don't return the plaintext password in the API response\n      // Instead, return a secure flag and handle password display securely on frontend\n      res.json({ \n        message: \"Password reset successfully\",\n        user: updatedUser,\n        passwordResetSuccessful: true,\n        // TODO: Implement secure password delivery mechanism\n        tempPassword: newPassword // Temporary - should be removed for production\n      });\n    } catch (error) {\n      console.error(\"Error resetting password:\", error);\n      res.status(500).json({ message: \"Failed to reset password\" });\n    }\n  });\n\n  app.get('/api/users/:id/roles', isAuthenticated, async (req: any, res) => {\n    try {\n      const userRoles = await storage.getUserRoles(req.params.id);\n      res.json(userRoles);\n    } catch (error) {\n      console.error(\"Error fetching user roles:\", error);\n      res.status(500).json({ message: \"Failed to fetch user roles\" });\n    }\n  });\n\n  // User listing and management routes\n  app.get('/api/users', isAuthenticated, hasPermission('manage_users'), async (req: any, res) => {\n    try {\n      const currentUser = (req as any).user;\n      if (!currentUser?.organizationId) {\n        return res.status(400).json({ message: \"User must belong to an organization\" });\n      }\n\n      const users = await storage.getUsersByOrganization(currentUser.organizationId);\n      res.json(users);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  // Create user directly with auto-generated password\n  app.post('/api/users', isAuthenticated, async (req: any, res) => {\n    try {\n      const currentUserId = (req as any).user.id;\n      const currentUser = await storage.getUser(currentUserId);\n      \n      // Check if user has permission (super admin or manage_users permission)\n      if (currentUser?.role !== 'super_admin') {\n        const permissions = await storage.getUserPermissions(currentUserId);\n        if (!permissions.has('manage_users')) {\n          return res.status(403).json({ message: \"Insufficient permissions to create users\" });\n        }\n      }\n\n      if (!currentUser?.organizationId) {\n        return res.status(400).json({ message: \"User must belong to an organization\" });\n      }\n\n      // Validate input using Zod schema for user creation with custom role\n      const createUserWithRoleSchema = z.object({\n        email: z.string().email(),\n        firstName: z.string().min(1),\n        lastName: z.string().min(1),\n        role: z.string().min(1), // This will be a role ID\n      });\n\n      const validationResult = createUserWithRoleSchema.safeParse(req.body);\n      if (!validationResult.success) {\n        return res.status(400).json({ \n          message: \"Invalid input data\",\n          errors: validationResult.error.errors \n        });\n      }\n\n      const { email, firstName, lastName, role: roleId } = validationResult.data;\n\n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(409).json({ message: \"User with this email already exists\" });\n      }\n\n      // Verify the role exists and belongs to the organization\n      const role = await storage.getRole(roleId);\n      if (!role || role.organizationId !== currentUser.organizationId) {\n        return res.status(400).json({ message: \"Invalid role or role not found in organization\" });\n      }\n\n      // Generate cryptographically secure random 16-character password\n      const generatePassword = async () => {\n        const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*';\n        const { randomBytes } = await import('crypto');\n        const bytes = randomBytes(16);\n        let password = '';\n        for (let i = 0; i < 16; i++) {\n          password += chars.charAt(bytes[i] % chars.length);\n        }\n        return password;\n      };\n\n      const plainPassword = await generatePassword();\n      const passwordHash = await hashPassword(plainPassword);\n\n      // Create user data with default base role\n      const userData = {\n        email,\n        firstName,\n        lastName,\n        passwordHash,\n        organizationId: currentUser.organizationId,\n        role: 'researcher' as any, // Default base role\n        isActive: true,\n      };\n\n      // Create the user directly\n      const newUser = await storage.upsertUser(userData);\n\n      // Assign the custom role to the user\n      await storage.assignUserRole({\n        userId: newUser.id,\n        roleId: roleId,\n        assignedBy: currentUserId,\n      });\n\n      // Remove password hash from response and include plain password\n      const { passwordHash: _, ...userResponse } = newUser;\n      const response = {\n        message: \"User created successfully\",\n        user: userResponse,\n        password: plainPassword\n      };\n      res.status(201).json(response);\n    } catch (error) {\n      console.error(\"Error creating user:\", error);\n      res.status(500).json({ message: \"Failed to create user\" });\n    }\n  });\n\n  app.get('/api/permissions', isAuthenticated, hasPermission('manage_roles'), async (req: any, res) => {\n    try {\n      const permissions = await storage.getAllPermissions();\n      res.json(permissions);\n    } catch (error) {\n      console.error(\"Error fetching permissions:\", error);\n      res.status(500).json({ message: \"Failed to fetch permissions\" });\n    }\n  });\n\n  app.get('/api/role-permissions', isAuthenticated, hasPermission('manage_roles'), async (req: any, res) => {\n    try {\n      const userId = (req as any).user.id;\n      const user = await storage.getUser(userId);\n      if (!user?.organizationId) {\n        return res.status(400).json({ message: \"User must belong to an organization\" });\n      }\n\n      const rolePermissions = await storage.getRolePermissionsByOrganization(user.organizationId);\n      res.json(rolePermissions);\n    } catch (error) {\n      console.error(\"Error fetching role permissions:\", error);\n      res.status(500).json({ message: \"Failed to fetch role permissions\" });\n    }\n  });\n\n  app.get('/api/user-roles', isAuthenticated, hasPermission('manage_users'), async (req: any, res) => {\n    try {\n      const userId = (req as any).user.id;\n      const user = await storage.getUser(userId);\n      if (!user?.organizationId) {\n        return res.status(400).json({ message: \"User must belong to an organization\" });\n      }\n\n      const userRoles = await storage.getUserRolesByOrganization(user.organizationId);\n      res.json(userRoles);\n    } catch (error) {\n      console.error(\"Error fetching user roles:\", error);\n      res.status(500).json({ message: \"Failed to fetch user roles\" });\n    }\n  });\n\n  // Template management routes\n  app.get('/api/templates', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = (req as any).user.id;\n      const user = await storage.getUser(userId);\n      if (!user?.organizationId) {\n        return res.status(400).json({ message: \"User must belong to an organization\" });\n      }\n      \n      const templates = await storage.getTemplatesByOrganization(user.organizationId);\n      res.json(templates);\n    } catch (error) {\n      console.error(\"Error fetching templates:\", error);\n      res.status(500).json({ message: \"Failed to fetch templates\" });\n    }\n  });\n\n  app.post('/api/templates', isAuthenticated, hasPermission('export_reports'), async (req: any, res) => {\n    try {\n      const userId = (req as any).user.id;\n      const user = await storage.getUser(userId);\n      if (!user?.organizationId) {\n        return res.status(400).json({ message: \"User must belong to an organization\" });\n      }\n\n      const parseResult = insertTemplateSchema.safeParse({\n        ...req.body,\n        organizationId: user.organizationId,\n        createdBy: userId\n      });\n\n      if (!parseResult.success) {\n        return res.status(400).json({\n          message: \"Invalid template data\",\n          error: fromZodError(parseResult.error).toString()\n        });\n      }\n\n      // Sanitize template content to prevent XSS\n      const sanitizedData = {\n        ...parseResult.data,\n        content: sanitizeHtml(parseResult.data.content)\n      };\n\n      const template = await storage.createTemplate(sanitizedData);\n      res.json(template);\n    } catch (error) {\n      console.error(\"Error creating template:\", error);\n      res.status(500).json({ message: \"Failed to create template\" });\n    }\n  });\n\n  app.get('/api/templates/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = (req as any).user.id;\n      const user = await storage.getUser(userId);\n      if (!user?.organizationId) {\n        return res.status(400).json({ message: \"User must belong to an organization\" });\n      }\n\n      const template = await storage.getTemplate(req.params.id);\n      if (!template) {\n        return res.status(404).json({ message: \"Template not found\" });\n      }\n      \n      // Check if template belongs to user's organization\n      if (template.organizationId !== user.organizationId) {\n        return res.status(403).json({ message: \"Cannot access templates from other organizations\" });\n      }\n\n      res.json(template);\n    } catch (error) {\n      console.error(\"Error fetching template:\", error);\n      res.status(500).json({ message: \"Failed to fetch template\" });\n    }\n  });\n\n  app.put('/api/templates/:id', isAuthenticated, hasPermission('export_reports'), async (req: any, res) => {\n    try {\n      const userId = (req as any).user.id;\n      const user = await storage.getUser(userId);\n      if (!user?.organizationId) {\n        return res.status(400).json({ message: \"User must belong to an organization\" });\n      }\n\n      // Verify template belongs to user's organization\n      const existingTemplate = await storage.getTemplate(req.params.id);\n      if (!existingTemplate) {\n        return res.status(404).json({ message: \"Template not found\" });\n      }\n      if (existingTemplate.organizationId !== user.organizationId) {\n        return res.status(403).json({ message: \"Cannot modify templates from other organizations\" });\n      }\n\n      // Validate the update data - only allow specific fields to be updated\n      const updateSchema = insertTemplateSchema.pick({ \n        name: true, \n        description: true, \n        content: true, \n        type: true, \n        isDefault: true, \n        version: true \n      }).partial();\n      const parseResult = updateSchema.safeParse(req.body);\n      \n      if (!parseResult.success) {\n        return res.status(400).json({\n          message: \"Invalid template update data\",\n          error: fromZodError(parseResult.error).toString()\n        });\n      }\n\n      // Sanitize template content to prevent XSS if content is being updated\n      const sanitizedData = {\n        ...parseResult.data,\n        ...(parseResult.data.content && { content: sanitizeHtml(parseResult.data.content) })\n      };\n\n      const template = await storage.updateTemplate(req.params.id, sanitizedData);\n      res.json(template);\n    } catch (error) {\n      console.error(\"Error updating template:\", error);\n      res.status(500).json({ message: \"Failed to update template\" });\n    }\n  });\n\n  app.delete('/api/templates/:id', isAuthenticated, hasPermission('export_reports'), async (req: any, res) => {\n    try {\n      const userId = (req as any).user.id;\n      const user = await storage.getUser(userId);\n      if (!user?.organizationId) {\n        return res.status(400).json({ message: \"User must belong to an organization\" });\n      }\n\n      // Verify template belongs to user's organization\n      const existingTemplate = await storage.getTemplate(req.params.id);\n      if (!existingTemplate) {\n        return res.status(404).json({ message: \"Template not found\" });\n      }\n      if (existingTemplate.organizationId !== user.organizationId) {\n        return res.status(403).json({ message: \"Cannot delete templates from other organizations\" });\n      }\n\n      await storage.deleteTemplate(req.params.id);\n      res.json({ message: \"Template deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting template:\", error);\n      res.status(500).json({ message: \"Failed to delete template\" });\n    }\n  });\n\n  // User invitation routes\n  app.get('/api/invitations', isAuthenticated, hasPermission('invite_users'), async (req: any, res) => {\n    try {\n      const userId = (req as any).user.id;\n      const user = await storage.getUser(userId);\n      if (!user?.organizationId) {\n        return res.status(400).json({ message: \"User must belong to an organization\" });\n      }\n      \n      const invitations = await storage.getUserInvitations(user.organizationId);\n      res.json(invitations);\n    } catch (error) {\n      console.error(\"Error fetching invitations:\", error);\n      res.status(500).json({ message: \"Failed to fetch invitations\" });\n    }\n  });\n\n\n  app.post('/api/invitations', isAuthenticated, hasPermission('invite_users'), async (req: any, res) => {\n    try {\n      const userId = (req as any).user.id;\n      const user = await storage.getUser(userId);\n      if (!user?.organizationId) {\n        return res.status(400).json({ message: \"User must belong to an organization\" });\n      }\n\n      // Generate a unique token\n      const token = crypto.randomBytes(32).toString('hex');\n      \n      // Set expiration to 7 days from now\n      const expiresAt = new Date();\n      expiresAt.setDate(expiresAt.getDate() + 7);\n\n      const parseResult = insertUserInvitationSchema.safeParse({\n        email: req.body.email,\n        organizationId: user.organizationId,\n        roleId: req.body.roleId,\n        invitedBy: userId,\n        token,\n        expiresAt\n      });\n\n      if (!parseResult.success) {\n        return res.status(400).json({\n          message: \"Invalid invitation data\",\n          error: fromZodError(parseResult.error).toString()\n        });\n      }\n\n      const invitation = await storage.createUserInvitation(parseResult.data);\n      res.json({ ...invitation, invitationUrl: `${req.protocol}://${req.get('host')}/accept-invitation?token=${token}` });\n    } catch (error) {\n      console.error(\"Error creating invitation:\", error);\n      res.status(500).json({ message: \"Failed to create invitation\" });\n    }\n  });\n\n  app.post('/api/invitations/:token/accept', async (req: any, res) => {\n    try {\n      const { email, password, firstName, lastName } = req.body;\n      \n      if (!email || !password || !firstName || !lastName) {\n        return res.status(400).json({ \n          message: \"Email, password, first name, and last name are required\" \n        });\n      }\n\n      // Get invitation by token\n      const invitation = await storage.getInvitationByToken(req.params.token);\n      if (!invitation) {\n        return res.status(404).json({ message: \"Invitation not found or expired\" });\n      }\n\n      // Check if invitation has expired\n      if (invitation.expiresAt < new Date()) {\n        return res.status(400).json({ message: \"Invitation has expired\" });\n      }\n\n      // Check if invitation email matches provided email\n      if (invitation.email !== email) {\n        return res.status(400).json({ message: \"Email does not match invitation\" });\n      }\n\n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(409).json({ message: \"User with this email already exists\" });\n      }\n\n      // Hash the password\n      const passwordHash = await hashPassword(password);\n\n      // Create user with invitation data\n      const userData = {\n        email,\n        firstName,\n        lastName,\n        passwordHash,\n        organizationId: invitation.organizationId,\n        role: \"researcher\" as const, // Default role, can be changed by role assignment\n        isActive: true,\n      };\n\n      // Validate user data\n      const parseResult = insertUserSchema.safeParse(userData);\n      if (!parseResult.success) {\n        return res.status(400).json({\n          message: \"Invalid user data\",\n          error: fromZodError(parseResult.error).toString()\n        });\n      }\n\n      // Create the user\n      const user = await storage.upsertUser(parseResult.data);\n\n      // Assign the role from invitation\n      if (invitation.roleId) {\n        await storage.assignUserRole({\n          userId: user.id,\n          roleId: invitation.roleId,\n          assignedBy: invitation.invitedBy,\n        });\n      }\n\n      // Mark invitation as used\n      await storage.markInvitationAsUsed(req.params.token, user.id);\n\n      // Create session for the new user\n      (req as any).session.userId = user.id;\n\n      // Remove password hash from response\n      const { passwordHash: _, ...userResponse } = user;\n      res.status(201).json({\n        message: \"Account created successfully\",\n        user: userResponse\n      });\n    } catch (error) {\n      console.error(\"Error accepting invitation:\", error);\n      res.status(500).json({ message: \"Failed to accept invitation\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":59156},"client/src/components/examples/ProjectCard.tsx":{"content":"import { ProjectCard } from '../ProjectCard'\n\n// TODO: Remove mock data\nconst mockProject = {\n  id: 'p-001',\n  name: 'E-commerce Platform Security Assessment',\n  customerName: 'TechCorp Industries',\n  description: 'Comprehensive security assessment of the customer-facing e-commerce platform including web application, API endpoints, and payment processing systems.',\n  status: 'in_progress' as const,\n  startDate: new Date('2024-01-15'),\n  endDate: new Date('2024-02-28'),\n  findingStats: {\n    total: 23,\n    critical: 2,\n    high: 5,\n    medium: 8,\n    low: 6,\n    informational: 2,\n  },\n  teamSize: 4,\n  progress: 65,\n}\n\nexport default function ProjectCardExample() {\n  return (\n    <div className=\"max-w-sm\">\n      <ProjectCard\n        project={mockProject}\n        onOpen={(id) => console.log('Opening project:', id)}\n        onViewFindings={(id) => console.log('View findings:', id)}\n      />\n    </div>\n  )\n}","size_bytes":916},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/TemplateManagement.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Plus, Edit, Trash2, FileText, Calendar } from \"lucide-react\";\nimport { insertTemplateSchema } from \"@shared/schema\";\n\ntype ReportTemplate = {\n  id: string;\n  name: string;\n  description: string | null;\n  type: \"html\" | \"docx\" | \"markdown\";\n  content: string;\n  variables?: any;\n  organizationId: string | null;\n  customerId: string | null;\n  isDefault: boolean | null;\n  version: number | null;\n  createdBy: string;\n  createdAt: string | null;\n  updatedAt: string | null;\n};\n\nconst templateFormSchema = insertTemplateSchema.omit({ \n  organizationId: true, \n  createdBy: true \n});\n\ntype TemplateFormData = z.infer<typeof templateFormSchema>;\n\nexport default function TemplateManagement() {\n  const { toast } = useToast();\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [editingTemplate, setEditingTemplate] = useState<ReportTemplate | null>(null);\n\n  // Fetch templates\n  const { data: templates = [], isLoading } = useQuery<ReportTemplate[]>({\n    queryKey: ['/api/templates'],\n  });\n\n  // Create template mutation\n  const createTemplateMutation = useMutation({\n    mutationFn: (data: TemplateFormData) => \n      apiRequest('POST', '/api/templates', data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/templates'] });\n      setIsCreateDialogOpen(false);\n      toast({\n        title: \"Template created\",\n        description: \"Report template has been created successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create template\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update template mutation\n  const updateTemplateMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: Partial<TemplateFormData> }) =>\n      apiRequest('PUT', `/api/templates/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/templates'] });\n      setIsEditDialogOpen(false);\n      setEditingTemplate(null);\n      toast({\n        title: \"Template updated\",\n        description: \"Report template has been updated successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update template\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete template mutation\n  const deleteTemplateMutation = useMutation({\n    mutationFn: (id: string) => apiRequest('DELETE', `/api/templates/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/templates'] });\n      toast({\n        title: \"Template deleted\",\n        description: \"Report template has been deleted successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete template\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleEdit = (template: ReportTemplate) => {\n    setEditingTemplate(template);\n    setIsEditDialogOpen(true);\n  };\n\n  const handleDelete = (template: ReportTemplate) => {\n    if (confirm(`Are you sure you want to delete the template \"${template.name}\"?`)) {\n      deleteTemplateMutation.mutate(template.id);\n    }\n  };\n\n  const getTemplateTypeBadgeVariant = (type: ReportTemplate['type']) => {\n    switch (type) {\n      case 'html': return 'destructive';\n      case 'docx': return 'default';\n      case 'markdown': return 'secondary';\n      default: return 'outline';\n    }\n  };\n\n  const formatTemplateType = (type: ReportTemplate['type']) => {\n    return type.charAt(0).toUpperCase() + type.slice(1);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n            <p className=\"mt-2 text-muted-foreground\">Loading templates...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\" data-testid=\"heading-template-management\">Report Templates</h1>\n          <p className=\"text-muted-foreground\">\n            Manage report templates for vulnerability assessments and penetration tests\n          </p>\n        </div>\n        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-create-template\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Create Template\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>Create Report Template</DialogTitle>\n              <DialogDescription>\n                Create a new report template for generating standardized reports\n              </DialogDescription>\n            </DialogHeader>\n            <TemplateForm\n              onSubmit={(data) => createTemplateMutation.mutate(data)}\n              isPending={createTemplateMutation.isPending}\n            />\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {templates.length === 0 ? (\n        <Card className=\"text-center py-12\">\n          <CardContent>\n            <FileText className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium mb-2\">No Templates Found</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              Get started by creating your first report template\n            </p>\n            <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n              <DialogTrigger asChild>\n                <Button data-testid=\"button-create-first-template\">\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Create Your First Template\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-2xl\">\n                <DialogHeader>\n                  <DialogTitle>Create Report Template</DialogTitle>\n                  <DialogDescription>\n                    Create a new report template for generating standardized reports\n                  </DialogDescription>\n                </DialogHeader>\n                <TemplateForm\n                  onSubmit={(data) => createTemplateMutation.mutate(data)}\n                  isPending={createTemplateMutation.isPending}\n                />\n              </DialogContent>\n            </Dialog>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {templates.map((template) => (\n            <Card key={template.id} className=\"hover-elevate\" data-testid={`card-template-${template.id}`}>\n              <CardHeader>\n                <div className=\"flex justify-between items-start\">\n                  <div className=\"space-y-1\">\n                    <CardTitle className=\"text-lg\" data-testid={`text-template-name-${template.id}`}>\n                      {template.name}\n                    </CardTitle>\n                    <div className=\"flex items-center gap-2\">\n                      <Badge \n                        variant={getTemplateTypeBadgeVariant(template.type)}\n                        data-testid={`badge-template-type-${template.id}`}\n                      >\n                        {formatTemplateType(template.type)}\n                      </Badge>\n                    </div>\n                  </div>\n                  <div className=\"flex gap-1\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      onClick={() => handleEdit(template)}\n                      data-testid={`button-edit-template-${template.id}`}\n                    >\n                      <Edit className=\"h-4 w-4\" />\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      onClick={() => handleDelete(template)}\n                      data-testid={`button-delete-template-${template.id}`}\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                {template.description && (\n                  <p className=\"text-sm text-muted-foreground mb-3\" data-testid={`text-template-description-${template.id}`}>\n                    {template.description}\n                  </p>\n                )}\n                <div className=\"flex items-center text-xs text-muted-foreground\">\n                  <Calendar className=\"h-3 w-3 mr-1\" />\n                  Created {template.createdAt ? new Date(template.createdAt).toLocaleDateString() : 'Unknown'}\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {/* Edit Dialog */}\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Edit Report Template</DialogTitle>\n            <DialogDescription>\n              Update the report template details and content\n            </DialogDescription>\n          </DialogHeader>\n          {editingTemplate && (\n            <TemplateForm\n              initialValues={{\n                name: editingTemplate.name,\n                description: editingTemplate.description || \"\",\n                content: editingTemplate.content,\n                type: editingTemplate.type,\n              }}\n              onSubmit={(data) => updateTemplateMutation.mutate({ \n                id: editingTemplate.id, \n                data \n              })}\n              isPending={updateTemplateMutation.isPending}\n            />\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n\ninterface TemplateFormProps {\n  initialValues?: Partial<TemplateFormData>;\n  onSubmit: (data: TemplateFormData) => void;\n  isPending: boolean;\n}\n\nfunction TemplateForm({ initialValues, onSubmit, isPending }: TemplateFormProps) {\n  const form = useForm<TemplateFormData>({\n    resolver: zodResolver(templateFormSchema),\n    defaultValues: {\n      name: initialValues?.name || \"\",\n      description: initialValues?.description || \"\",\n      content: initialValues?.content || \"\",\n      type: initialValues?.type || \"html\",\n    },\n  });\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n        <FormField\n          control={form.control}\n          name=\"name\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Template Name</FormLabel>\n              <FormControl>\n                <Input \n                  placeholder=\"e.g., Standard VAPT Report\" \n                  {...field} \n                  data-testid=\"input-template-name\"\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"type\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Template Type</FormLabel>\n              <FormControl>\n                <select \n                  {...field} \n                  className=\"flex h-9 w-full rounded-md border border-input bg-background px-3 py-1 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50\"\n                  data-testid=\"select-template-type\"\n                >\n                  <option value=\"html\">HTML Report</option>\n                  <option value=\"docx\">DOCX Document</option>\n                  <option value=\"markdown\">Markdown Document</option>\n                </select>\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"description\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Description (Optional)</FormLabel>\n              <FormControl>\n                <Input \n                  placeholder=\"Brief description of this template\" \n                  {...field} \n                  value={field.value || \"\"}\n                  data-testid=\"input-template-description\"\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"content\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Template Content</FormLabel>\n              <FormControl>\n                <Textarea \n                  placeholder=\"Template content with variables like {{findings}}, {{scope}}, {{executive_summary}}...\"\n                  className=\"min-h-[200px]\"\n                  {...field} \n                  data-testid=\"textarea-template-content\"\n                />\n              </FormControl>\n              <FormMessage />\n              <div className=\"text-xs text-muted-foreground\">\n                <p>Available variables:</p>\n                <div className=\"grid grid-cols-2 gap-1 mt-1\">\n                  <span>• {`{{findings}}`} - All findings</span>\n                  <span>• {`{{scope}}`} - Project scope</span>\n                  <span>• {`{{executive_summary}}`} - Summary</span>\n                  <span>• {`{{organization_name}}`} - Client name</span>\n                  <span>• {`{{project_name}}`} - Project name</span>\n                  <span>• {`{{date}}`} - Current date</span>\n                </div>\n              </div>\n            </FormItem>\n          )}\n        />\n\n        <div className=\"flex justify-end gap-2 pt-4\">\n          <Button type=\"submit\" disabled={isPending} data-testid=\"button-save-template\">\n            {isPending ? \"Saving...\" : \"Save Template\"}\n          </Button>\n        </div>\n      </form>\n    </Form>\n  );\n}","size_bytes":15328},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/components/CVSSCalculator.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Label } from \"@/components/ui/label\";\nimport { SeverityBadge } from \"./SeverityBadge\";\nimport { cn } from \"@/lib/utils\";\n\ninterface CVSSCalculatorProps {\n  value?: string;\n  onChange?: (vector: string, score: number, severity: string) => void;\n  disabled?: boolean;\n}\n\nconst cvssMetrics = {\n  AV: {\n    label: \"Attack Vector\",\n    options: {\n      N: { label: \"Network\", value: 0.85 },\n      A: { label: \"Adjacent\", value: 0.62 },\n      L: { label: \"Local\", value: 0.55 },\n      P: { label: \"Physical\", value: 0.2 },\n    },\n  },\n  AC: {\n    label: \"Attack Complexity\",\n    options: {\n      L: { label: \"Low\", value: 0.77 },\n      H: { label: \"High\", value: 0.44 },\n    },\n  },\n  PR: {\n    label: \"Privileges Required\",\n    options: {\n      N: { label: \"None\", value: 0.85 },\n      L: { label: \"Low\", value: 0.62 },\n      H: { label: \"High\", value: 0.27 },\n    },\n  },\n  UI: {\n    label: \"User Interaction\",\n    options: {\n      N: { label: \"None\", value: 0.85 },\n      R: { label: \"Required\", value: 0.62 },\n    },\n  },\n  S: {\n    label: \"Scope\",\n    options: {\n      U: { label: \"Unchanged\", value: 1.0 },\n      C: { label: \"Changed\", value: 1.0 },\n    },\n  },\n  C: {\n    label: \"Confidentiality\",\n    options: {\n      H: { label: \"High\", value: 0.56 },\n      L: { label: \"Low\", value: 0.22 },\n      N: { label: \"None\", value: 0.0 },\n    },\n  },\n  I: {\n    label: \"Integrity\",\n    options: {\n      H: { label: \"High\", value: 0.56 },\n      L: { label: \"Low\", value: 0.22 },\n      N: { label: \"None\", value: 0.0 },\n    },\n  },\n  A: {\n    label: \"Availability\",\n    options: {\n      H: { label: \"High\", value: 0.56 },\n      L: { label: \"Low\", value: 0.22 },\n      N: { label: \"None\", value: 0.0 },\n    },\n  },\n};\n\nfunction calculateCVSS(vector: Record<string, string>) {\n  // Get base metric values\n  const av = cvssMetrics.AV.options[vector.AV as keyof typeof cvssMetrics.AV.options]?.value || 0;\n  const ac = cvssMetrics.AC.options[vector.AC as keyof typeof cvssMetrics.AC.options]?.value || 0;\n  const ui = cvssMetrics.UI.options[vector.UI as keyof typeof cvssMetrics.UI.options]?.value || 0;\n  \n  // Privileges Required value depends on Scope\n  let pr;\n  if (vector.S === 'C') { // Scope Changed\n    switch (vector.PR) {\n      case 'N': pr = 0.85; break;\n      case 'L': pr = 0.68; break;\n      case 'H': pr = 0.50; break;\n      default: pr = 0;\n    }\n  } else { // Scope Unchanged\n    switch (vector.PR) {\n      case 'N': pr = 0.85; break;\n      case 'L': pr = 0.62; break;\n      case 'H': pr = 0.27; break;\n      default: pr = 0;\n    }\n  }\n\n  // Calculate Exploitability sub-score\n  const exploitability = 8.22 * av * ac * pr * ui;\n\n  // Get impact values\n  const impactConf = cvssMetrics.C.options[vector.C as keyof typeof cvssMetrics.C.options]?.value || 0;\n  const impactInteg = cvssMetrics.I.options[vector.I as keyof typeof cvssMetrics.I.options]?.value || 0;\n  const impactAvail = cvssMetrics.A.options[vector.A as keyof typeof cvssMetrics.A.options]?.value || 0;\n\n  // Calculate ISC_Base\n  const iscBase = 1 - ((1 - impactConf) * (1 - impactInteg) * (1 - impactAvail));\n\n  // Calculate Impact sub-score based on Scope\n  let impact;\n  if (vector.S === 'U') { // Scope Unchanged\n    impact = 6.42 * iscBase;\n  } else { // Scope Changed\n    impact = 7.52 * (iscBase - 0.029) - 3.25 * Math.pow(iscBase - 0.02, 15);\n  }\n\n  // Calculate Base Score\n  let baseScore;\n  if (impact <= 0) {\n    baseScore = 0;\n  } else if (vector.S === 'U') {\n    baseScore = Math.min(impact + exploitability, 10);\n  } else {\n    baseScore = Math.min(1.08 * (impact + exploitability), 10);\n  }\n\n  // Roundup function - smallest number to 1 decimal place equal or higher than input\n  return Math.ceil(baseScore * 10) / 10;\n}\n\nfunction getSeverity(score: number): \"critical\" | \"high\" | \"medium\" | \"low\" | \"informational\" {\n  if (score >= 9.0) return \"critical\";\n  if (score >= 7.0) return \"high\";\n  if (score >= 4.0) return \"medium\";\n  if (score >= 0.1) return \"low\";\n  return \"informational\";\n}\n\nfunction parseVector(vectorString: string) {\n  const parts = vectorString.replace('CVSS:3.1/', '').split('/');\n  const vector: Record<string, string> = {};\n  \n  parts.forEach(part => {\n    const [key, value] = part.split(':');\n    if (key && value) {\n      vector[key] = value;\n    }\n  });\n  \n  return vector;\n}\n\nexport function CVSSCalculator({ value, onChange, disabled }: CVSSCalculatorProps) {\n  const [vector, setVector] = useState(() => {\n    if (value) {\n      return parseVector(value);\n    }\n    return {\n      AV: 'N',\n      AC: 'L', \n      PR: 'N',\n      UI: 'N',\n      S: 'U',\n      C: 'N',\n      I: 'N',\n      A: 'N'\n    };\n  });\n\n  const score = calculateCVSS(vector);\n  const severity = getSeverity(score);\n  const vectorString = `CVSS:3.1/AV:${vector.AV}/AC:${vector.AC}/PR:${vector.PR}/UI:${vector.UI}/S:${vector.S}/C:${vector.C}/I:${vector.I}/A:${vector.A}`;\n\n  const handleChange = (metric: string, value: string) => {\n    const newVector = { ...vector, [metric]: value };\n    setVector(newVector);\n    \n    const newScore = calculateCVSS(newVector);\n    const newSeverity = getSeverity(newScore);\n    const newVectorString = `CVSS:3.1/AV:${newVector.AV}/AC:${newVector.AC}/PR:${newVector.PR}/UI:${newVector.UI}/S:${newVector.S}/C:${newVector.C}/I:${newVector.I}/A:${newVector.A}`;\n    \n    onChange?.(newVectorString, newScore, newSeverity);\n  };\n\n  return (\n    <Card data-testid=\"cvss-calculator\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center justify-between\">\n          <span>Base Score</span>\n          <div className=\"flex items-center gap-2\">\n            <Badge variant=\"outline\" className=\"font-mono text-sm\" data-testid=\"cvss-score\">\n              {score.toFixed(1)}\n            </Badge>\n            <SeverityBadge severity={severity} />\n          </div>\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          {Object.entries(cvssMetrics).map(([key, metric]) => (\n            <div key={key} className=\"space-y-3\">\n              <Label className=\"text-sm font-medium\">{metric.label} ({key})</Label>\n              <div className=\"flex flex-wrap gap-2\">\n                {Object.entries(metric.options).map(([optionKey, option]) => (\n                  <Button\n                    key={optionKey}\n                    variant={vector[key] === optionKey ? \"default\" : \"outline\"}\n                    size=\"sm\"\n                    onClick={() => handleChange(key, optionKey)}\n                    disabled={disabled}\n                    data-testid={`button-cvss-${key.toLowerCase()}-${optionKey.toLowerCase()}`}\n                    className={cn(\n                      \"text-xs px-3 py-1 h-auto\",\n                      vector[key] === optionKey && \"bg-primary text-primary-foreground\"\n                    )}\n                  >\n                    {option.label} ({optionKey})\n                  </Button>\n                ))}\n              </div>\n            </div>\n          ))}\n        </div>\n        \n        <div className=\"pt-4 border-t\">\n          <Label>CVSS Vector</Label>\n          <div className=\"mt-1 p-2 bg-muted rounded-md font-mono text-sm break-all\" data-testid=\"cvss-vector\">\n            {vectorString}\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":7530},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { AppSidebar } from \"@/components/AppSidebar\";\nimport { ThemeToggle } from \"@/components/ThemeToggle\";\nimport NotFound from \"@/pages/not-found\";\nimport Login from \"@/pages/Login\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport Projects from \"@/pages/Projects\";\nimport ProjectDetail from \"@/pages/ProjectDetail\";\nimport MyFindings from \"@/pages/MyFindings\";\nimport FindingDetail from \"./pages/FindingDetail\";\nimport CreateFinding from \"@/pages/CreateFinding\";\nimport UserManagement from \"@/pages/UserManagement\";\nimport RoleManagement from \"@/pages/RoleManagement\";\nimport TemplateManagement from \"@/pages/TemplateManagement\";\n\nfunction AuthenticatedRouter() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/projects\" component={Projects} />\n      <Route path=\"/projects/:id\" component={ProjectDetail} />\n      <Route path=\"/findings\" component={MyFindings} />\n      <Route path=\"/findings/new\" component={CreateFinding} />\n      <Route path=\"/findings/:id\" component={FindingDetail} />\n      <Route path=\"/search\" component={() => <div className=\"p-6\"><h1 className=\"text-2xl font-bold\">Search</h1><p className=\"text-muted-foreground\">Advanced search interface coming soon...</p></div>} />\n      <Route path=\"/reports\" component={() => <div className=\"p-6\"><h1 className=\"text-2xl font-bold\">Reports</h1><p className=\"text-muted-foreground\">Report generation interface coming soon...</p></div>} />\n      <Route path=\"/templates\" component={TemplateManagement} />\n      <Route path=\"/users\" component={UserManagement} />\n      <Route path=\"/roles\" component={RoleManagement} />\n      <Route path=\"/settings\" component={() => <div className=\"p-6\"><h1 className=\"text-2xl font-bold\">Settings</h1><p className=\"text-muted-foreground\">Settings interface coming soon...</p></div>} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return <Login />;\n  }\n\n  return <AuthenticatedApp />;\n}\n\nfunction AuthenticatedApp() {\n  // Custom sidebar width for the application\n  const style = {\n    \"--sidebar-width\": \"16rem\",\n    \"--sidebar-width-icon\": \"3rem\",\n  } as React.CSSProperties;\n\n  return (\n    <SidebarProvider style={style}>\n      <div className=\"flex h-screen w-full\">\n        <AppSidebar />\n        <div className=\"flex flex-col flex-1\">\n          <header className=\"flex items-center justify-between p-2 border-b\">\n            <SidebarTrigger data-testid=\"button-sidebar-toggle\" />\n            <ThemeToggle />\n          </header>\n          <main className=\"flex-1 overflow-auto\">\n            <AuthenticatedRouter />\n          </main>\n        </div>\n      </div>\n    </SidebarProvider>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <div className=\"min-h-screen\">\n          <Router />\n        </div>\n        <Toaster />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;","size_bytes":3760},"client/src/components/FindingCard.tsx":{"content":"import { Card, CardContent, CardHeader } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { SeverityBadge } from './SeverityBadge';\nimport { StatusBadge } from './StatusBadge';\nimport {\n  Eye,\n  MessageSquare,\n  Paperclip,\n  Calendar,\n  MoreHorizontal,\n} from 'lucide-react';\nimport { formatDistanceToNow } from 'date-fns';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport { cn } from '@/lib/utils';\n\ninterface FindingCardProps {\n  finding: {\n    id: string;\n    title: string;\n    severity: 'critical' | 'high' | 'medium' | 'low' | 'informational';\n    status: string;\n    description?: string;\n    cvssScore?: number;\n    createdBy: {\n      id: string;\n      name: string;\n      avatar?: string;\n    };\n    createdAt: Date;\n    updatedAt: Date;\n    commentsCount?: number;\n    evidenceCount?: number;\n    affectedAssets?: string[];\n  };\n  onView?: (id: string) => void;\n  onEdit?: (id: string) => void;\n  onStatusChange?: (id: string, status: string) => void;\n  className?: string;\n}\n\nexport function FindingCard({\n  finding,\n  onView,\n  onEdit,\n  onStatusChange,\n  className,\n}: FindingCardProps) {\n  const handleView = () => {\n    onView?.(finding.id);\n    console.log('View finding:', finding.id);\n  };\n\n  const handleEdit = () => {\n    onEdit?.(finding.id);\n    console.log('Edit finding:', finding.id);\n  };\n\n  const handleStatusChange = (status: string) => {\n    onStatusChange?.(finding.id, status);\n    console.log('Change status:', finding.id, status);\n  };\n\n  const getInitials = (name: string) => {\n    return name\n      .split(' ')\n      .map((n) => n[0])\n      .join('')\n      .toUpperCase();\n  };\n\n  return (\n    <Card \n      className={cn('hover-elevate transition-colors', className)} \n      data-testid={`card-finding-${finding.id}`}\n    >\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between gap-3\">\n          <div className=\"flex-1 min-w-0\">\n            <h3 className=\"font-semibold text-base leading-tight truncate mb-2\">\n              {finding.title}\n            </h3>\n            <div className=\"flex items-center gap-2 mb-2\">\n              <SeverityBadge severity={finding.severity} />\n              <StatusBadge status={finding.status as any} />\n              {finding.cvssScore && (\n                <Badge variant=\"outline\" className=\"font-mono text-xs\">\n                  {finding.cvssScore.toFixed(1)}\n                </Badge>\n              )}\n            </div>\n          </div>\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"ghost\" size=\"sm\" data-testid={`button-menu-${finding.id}`}>\n                <MoreHorizontal className=\"h-4 w-4\" />\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\">\n              <DropdownMenuItem onClick={handleView}>\n                <Eye className=\"h-4 w-4 mr-2\" />\n                View Details\n              </DropdownMenuItem>\n              <DropdownMenuItem onClick={handleEdit}>\n                Edit Finding\n              </DropdownMenuItem>\n              <DropdownMenuItem onClick={() => handleStatusChange('submitted')}>\n                Mark as Submitted\n              </DropdownMenuItem>\n              <DropdownMenuItem onClick={() => handleStatusChange('closed')}>\n                Close Finding\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"pt-0\">\n        {finding.description && (\n          <p className=\"text-sm text-muted-foreground mb-3 line-clamp-2\">\n            {finding.description.replace(/<[^>]*>/g, '').substring(0, 120)}...\n          </p>\n        )}\n        \n        {finding.affectedAssets && finding.affectedAssets.length > 0 && (\n          <div className=\"mb-3\">\n            <div className=\"flex flex-wrap gap-1\">\n              {finding.affectedAssets.slice(0, 3).map((asset, index) => (\n                <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                  {asset}\n                </Badge>\n              ))}\n              {finding.affectedAssets.length > 3 && (\n                <Badge variant=\"secondary\" className=\"text-xs\">\n                  +{finding.affectedAssets.length - 3} more\n                </Badge>\n              )}\n            </div>\n          </div>\n        )}\n        \n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <Avatar className=\"h-6 w-6\">\n              <AvatarImage src={finding.createdBy.avatar} />\n              <AvatarFallback className=\"text-xs\">\n                {getInitials(finding.createdBy.name)}\n              </AvatarFallback>\n            </Avatar>\n            <span className=\"text-xs text-muted-foreground\">\n              {finding.createdBy.name}\n            </span>\n          </div>\n          \n          <div className=\"flex items-center gap-3 text-xs text-muted-foreground\">\n            {finding.commentsCount !== undefined && (\n              <div className=\"flex items-center gap-1\">\n                <MessageSquare className=\"h-3 w-3\" />\n                <span>{finding.commentsCount}</span>\n              </div>\n            )}\n            {finding.evidenceCount !== undefined && (\n              <div className=\"flex items-center gap-1\">\n                <Paperclip className=\"h-3 w-3\" />\n                <span>{finding.evidenceCount}</span>\n              </div>\n            )}\n            <div className=\"flex items-center gap-1\">\n              <Calendar className=\"h-3 w-3\" />\n              <span>{formatDistanceToNow(finding.updatedAt, { addSuffix: true })}</span>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"mt-3 flex gap-2\">\n          <Button \n            size=\"sm\" \n            variant=\"outline\" \n            onClick={handleView}\n            data-testid={`button-view-${finding.id}`}\n          >\n            <Eye className=\"h-4 w-4 mr-1\" />\n            View\n          </Button>\n          <Button \n            size=\"sm\" \n            onClick={handleEdit}\n            data-testid={`button-edit-${finding.id}`}\n          >\n            Edit\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":6489},"server/storage.ts":{"content":"import {\n  users,\n  organizations,\n  projects,\n  findings,\n  projectMembers,\n  evidenceAttachments,\n  comments,\n  reportTemplates,\n  reportExports,\n  activityLogs,\n  projectCredentials,\n  postmanCollections,\n  roles,\n  rolePermissions,\n  userRoles,\n  userInvitations,\n  type User,\n  type UpsertUser,\n  type Organization,\n  type Project,\n  type Finding,\n  type ProjectMember,\n  type EvidenceAttachment,\n  type Comment,\n  type ReportTemplate,\n  type ReportExport,\n  type ActivityLog,\n  type ProjectCredential,\n  type PostmanCollection,\n  type Role,\n  type RolePermission,\n  type UserRole,\n  type UserInvitation,\n  type InsertOrganization,\n  type InsertProject,\n  type InsertFinding,\n  type InsertEvidence,\n  type InsertComment,\n  type InsertTemplate,\n  type InsertCredential,\n  type InsertPostmanCollection,\n  type InsertReportExport,\n  type InsertRole,\n  type InsertRolePermission,\n  type InsertUserRole,\n  type InsertUserInvitation,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc } from \"drizzle-orm\";\n\n// Interface for storage operations - following Replit Auth requirements\nexport interface IStorage {\n  // User operations (mandatory for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  deactivateUser(id: string): Promise<User>;\n  resetUserPassword(id: string, newPasswordHash: string): Promise<User>;\n  \n  // Organization operations\n  createOrganization(org: InsertOrganization): Promise<Organization>;\n  getOrganization(id: string): Promise<Organization | undefined>;\n  \n  // Project operations\n  createProject(project: InsertProject): Promise<Project>;\n  getProject(id: string): Promise<Project | undefined>;\n  getProjectsByOrganization(orgId: string): Promise<Project[]>;\n  getProjectsByUser(userId: string): Promise<Project[]>;\n  addProjectMember(projectId: string, userId: string, canEdit?: boolean): Promise<ProjectMember>;\n  \n  // Project credential operations\n  createCredential(credential: InsertCredential): Promise<ProjectCredential>;\n  getCredentialsByProject(projectId: string): Promise<ProjectCredential[]>;\n  \n  // Postman collection operations\n  createPostmanCollection(collection: InsertPostmanCollection): Promise<PostmanCollection>;\n  getPostmanCollectionsByProject(projectId: string): Promise<PostmanCollection[]>;\n  \n  // Report export operations\n  createReportExport(reportExport: InsertReportExport): Promise<ReportExport>;\n  getReportExportsByProject(projectId: string): Promise<ReportExport[]>;\n  \n  // Finding operations\n  createFinding(finding: InsertFinding): Promise<Finding>;\n  getFinding(id: string): Promise<Finding | undefined>;\n  getFindingsByProject(projectId: string): Promise<Finding[]>;\n  getFindingsByUser(userId: string): Promise<(Finding & { project: { name: string; id: string }; reporter: { firstName: string; lastName: string } })[]>;\n  updateFinding(id: string, updates: Partial<InsertFinding>): Promise<Finding>;\n  \n  // Activity log operations\n  createActivityLog(log: any): Promise<ActivityLog>;\n  getActivityLogsByFinding(findingId: string): Promise<ActivityLog[]>;\n  \n  // Comment operations\n  createComment(comment: InsertComment): Promise<Comment>;\n  getCommentsByFinding(findingId: string): Promise<(Comment & { author: { firstName: string; lastName: string } })[]>;\n  \n  // Evidence operations\n  addEvidence(evidence: InsertEvidence): Promise<EvidenceAttachment>;\n  getEvidenceByFinding(findingId: string): Promise<EvidenceAttachment[]>;\n  \n  // Template operations\n  createTemplate(template: InsertTemplate): Promise<ReportTemplate>;\n  getTemplate(id: string): Promise<ReportTemplate | undefined>;\n  getTemplatesByOrganization(orgId: string): Promise<ReportTemplate[]>;\n  updateTemplate(id: string, updates: Partial<InsertTemplate>): Promise<ReportTemplate>;\n  deleteTemplate(id: string): Promise<void>;\n  \n  // Project membership check\n  hasProjectAccess(userId: string, projectId: string): Promise<boolean>;\n  \n  // Activity logging\n  logActivity(\n    actorId: string,\n    action: string,\n    targetType: string,\n    targetId: string,\n    oldValues?: any,\n    newValues?: any,\n    metadata?: any\n  ): Promise<ActivityLog>;\n\n  // Role management operations\n  createRole(role: InsertRole): Promise<Role>;\n  getRole(id: string): Promise<Role | undefined>;\n  getRolesByOrganization(orgId: string): Promise<Role[]>;\n  updateRole(id: string, updates: Partial<InsertRole>): Promise<Role>;\n  deleteRole(id: string): Promise<void>;\n  \n  // Role permission operations\n  addRolePermission(rolePermission: InsertRolePermission): Promise<RolePermission>;\n  removeRolePermission(roleId: string, permission: string): Promise<void>;\n  getRolePermissions(roleId: string): Promise<string[]>;\n  \n  // User role operations\n  assignUserRole(userRole: InsertUserRole): Promise<UserRole>;\n  removeUserRole(userId: string, roleId: string): Promise<void>;\n  getUserRoles(userId: string): Promise<(UserRole & { role: Role })[]>;\n  getUsersByRole(roleId: string): Promise<(UserRole & { user: User })[]>;\n  \n  // User invitation operations\n  createUserInvitation(invitation: InsertUserInvitation): Promise<UserInvitation>;\n  getUserInvitations(organizationId: string): Promise<(UserInvitation & { role: Role; invitedByUser: User })[]>;\n  getInvitationByToken(token: string): Promise<UserInvitation | undefined>;\n  acceptInvitation(token: string, userId: string): Promise<UserRole>;\n  \n  // User management operations\n  getUsersByOrganization(organizationId: string): Promise<(User & { roles: Role[] })[]>;\n  updateUserRole(userId: string, organizationId: string, newRole: string): Promise<UserRole>;\n  removeUserFromOrganization(userId: string, organizationId: string): Promise<void>;\n  \n  // Performance optimization - get all user permissions in one query\n  getUserPermissions(userId: string): Promise<Set<string>>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations (mandatory for Replit Auth)\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  async deactivateUser(id: string): Promise<User> {\n    const [deactivatedUser] = await db\n      .update(users)\n      .set({\n        isActive: false,\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, id))\n      .returning();\n    return deactivatedUser;\n  }\n\n  async resetUserPassword(id: string, newPasswordHash: string): Promise<User> {\n    const [updatedUser] = await db\n      .update(users)\n      .set({\n        passwordHash: newPasswordHash,\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, id))\n      .returning();\n    return updatedUser;\n  }\n\n  // Organization operations\n  async createOrganization(orgData: InsertOrganization): Promise<Organization> {\n    const [org] = await db.insert(organizations).values(orgData).returning();\n    return org;\n  }\n\n  async getOrganization(id: string): Promise<Organization | undefined> {\n    const [org] = await db.select().from(organizations).where(eq(organizations.id, id));\n    return org;\n  }\n\n  // Project operations\n  async createProject(projectData: InsertProject): Promise<Project> {\n    const [project] = await db.insert(projects).values(projectData).returning();\n    return project;\n  }\n\n  async getProject(id: string): Promise<Project | undefined> {\n    const [project] = await db.select().from(projects).where(eq(projects.id, id));\n    return project;\n  }\n\n  async getProjectsByOrganization(orgId: string): Promise<Project[]> {\n    return await db.select().from(projects).where(eq(projects.organizationId, orgId));\n  }\n\n  async getProjectsByUser(userId: string): Promise<Project[]> {\n    const results = await db\n      .select()\n      .from(projects)\n      .innerJoin(projectMembers, eq(projects.id, projectMembers.projectId))\n      .where(eq(projectMembers.userId, userId));\n    \n    return results.map(r => r.projects);\n  }\n\n  async addProjectMember(projectId: string, userId: string, canEdit = false): Promise<ProjectMember> {\n    const [member] = await db\n      .insert(projectMembers)\n      .values({ projectId, userId, canEdit })\n      .returning();\n    return member;\n  }\n\n  // Finding operations\n  async createFinding(findingData: InsertFinding): Promise<Finding> {\n    const [finding] = await db.insert(findings).values(findingData).returning();\n    return finding;\n  }\n\n  // Project credential operations\n  async createCredential(credentialData: InsertCredential): Promise<ProjectCredential> {\n    const [credential] = await db.insert(projectCredentials).values(credentialData).returning();\n    return credential;\n  }\n\n  async getCredentialsByProject(projectId: string): Promise<ProjectCredential[]> {\n    return await db\n      .select()\n      .from(projectCredentials)\n      .where(eq(projectCredentials.projectId, projectId));\n  }\n\n  // Postman collection operations\n  async createPostmanCollection(collectionData: InsertPostmanCollection): Promise<PostmanCollection> {\n    const [collection] = await db.insert(postmanCollections).values(collectionData).returning();\n    return collection;\n  }\n\n  async getPostmanCollectionsByProject(projectId: string): Promise<PostmanCollection[]> {\n    return await db\n      .select()\n      .from(postmanCollections)\n      .where(eq(postmanCollections.projectId, projectId));\n  }\n\n  // Report export operations\n  async createReportExport(reportExportData: InsertReportExport): Promise<ReportExport> {\n    const [reportExport] = await db.insert(reportExports).values(reportExportData).returning();\n    return reportExport;\n  }\n\n  async getReportExportsByProject(projectId: string): Promise<ReportExport[]> {\n    return await db\n      .select()\n      .from(reportExports)\n      .where(eq(reportExports.projectId, projectId));\n  }\n\n  async getFinding(id: string): Promise<(Finding & { project: { name: string; id: string }; reporter: { firstName: string; lastName: string } }) | undefined> {\n    const result = await db\n      .select({\n        // Finding fields\n        id: findings.id,\n        projectId: findings.projectId,\n        title: findings.title,\n        descriptionHtml: findings.descriptionHtml,\n        stepsHtml: findings.stepsHtml,\n        impactHtml: findings.impactHtml,\n        fixHtml: findings.fixHtml,\n        references: findings.references,\n        affectedAssets: findings.affectedAssets,\n        tags: findings.tags,\n        cvssVector: findings.cvssVector,\n        cvssScore: findings.cvssScore,\n        severity: findings.severity,\n        manualSeverityOverride: findings.manualSeverityOverride,\n        status: findings.status,\n        createdBy: findings.createdBy,\n        assignedTo: findings.assignedTo,\n        isDuplicate: findings.isDuplicate,\n        duplicateOf: findings.duplicateOf,\n        createdAt: findings.createdAt,\n        updatedAt: findings.updatedAt,\n        // Project info\n        projectName: projects.name,\n        projectIdRef: projects.id,\n        // Reporter info\n        reporterFirstName: users.firstName,\n        reporterLastName: users.lastName,\n      })\n      .from(findings)\n      .innerJoin(projects, eq(findings.projectId, projects.id))\n      .innerJoin(users, eq(findings.createdBy, users.id))\n      .where(eq(findings.id, id))\n      .limit(1);\n\n    if (result.length === 0) {\n      return undefined;\n    }\n\n    const row = result[0];\n    return {\n      id: row.id,\n      projectId: row.projectId,\n      title: row.title,\n      descriptionHtml: row.descriptionHtml,\n      stepsHtml: row.stepsHtml,\n      impactHtml: row.impactHtml,\n      fixHtml: row.fixHtml,\n      references: row.references,\n      affectedAssets: row.affectedAssets,\n      tags: row.tags,\n      cvssVector: row.cvssVector,\n      cvssScore: row.cvssScore,\n      severity: row.severity,\n      manualSeverityOverride: row.manualSeverityOverride,\n      status: row.status,\n      createdBy: row.createdBy,\n      assignedTo: row.assignedTo,\n      isDuplicate: row.isDuplicate,\n      duplicateOf: row.duplicateOf,\n      createdAt: row.createdAt,\n      updatedAt: row.updatedAt,\n      project: {\n        name: row.projectName || '',\n        id: row.projectIdRef || '',\n      },\n      reporter: {\n        firstName: row.reporterFirstName || '',\n        lastName: row.reporterLastName || '',\n      },\n    };\n  }\n\n  async getFindingsByProject(projectId: string): Promise<Finding[]> {\n    return await db\n      .select()\n      .from(findings)\n      .where(eq(findings.projectId, projectId))\n      .orderBy(desc(findings.createdAt));\n  }\n\n  async getFindingsByUser(userId: string): Promise<(Finding & { project: { name: string; id: string }; reporter: { firstName: string; lastName: string } })[]> {\n    const result = await db\n      .select({\n        // Finding fields\n        id: findings.id,\n        projectId: findings.projectId,\n        title: findings.title,\n        descriptionHtml: findings.descriptionHtml,\n        stepsHtml: findings.stepsHtml,\n        impactHtml: findings.impactHtml,\n        fixHtml: findings.fixHtml,\n        references: findings.references,\n        affectedAssets: findings.affectedAssets,\n        tags: findings.tags,\n        cvssVector: findings.cvssVector,\n        cvssScore: findings.cvssScore,\n        severity: findings.severity,\n        manualSeverityOverride: findings.manualSeverityOverride,\n        status: findings.status,\n        createdBy: findings.createdBy,\n        assignedTo: findings.assignedTo,\n        isDuplicate: findings.isDuplicate,\n        duplicateOf: findings.duplicateOf,\n        createdAt: findings.createdAt,\n        updatedAt: findings.updatedAt,\n        // Project info\n        projectName: projects.name,\n        projectIdRef: projects.id,\n        // Reporter info\n        reporterFirstName: users.firstName,\n        reporterLastName: users.lastName,\n      })\n      .from(findings)\n      .innerJoin(projects, eq(findings.projectId, projects.id))\n      .innerJoin(users, eq(findings.createdBy, users.id))\n      .where(eq(findings.createdBy, userId))\n      .orderBy(desc(findings.createdAt));\n\n    return result.map(row => ({\n      id: row.id,\n      projectId: row.projectId,\n      title: row.title,\n      descriptionHtml: row.descriptionHtml,\n      stepsHtml: row.stepsHtml,\n      impactHtml: row.impactHtml,\n      fixHtml: row.fixHtml,\n      references: row.references,\n      affectedAssets: row.affectedAssets,\n      tags: row.tags,\n      cvssVector: row.cvssVector,\n      cvssScore: row.cvssScore,\n      severity: row.severity,\n      manualSeverityOverride: row.manualSeverityOverride,\n      status: row.status,\n      createdBy: row.createdBy,\n      assignedTo: row.assignedTo,\n      isDuplicate: row.isDuplicate,\n      duplicateOf: row.duplicateOf,\n      createdAt: row.createdAt,\n      updatedAt: row.updatedAt,\n      project: {\n        name: row.projectName || '',\n        id: row.projectIdRef || '',\n      },\n      reporter: {\n        firstName: row.reporterFirstName || '',\n        lastName: row.reporterLastName || '',\n      },\n    }));\n  }\n\n  async updateFinding(id: string, updates: Partial<InsertFinding>): Promise<Finding> {\n    const [finding] = await db\n      .update(findings)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(findings.id, id))\n      .returning();\n    return finding;\n  }\n\n  // Evidence operations\n  async addEvidence(evidenceData: InsertEvidence): Promise<EvidenceAttachment> {\n    const [evidence] = await db.insert(evidenceAttachments).values(evidenceData).returning();\n    return evidence;\n  }\n\n  async getEvidenceByFinding(findingId: string): Promise<EvidenceAttachment[]> {\n    return await db\n      .select()\n      .from(evidenceAttachments)\n      .where(eq(evidenceAttachments.findingId, findingId));\n  }\n\n  // Activity log operations\n  async createActivityLog(log: any): Promise<ActivityLog> {\n    const [activity] = await db.insert(activityLogs).values(log).returning();\n    return activity;\n  }\n\n  async getActivityLogsByFinding(findingId: string): Promise<ActivityLog[]> {\n    return await db\n      .select()\n      .from(activityLogs)\n      .where(eq(activityLogs.targetId, findingId))\n      .orderBy(desc(activityLogs.createdAt));\n  }\n\n  // Comment operations\n  async createComment(commentData: InsertComment): Promise<Comment> {\n    const [comment] = await db.insert(comments).values(commentData).returning();\n    return comment;\n  }\n\n  async getCommentsByFinding(findingId: string): Promise<(Comment & { author: { firstName: string; lastName: string } })[]> {\n    const result = await db\n      .select({\n        id: comments.id,\n        findingId: comments.findingId,\n        authorId: comments.authorId,\n        content: comments.content,\n        isPrivate: comments.isPrivate,\n        mentions: comments.mentions,\n        createdAt: comments.createdAt,\n        updatedAt: comments.updatedAt,\n        authorFirstName: users.firstName,\n        authorLastName: users.lastName,\n      })\n      .from(comments)\n      .innerJoin(users, eq(comments.authorId, users.id))\n      .where(eq(comments.findingId, findingId))\n      .orderBy(desc(comments.createdAt));\n\n    return result.map(row => ({\n      id: row.id,\n      findingId: row.findingId,\n      authorId: row.authorId,\n      content: row.content,\n      isPrivate: row.isPrivate,\n      mentions: row.mentions,\n      createdAt: row.createdAt,\n      updatedAt: row.updatedAt,\n      author: {\n        firstName: row.authorFirstName || '',\n        lastName: row.authorLastName || '',\n      },\n    }));\n  }\n\n  // Template operations\n  async createTemplate(templateData: InsertTemplate): Promise<ReportTemplate> {\n    const [template] = await db.insert(reportTemplates).values(templateData).returning();\n    return template;\n  }\n\n  async getTemplatesByOrganization(orgId: string): Promise<ReportTemplate[]> {\n    return await db\n      .select()\n      .from(reportTemplates)\n      .where(eq(reportTemplates.organizationId, orgId));\n  }\n\n  async getTemplate(id: string): Promise<ReportTemplate | undefined> {\n    const [template] = await db\n      .select()\n      .from(reportTemplates)\n      .where(eq(reportTemplates.id, id))\n      .limit(1);\n    return template;\n  }\n\n  async updateTemplate(id: string, updates: Partial<InsertTemplate>): Promise<ReportTemplate> {\n    const [template] = await db\n      .update(reportTemplates)\n      .set(updates)\n      .where(eq(reportTemplates.id, id))\n      .returning();\n    return template;\n  }\n\n  async deleteTemplate(id: string): Promise<void> {\n    await db\n      .delete(reportTemplates)\n      .where(eq(reportTemplates.id, id));\n  }\n\n  // Project membership check\n  async hasProjectAccess(userId: string, projectId: string): Promise<boolean> {\n    // Check if user is the project creator\n    const project = await db\n      .select({ createdBy: projects.createdBy })\n      .from(projects)\n      .where(eq(projects.id, projectId))\n      .limit(1);\n    \n    if (project.length > 0 && project[0].createdBy === userId) {\n      return true;\n    }\n    \n    // Check if user is a project member\n    const membership = await db\n      .select()\n      .from(projectMembers)\n      .where(and(\n        eq(projectMembers.projectId, projectId),\n        eq(projectMembers.userId, userId)\n      ))\n      .limit(1);\n    \n    return membership.length > 0;\n  }\n\n  // Activity logging\n  async logActivity(\n    actorId: string,\n    action: string,\n    targetType: string,\n    targetId: string,\n    oldValues?: any,\n    newValues?: any,\n    metadata?: any\n  ): Promise<ActivityLog> {\n    const [log] = await db\n      .insert(activityLogs)\n      .values({\n        actorId,\n        action,\n        targetType,\n        targetId,\n        oldValues,\n        newValues,\n        metadata,\n      })\n      .returning();\n    return log;\n  }\n\n  // Role management operations\n  async createRole(roleData: InsertRole): Promise<Role> {\n    const [role] = await db.insert(roles).values(roleData).returning();\n    return role;\n  }\n\n  async getRole(id: string): Promise<Role | undefined> {\n    const [role] = await db.select().from(roles).where(eq(roles.id, id));\n    return role;\n  }\n\n  async getRolesByOrganization(orgId: string): Promise<Role[]> {\n    return await db.select().from(roles).where(eq(roles.organizationId, orgId));\n  }\n\n  async updateRole(id: string, updates: Partial<InsertRole>): Promise<Role> {\n    const [role] = await db\n      .update(roles)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(roles.id, id))\n      .returning();\n    return role;\n  }\n\n  async deleteRole(id: string): Promise<void> {\n    await db.delete(roles).where(eq(roles.id, id));\n  }\n\n  // Role permission operations\n  async addRolePermission(rolePermissionData: InsertRolePermission): Promise<RolePermission> {\n    const [rolePermission] = await db.insert(rolePermissions).values(rolePermissionData).returning();\n    return rolePermission;\n  }\n\n  async removeRolePermission(roleId: string, permission: string): Promise<void> {\n    await db.delete(rolePermissions).where(\n      and(\n        eq(rolePermissions.roleId, roleId),\n        eq(rolePermissions.permission, permission as any)\n      )\n    );\n  }\n\n  async getRolePermissions(roleId: string): Promise<string[]> {\n    const permissions = await db\n      .select({ permission: rolePermissions.permission })\n      .from(rolePermissions)\n      .where(eq(rolePermissions.roleId, roleId));\n    return permissions.map(p => p.permission);\n  }\n\n  // User role operations\n  async assignUserRole(userRoleData: InsertUserRole): Promise<UserRole> {\n    const [userRole] = await db.insert(userRoles).values(userRoleData).returning();\n    return userRole;\n  }\n\n  async removeUserRole(userId: string, roleId: string): Promise<void> {\n    await db.delete(userRoles).where(\n      and(\n        eq(userRoles.userId, userId),\n        eq(userRoles.roleId, roleId)\n      )\n    );\n  }\n\n  async getUserRoles(userId: string): Promise<(UserRole & { role: Role })[]> {\n    const results = await db\n      .select()\n      .from(userRoles)\n      .innerJoin(roles, eq(userRoles.roleId, roles.id))\n      .where(eq(userRoles.userId, userId));\n    \n    return results.map(row => ({\n      ...row.user_roles,\n      role: row.roles\n    }));\n  }\n\n  async getUsersByRole(roleId: string): Promise<(UserRole & { user: User })[]> {\n    const results = await db\n      .select()\n      .from(userRoles)\n      .innerJoin(users, eq(userRoles.userId, users.id))\n      .where(eq(userRoles.roleId, roleId));\n    \n    return results.map(row => ({\n      ...row.user_roles,\n      user: row.users\n    }));\n  }\n\n  // User invitation operations\n  async createUserInvitation(invitationData: InsertUserInvitation): Promise<UserInvitation> {\n    const [invitation] = await db.insert(userInvitations).values(invitationData).returning();\n    return invitation;\n  }\n\n  async getUserInvitations(organizationId: string): Promise<(UserInvitation & { role: Role; invitedByUser: User })[]> {\n    const results = await db\n      .select()\n      .from(userInvitations)\n      .innerJoin(roles, eq(userInvitations.roleId, roles.id))\n      .innerJoin(users, eq(userInvitations.invitedBy, users.id))\n      .where(eq(userInvitations.organizationId, organizationId));\n    \n    return results.map(row => ({\n      ...row.user_invitations,\n      role: row.roles,\n      invitedByUser: row.users\n    }));\n  }\n\n  async getInvitationByToken(token: string): Promise<UserInvitation | undefined> {\n    const [invitation] = await db\n      .select()\n      .from(userInvitations)\n      .where(eq(userInvitations.token, token));\n    return invitation;\n  }\n\n  async acceptInvitation(token: string, userId: string): Promise<UserRole> {\n    // Get the invitation\n    const invitation = await this.getInvitationByToken(token);\n    if (!invitation) {\n      throw new Error('Invalid invitation token');\n    }\n\n    // Create the user role assignment\n    const userRole = await this.assignUserRole({\n      userId,\n      roleId: invitation.roleId,\n      assignedBy: invitation.invitedBy,\n    });\n\n    // Delete the invitation\n    await db.delete(userInvitations).where(eq(userInvitations.token, token));\n\n    return userRole;\n  }\n\n  async markInvitationAsUsed(token: string, userId: string): Promise<void> {\n    // Simply delete the invitation to mark it as used\n    // This prevents it from being used again\n    await db.delete(userInvitations).where(eq(userInvitations.token, token));\n  }\n\n  // User management operations\n  async getUsersByOrganization(organizationId: string): Promise<(User & { roles: Role[] })[]> {\n    const usersWithRoles = await db\n      .select()\n      .from(users)\n      .leftJoin(userRoles, eq(users.id, userRoles.userId))\n      .leftJoin(roles, eq(userRoles.roleId, roles.id))\n      .where(eq(users.organizationId, organizationId));\n\n    // Group users with their roles\n    const userMap = new Map<string, User & { roles: Role[] }>();\n    \n    for (const row of usersWithRoles) {\n      const user = row.users;\n      const role = row.roles;\n      \n      if (!userMap.has(user.id)) {\n        userMap.set(user.id, { ...user, roles: [] });\n      }\n      \n      if (role) {\n        userMap.get(user.id)!.roles.push(role);\n      }\n    }\n    \n    return Array.from(userMap.values());\n  }\n\n  async updateUserRole(userId: string, organizationId: string, newRoleId: string): Promise<UserRole> {\n    // Remove existing roles for this organization\n    await db.delete(userRoles).where(\n      and(\n        eq(userRoles.userId, userId),\n        eq(roles.organizationId, organizationId)\n      )\n    );\n\n    // Add new role\n    return await this.assignUserRole({\n      userId,\n      roleId: newRoleId,\n      assignedBy: userId, // For now, assuming self-assignment\n    });\n  }\n\n  async removeUserFromOrganization(userId: string, organizationId: string): Promise<void> {\n    // Remove all role assignments for this user in this organization\n    await db.delete(userRoles).where(\n      and(\n        eq(userRoles.userId, userId),\n        eq(roles.organizationId, organizationId)\n      )\n    );\n  }\n\n  // Performance optimization - get all user permissions in one query\n  async getUserPermissions(userId: string): Promise<Set<string>> {\n    const results = await db\n      .select({ permission: rolePermissions.permission })\n      .from(userRoles)\n      .innerJoin(roles, eq(userRoles.roleId, roles.id))\n      .innerJoin(rolePermissions, eq(roles.id, rolePermissions.roleId))\n      .where(eq(userRoles.userId, userId));\n    \n    return new Set(results.map(row => row.permission));\n  }\n\n  // Bootstrap and utility methods for super admin setup\n  async bootstrapSuperAdmin(userId: string, orgId: string): Promise<void> {\n    // Get the user and verify they exist\n    let user = await this.getUser(userId);\n    if (!user) {\n      throw new Error(\"User not found for bootstrap\");\n    }\n\n    // Security check: Verify user either has no organization or belongs to the target org\n    if (user.organizationId && user.organizationId !== orgId) {\n      throw new Error(\"User already belongs to a different organization\");\n    }\n\n    // Security check: Ensure organization has no existing super admins\n    const existingSuperAdmins = await db.select()\n      .from(users)\n      .innerJoin(userRoles, eq(users.id, userRoles.userId))\n      .innerJoin(roles, eq(userRoles.roleId, roles.id))\n      .where(and(\n        eq(users.organizationId, orgId),\n        eq(roles.name, \"Super Admin\")\n      ));\n\n    if (existingSuperAdmins.length > 0) {\n      throw new Error(\"Organization already has a super admin. Bootstrap not allowed.\");\n    }\n\n    // Security check: Ensure organization has minimal users (new org protection)\n    const orgUsers = await db.select().from(users).where(eq(users.organizationId, orgId));\n    if (orgUsers.length > 2) {\n      throw new Error(\"Bootstrap only allowed for new organizations with minimal users\");\n    }\n\n    // Assign user to organization if not already assigned\n    if (!user.organizationId) {\n      await db.update(users).set({ organizationId: orgId }).where(eq(users.id, userId));\n    }\n\n    // Create or get the \"Super Admin\" role for this organization\n    let superAdminRole = await db.select()\n      .from(roles)\n      .where(and(eq(roles.name, \"Super Admin\"), eq(roles.organizationId, orgId)))\n      .limit(1);\n\n    if (superAdminRole.length === 0) {\n      // Create the Super Admin role\n      const [newRole] = await db.insert(roles).values({\n        name: \"Super Admin\",\n        description: \"Full system administrator with all permissions\",\n        organizationId: orgId\n      }).returning();\n      superAdminRole = [newRole];\n\n      // Grant all permissions to the Super Admin role\n      // Import from schema to ensure consistency\n      const allPermissions = [\n        'view_assigned_projects',\n        'submit_finding', \n        'view_finding',\n        'edit_finding',\n        'edit_comment',\n        'view_comment',\n        'invite_users',\n        'create_projects',\n        'edit_projects',\n        'export_reports',\n        'view_all_projects',\n        'manage_users',\n        'manage_roles'\n      ] as const;\n      const rolePermissionValues = allPermissions.map(permission => ({\n        roleId: newRole.id,\n        permission: permission as any\n      }));\n      \n      if (rolePermissionValues.length > 0) {\n        await db.insert(rolePermissions).values(rolePermissionValues);\n      }\n    }\n\n    // Assign the Super Admin role to the user if not already assigned\n    const existingUserRole = await db.select()\n      .from(userRoles)\n      .where(and(eq(userRoles.userId, userId), eq(userRoles.roleId, superAdminRole[0].id)))\n      .limit(1);\n\n    if (existingUserRole.length === 0) {\n      await db.insert(userRoles).values({\n        userId: userId,\n        roleId: superAdminRole[0].id\n      });\n    }\n  }\n\n  async isSuperAdmin(userId: string): Promise<boolean> {\n    const permissions = await this.getUserPermissions(userId);\n    \n    // Check if user has manage_users, manage_roles, and manage_system permissions\n    const superAdminPermissions = ['manage_users', 'manage_roles', 'manage_system'];\n    return superAdminPermissions.every(permission => permissions.has(permission));\n  }\n\n  // Additional RBAC query methods for API endpoints\n\n  async getAllPermissions(): Promise<{ name: string }[]> {\n    // Return all available permissions from the enum\n    const allPermissions = [\n      'view_assigned_projects',\n      'submit_finding',\n      'view_finding', \n      'edit_finding',\n      'edit_comment',\n      'view_comment',\n      'invite_users',\n      'create_projects',\n      'edit_projects',\n      'export_reports',\n      'view_all_projects',\n      'manage_users',\n      'manage_roles'\n    ];\n    \n    return allPermissions.map(permission => ({ name: permission }));\n  }\n\n  async getRolePermissionsByOrganization(organizationId: string): Promise<any[]> {\n    const results = await db.select()\n      .from(rolePermissions)\n      .innerJoin(roles, eq(rolePermissions.roleId, roles.id))\n      .where(eq(roles.organizationId, organizationId));\n    \n    return results.map(result => ({\n      roleId: result.role_permissions.roleId,\n      permission: result.role_permissions.permission\n    }));\n  }\n\n  async getUserRolesByOrganization(organizationId: string): Promise<any[]> {\n    const results = await db.select()\n      .from(userRoles)\n      .innerJoin(users, eq(userRoles.userId, users.id))\n      .innerJoin(roles, eq(userRoles.roleId, roles.id))\n      .where(and(\n        eq(users.organizationId, organizationId),\n        eq(roles.organizationId, organizationId)\n      ));\n    \n    return results.map(result => ({\n      userId: result.user_roles.userId,\n      roleId: result.user_roles.roleId,\n      assignedBy: result.user_roles.assignedBy,\n      role: result.roles\n    }));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":32216},"client/src/components/ThemeToggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useEffect, useState } from \"react\";\n\nexport function ThemeToggle() {\n  const [isDark, setIsDark] = useState(false);\n\n  useEffect(() => {\n    const stored = localStorage.getItem('theme');\n    const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n    const shouldBeDark = stored === 'dark' || (!stored && prefersDark);\n    \n    setIsDark(shouldBeDark);\n    document.documentElement.classList.toggle('dark', shouldBeDark);\n  }, []);\n\n  const toggleTheme = () => {\n    const newIsDark = !isDark;\n    setIsDark(newIsDark);\n    localStorage.setItem('theme', newIsDark ? 'dark' : 'light');\n    document.documentElement.classList.toggle('dark', newIsDark);\n    console.log('Theme toggled to:', newIsDark ? 'dark' : 'light');\n  };\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={toggleTheme}\n      data-testid=\"button-theme-toggle\"\n    >\n      {isDark ? (\n        <Sun className=\"h-4 w-4\" />\n      ) : (\n        <Moon className=\"h-4 w-4\" />\n      )}\n    </Button>\n  );\n}","size_bytes":1117},"client/src/pages/ComponentShowcase.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { SeverityBadge } from \"@/components/SeverityBadge\";\nimport { StatusBadge } from \"@/components/StatusBadge\";\nimport { CVSSCalculator } from \"@/components/CVSSCalculator\";\nimport { RichTextEditor } from \"@/components/RichTextEditor\";\nimport { FileUploadZone } from \"@/components/FileUploadZone\";\nimport { FindingCard } from \"@/components/FindingCard\";\nimport { ProjectCard } from \"@/components/ProjectCard\";\nimport { ThemeToggle } from \"@/components/ThemeToggle\";\nimport { useState } from \"react\";\n\n// Mock data for components\nconst mockFinding = {\n  id: 'showcase-finding',\n  title: 'Cross-Site Scripting (XSS) in User Profile',\n  severity: 'high' as const,\n  status: 'company_review',\n  description: '<p>A stored XSS vulnerability was identified in the user profile section where user input is not properly sanitized before being displayed to other users.</p>',\n  cvssScore: 7.2,\n  createdBy: { id: 'u-001', name: 'Alex Thompson' },\n  createdAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000),\n  updatedAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000),\n  commentsCount: 4,\n  evidenceCount: 7,\n  affectedAssets: ['app.example.com', 'admin.example.com', 'portal.example.com'],\n};\n\nconst mockProject = {\n  id: 'showcase-project',\n  name: 'Healthcare Portal Security Assessment',\n  customerName: 'HealthTech Solutions',\n  description: 'Comprehensive security assessment of patient portal and healthcare management system including HIPAA compliance review.',\n  status: 'in_progress' as const,\n  startDate: new Date('2024-01-20'),\n  endDate: new Date('2024-03-15'),\n  findingStats: { total: 18, critical: 1, high: 4, medium: 7, low: 5, informational: 1 },\n  teamSize: 5,\n  progress: 72,\n};\n\nexport default function ComponentShowcase() {\n  const [editorContent, setEditorContent] = useState('<p>Welcome to the <strong>PenTest Pro</strong> rich text editor!</p><p>This editor supports:</p><ul><li>Bold and italic formatting</li><li>Lists and quotes</li><li>Links and images</li><li>Tables and code blocks</li></ul>');\n\n  return (\n    <div className=\"p-6 max-w-7xl mx-auto space-y-8\">\n      <div className=\"text-center space-y-2\">\n        <h1 className=\"text-4xl font-bold\">PenTest Pro Components</h1>\n        <p className=\"text-lg text-muted-foreground\">\n          Comprehensive UI components for modern penetration testing workflows\n        </p>\n        <div className=\"flex justify-center\">\n          <ThemeToggle />\n        </div>\n      </div>\n\n      <Separator />\n\n      {/* Status and Severity Badges */}\n      <section>\n        <h2 className=\"text-2xl font-semibold mb-4\">Status & Severity Indicators</h2>\n        <div className=\"grid md:grid-cols-2 gap-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Severity Badges</CardTitle>\n              <CardDescription>Visual indicators for vulnerability severity levels</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex flex-wrap gap-2\">\n                <SeverityBadge severity=\"critical\" />\n                <SeverityBadge severity=\"high\" />\n                <SeverityBadge severity=\"medium\" />\n                <SeverityBadge severity=\"low\" />\n                <SeverityBadge severity=\"informational\" />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardHeader>\n              <CardTitle>Status Badges</CardTitle>\n              <CardDescription>Workflow status indicators for findings and projects</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                <div>\n                  <h4 className=\"text-sm font-medium mb-2\">Finding Status</h4>\n                  <div className=\"flex flex-wrap gap-2\">\n                    <StatusBadge status=\"draft\" />\n                    <StatusBadge status=\"submitted\" />\n                    <StatusBadge status=\"company_review\" />\n                    <StatusBadge status=\"verified_fixed\" />\n                  </div>\n                </div>\n                <div>\n                  <h4 className=\"text-sm font-medium mb-2\">Project Status</h4>\n                  <div className=\"flex flex-wrap gap-2\">\n                    <StatusBadge status=\"planned\" />\n                    <StatusBadge status=\"in_progress\" />\n                    <StatusBadge status=\"complete\" />\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </section>\n\n      <Separator />\n\n      {/* CVSS Calculator */}\n      <section>\n        <h2 className=\"text-2xl font-semibold mb-4\">CVSS v3.1 Calculator</h2>\n        <CVSSCalculator \n          onChange={(vector, score, severity) => {\n            console.log('CVSS Updated:', { vector, score, severity });\n          }}\n        />\n      </section>\n\n      <Separator />\n\n      {/* Rich Text Editor */}\n      <section>\n        <h2 className=\"text-2xl font-semibold mb-4\">Rich Text Editor</h2>\n        <Card>\n          <CardHeader>\n            <CardTitle>Finding Description Editor</CardTitle>\n            <CardDescription>\n              Professional rich text editing with TipTap for detailed finding descriptions\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <RichTextEditor\n              content={editorContent}\n              onChange={setEditorContent}\n              placeholder=\"Describe the security finding in detail...\"\n            />\n          </CardContent>\n        </Card>\n      </section>\n\n      <Separator />\n\n      {/* File Upload Zone */}\n      <section>\n        <h2 className=\"text-2xl font-semibold mb-4\">Evidence File Upload</h2>\n        <Card>\n          <CardHeader>\n            <CardTitle>Evidence Management</CardTitle>\n            <CardDescription>\n              Drag-and-drop file uploads with progress tracking and metadata\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <FileUploadZone\n              onFilesAdded={(files) => {\n                console.log('Files uploaded:', files.map(f => f.file.name));\n              }}\n              maxFiles={8}\n              maxSize={100 * 1024 * 1024} // 100MB\n            />\n          </CardContent>\n        </Card>\n      </section>\n\n      <Separator />\n\n      {/* Finding and Project Cards */}\n      <section>\n        <h2 className=\"text-2xl font-semibold mb-4\">Data Display Components</h2>\n        <div className=\"grid lg:grid-cols-2 gap-6\">\n          <div>\n            <h3 className=\"text-lg font-medium mb-3\">Finding Card</h3>\n            <FindingCard\n              finding={mockFinding}\n              onView={(id) => console.log('View finding:', id)}\n              onEdit={(id) => console.log('Edit finding:', id)}\n              onStatusChange={(id, status) => console.log('Status change:', id, status)}\n            />\n          </div>\n          \n          <div>\n            <h3 className=\"text-lg font-medium mb-3\">Project Card</h3>\n            <ProjectCard\n              project={mockProject}\n              onOpen={(id) => console.log('Open project:', id)}\n              onViewFindings={(id) => console.log('View findings:', id)}\n            />\n          </div>\n        </div>\n      </section>\n\n      <Separator />\n\n      {/* Feature Summary */}\n      <section>\n        <Card className=\"bg-gradient-to-r from-primary/5 to-primary/10 border-primary/20\">\n          <CardHeader className=\"text-center\">\n            <CardTitle className=\"text-2xl\">Complete Penetration Testing Platform</CardTitle>\n            <CardDescription className=\"text-base\">\n              Professional-grade components designed for security teams\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid md:grid-cols-3 gap-4 text-center\">\n              <div>\n                <div className=\"text-2xl font-bold text-primary mb-1\">8+</div>\n                <div className=\"text-sm text-muted-foreground\">Core Components</div>\n              </div>\n              <div>\n                <div className=\"text-2xl font-bold text-primary mb-1\">100%</div>\n                <div className=\"text-sm text-muted-foreground\">TypeScript Coverage</div>\n              </div>\n              <div>\n                <div className=\"text-2xl font-bold text-primary mb-1\">Dark</div>\n                <div className=\"text-sm text-muted-foreground\">Mode Support</div>\n              </div>\n            </div>\n            \n            <div className=\"mt-6 text-center\">\n              <Badge variant=\"outline\" className=\"mr-2\">React 18</Badge>\n              <Badge variant=\"outline\" className=\"mr-2\">TypeScript</Badge>\n              <Badge variant=\"outline\" className=\"mr-2\">Tailwind CSS</Badge>\n              <Badge variant=\"outline\" className=\"mr-2\">Shadcn/ui</Badge>\n              <Badge variant=\"outline\" className=\"mr-2\">TipTap Editor</Badge>\n              <Badge variant=\"outline\">CVSS v3.1</Badge>\n            </div>\n          </CardContent>\n        </Card>\n      </section>\n    </div>\n  );\n}","size_bytes":9232},"client/src/pages/Login.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { ThemeToggle } from \"@/components/ThemeToggle\";\nimport { Shield, Eye, EyeOff, Loader2 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useMutation } from \"@tanstack/react-query\";\n\ninterface LoginForm {\n  email: string;\n  password: string;\n}\n\nexport default function Login() {\n  const [formData, setFormData] = useState<LoginForm>({ email: \"\", password: \"\" });\n  const [showPassword, setShowPassword] = useState(false);\n  const { toast } = useToast();\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginForm) => {\n      const response = await apiRequest(\"POST\", \"/api/login\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Login Successful\",\n        description: \"Welcome to PenTest Pro!\",\n      });\n      // Invalidate auth queries to trigger re-fetch\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      // The app will automatically redirect due to useAuth hook\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Login Failed\",\n        description: error.message || \"Invalid email or password\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.email || !formData.password) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please enter both email and password\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    loginMutation.mutate(formData);\n  };\n\n  const handleInputChange = (field: keyof LoginForm) => (\n    e: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: e.target.value\n    }));\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-background to-muted/20\">\n      {/* Header */}\n      <header className=\"container mx-auto px-4 py-6\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <div className=\"flex h-8 w-8 items-center justify-center rounded-md bg-primary text-primary-foreground\">\n              <Shield className=\"h-4 w-4\" />\n            </div>\n            <span className=\"text-xl font-bold\">PenTest Pro</span>\n          </div>\n          <ThemeToggle />\n        </div>\n      </header>\n\n      {/* Login Form */}\n      <div className=\"flex items-center justify-center px-4 py-16\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader className=\"space-y-1\">\n            <div className=\"flex items-center justify-center mb-4\">\n              <div className=\"flex h-12 w-12 items-center justify-center rounded-full bg-primary text-primary-foreground\">\n                <Shield className=\"h-6 w-6\" />\n              </div>\n            </div>\n            <CardTitle className=\"text-2xl text-center\">Welcome Back</CardTitle>\n            <CardDescription className=\"text-center\">\n              Sign in to your PenTest Pro account\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Email</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"Enter your email\"\n                  value={formData.email}\n                  onChange={handleInputChange(\"email\")}\n                  disabled={loginMutation.isPending}\n                  data-testid=\"input-email\"\n                  autoComplete=\"email\"\n                  required\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\">Password</Label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"password\"\n                    type={showPassword ? \"text\" : \"password\"}\n                    placeholder=\"Enter your password\"\n                    value={formData.password}\n                    onChange={handleInputChange(\"password\")}\n                    disabled={loginMutation.isPending}\n                    data-testid=\"input-password\"\n                    autoComplete=\"current-password\"\n                    required\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                    onClick={() => setShowPassword(!showPassword)}\n                    disabled={loginMutation.isPending}\n                    data-testid=\"button-toggle-password\"\n                  >\n                    {showPassword ? (\n                      <EyeOff className=\"h-4 w-4\" />\n                    ) : (\n                      <Eye className=\"h-4 w-4\" />\n                    )}\n                    <span className=\"sr-only\">\n                      {showPassword ? \"Hide password\" : \"Show password\"}\n                    </span>\n                  </Button>\n                </div>\n              </div>\n\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={loginMutation.isPending}\n                data-testid=\"button-login\"\n              >\n                {loginMutation.isPending ? (\n                  <>\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                    Signing In...\n                  </>\n                ) : (\n                  \"Sign In\"\n                )}\n              </Button>\n            </form>\n\n            <div className=\"mt-6 text-center text-sm text-muted-foreground\">\n              <p>Only invited users can access this platform.</p>\n              <p className=\"mt-2\">Contact your administrator for access.</p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Footer */}\n      <footer className=\"container mx-auto px-4 py-8 border-t\">\n        <div className=\"flex flex-col md:flex-row items-center justify-between gap-4\">\n          <div className=\"flex items-center gap-2\">\n            <div className=\"flex h-6 w-6 items-center justify-center rounded bg-primary text-primary-foreground\">\n              <Shield className=\"h-3 w-3\" />\n            </div>\n            <span className=\"text-sm font-medium\">PenTest Pro</span>\n          </div>\n          <p className=\"text-sm text-muted-foreground\">\n            © 2024 PenTest Pro. All rights reserved.\n          </p>\n        </div>\n      </footer>\n    </div>\n  );\n}","size_bytes":6948},"client/src/components/RichTextEditor.tsx":{"content":"import { useEditor, EditorContent } from '@tiptap/react';\nimport StarterKit from '@tiptap/starter-kit';\nimport { Image } from '@tiptap/extension-image';\nimport { Link } from '@tiptap/extension-link';\nimport { Table } from '@tiptap/extension-table';\nimport { TableRow } from '@tiptap/extension-table-row';\nimport { TableCell } from '@tiptap/extension-table-cell';\nimport { TableHeader } from '@tiptap/extension-table-header';\nimport { Button } from '@/components/ui/button';\nimport { Separator } from '@/components/ui/separator';\nimport {\n  Bold,\n  Italic,\n  List,\n  ListOrdered,\n  Code,\n  Quote,\n  Undo,\n  Redo,\n  Link as LinkIcon,\n  Image as ImageIcon,\n  Table as TableIcon,\n} from 'lucide-react';\nimport { Toggle } from '@/components/ui/toggle';\nimport { cn } from '@/lib/utils';\n\ninterface RichTextEditorProps {\n  content?: string;\n  onChange?: (content: string) => void;\n  placeholder?: string;\n  className?: string;\n  disabled?: boolean;\n}\n\nexport function RichTextEditor({\n  content = '',\n  onChange,\n  placeholder = 'Start typing...',\n  className,\n  disabled,\n}: RichTextEditorProps) {\n  const editor = useEditor({\n    extensions: [\n      StarterKit.configure({\n        link: false, // Disable default link to avoid duplicate\n      }),\n      Image.configure({\n        HTMLAttributes: {\n          class: 'max-w-full h-auto rounded-md',\n        },\n      }),\n      Link.configure({\n        openOnClick: false,\n        HTMLAttributes: {\n          class: 'text-primary underline underline-offset-4',\n        },\n      }),\n      Table.configure({\n        resizable: true,\n      }),\n      TableRow,\n      TableHeader,\n      TableCell,\n    ],\n    content,\n    editable: !disabled,\n    onUpdate: ({ editor }) => {\n      onChange?.(editor.getHTML());\n    },\n  });\n\n  if (!editor) {\n    return null;\n  }\n\n  const addImage = () => {\n    const url = window.prompt('Enter image URL:');\n    if (url) {\n      editor.chain().focus().setImage({ src: url }).run();\n    }\n  };\n\n  const setLink = () => {\n    const previousUrl = editor.getAttributes('link').href;\n    const url = window.prompt('Enter URL:', previousUrl);\n\n    if (url === null) {\n      return;\n    }\n\n    if (url === '') {\n      editor.chain().focus().extendMarkRange('link').unsetLink().run();\n      return;\n    }\n\n    editor.chain().focus().extendMarkRange('link').setLink({ href: url }).run();\n  };\n\n  const addTable = () => {\n    editor\n      .chain()\n      .focus()\n      .insertTable({ rows: 3, cols: 3, withHeaderRow: true })\n      .run();\n  };\n\n  return (\n    <div className={cn('border rounded-md', className)} data-testid=\"rich-text-editor\">\n      {!disabled && (\n        <div className=\"border-b p-2 flex flex-wrap items-center gap-1\">\n          <Toggle\n            size=\"sm\"\n            pressed={editor.isActive('bold')}\n            onPressedChange={() => editor.chain().focus().toggleBold().run()}\n            data-testid=\"button-bold\"\n          >\n            <Bold className=\"h-4 w-4\" />\n          </Toggle>\n          <Toggle\n            size=\"sm\"\n            pressed={editor.isActive('italic')}\n            onPressedChange={() => editor.chain().focus().toggleItalic().run()}\n            data-testid=\"button-italic\"\n          >\n            <Italic className=\"h-4 w-4\" />\n          </Toggle>\n          <Toggle\n            size=\"sm\"\n            pressed={editor.isActive('code')}\n            onPressedChange={() => editor.chain().focus().toggleCode().run()}\n            data-testid=\"button-code\"\n          >\n            <Code className=\"h-4 w-4\" />\n          </Toggle>\n\n          <Separator orientation=\"vertical\" className=\"h-6\" />\n\n          <Toggle\n            size=\"sm\"\n            pressed={editor.isActive('bulletList')}\n            onPressedChange={() => editor.chain().focus().toggleBulletList().run()}\n            data-testid=\"button-bullet-list\"\n          >\n            <List className=\"h-4 w-4\" />\n          </Toggle>\n          <Toggle\n            size=\"sm\"\n            pressed={editor.isActive('orderedList')}\n            onPressedChange={() => editor.chain().focus().toggleOrderedList().run()}\n            data-testid=\"button-ordered-list\"\n          >\n            <ListOrdered className=\"h-4 w-4\" />\n          </Toggle>\n          <Toggle\n            size=\"sm\"\n            pressed={editor.isActive('blockquote')}\n            onPressedChange={() => editor.chain().focus().toggleBlockquote().run()}\n            data-testid=\"button-quote\"\n          >\n            <Quote className=\"h-4 w-4\" />\n          </Toggle>\n\n          <Separator orientation=\"vertical\" className=\"h-6\" />\n\n          <Button\n            type=\"button\"\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={setLink}\n            data-testid=\"button-link\"\n          >\n            <LinkIcon className=\"h-4 w-4\" />\n          </Button>\n          <Button\n            type=\"button\"\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={addImage}\n            data-testid=\"button-image\"\n          >\n            <ImageIcon className=\"h-4 w-4\" />\n          </Button>\n          <Button\n            type=\"button\"\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={addTable}\n            data-testid=\"button-table\"\n          >\n            <TableIcon className=\"h-4 w-4\" />\n          </Button>\n\n          <Separator orientation=\"vertical\" className=\"h-6\" />\n\n          <Button\n            type=\"button\"\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => editor.chain().focus().undo().run()}\n            disabled={!editor.can().undo()}\n            data-testid=\"button-undo\"\n          >\n            <Undo className=\"h-4 w-4\" />\n          </Button>\n          <Button\n            type=\"button\"\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => editor.chain().focus().redo().run()}\n            disabled={!editor.can().redo()}\n            data-testid=\"button-redo\"\n          >\n            <Redo className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      )}\n      <EditorContent\n        editor={editor}\n        className={cn(\n          'min-h-[200px] p-3 prose prose-sm dark:prose-invert max-w-none',\n          '[&_.ProseMirror]:outline-none [&_.ProseMirror]:min-h-[200px]',\n          disabled && 'opacity-60'\n        )}\n        data-testid=\"editor-content\"\n      />\n    </div>\n  );\n}","size_bytes":6313},"client/src/components/examples/FindingCard.tsx":{"content":"import { FindingCard } from '../FindingCard'\n\n// TODO: Remove mock data\nconst mockFinding = {\n  id: 'f-001',\n  title: 'SQL Injection in /api/v1/users endpoint',\n  severity: 'critical' as const,\n  status: 'submitted',\n  description: '<p>The user authentication endpoint is vulnerable to SQL injection attacks through the username parameter. An attacker can bypass authentication and gain unauthorized access to the application.</p>',\n  cvssScore: 9.8,\n  createdBy: {\n    id: 'u-001',\n    name: 'Sarah Chen',\n    avatar: undefined,\n  },\n  createdAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000), // 2 days ago\n  updatedAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000), // 1 day ago\n  commentsCount: 3,\n  evidenceCount: 5,\n  affectedAssets: ['api.example.com', 'app.example.com', 'admin.example.com'],\n}\n\nexport default function FindingCardExample() {\n  return (\n    <div className=\"max-w-md\">\n      <FindingCard\n        finding={mockFinding}\n        onView={(id) => console.log('Viewing finding:', id)}\n        onEdit={(id) => console.log('Editing finding:', id)}\n        onStatusChange={(id, status) => console.log('Status change:', id, status)}\n      />\n    </div>\n  )\n}","size_bytes":1174},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/examples/RichTextEditor.tsx":{"content":"import { useState } from 'react'\nimport { RichTextEditor } from '../RichTextEditor'\n\nexport default function RichTextEditorExample() {\n  const [content, setContent] = useState('<p>This is a <strong>rich text editor</strong> with support for:</p><ul><li>Bold and italic text</li><li>Links and images</li><li>Lists and quotes</li><li>Tables and code blocks</li></ul>')\n\n  return (\n    <div className=\"max-w-4xl space-y-4\">\n      <RichTextEditor\n        content={content}\n        onChange={setContent}\n        placeholder=\"Write your finding description...\"\n      />\n      <div className=\"text-sm text-muted-foreground\">\n        HTML Output: {content.substring(0, 100)}...\n      </div>\n    </div>\n  )\n}","size_bytes":699},"client/src/components/FileUpload.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Upload, X, Copy, File, Image as ImageIcon } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { cn } from \"@/lib/utils\";\n\ninterface UploadedFile {\n  id: string;\n  name: string;\n  size: number;\n  type: string;\n  url: string;\n  markdownSyntax: string;\n}\n\ninterface FileUploadProps {\n  onFilesChange?: (files: UploadedFile[]) => void;\n  accept?: string;\n  multiple?: boolean;\n  maxSize?: number; // in MB\n  className?: string;\n}\n\nexport function FileUpload({\n  onFilesChange,\n  accept = \".png,.jpg,.jpeg,.svg\",\n  multiple = true,\n  maxSize = 10,\n  className\n}: FileUploadProps) {\n  const [files, setFiles] = useState<UploadedFile[]>([]);\n  const [isDragging, setIsDragging] = useState(false);\n  const [uploading, setUploading] = useState(false);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { toast } = useToast();\n\n  const supportedTypes = ['image/png', 'image/jpeg', 'image/jpg', 'image/svg+xml'];\n\n  const handleFileSelect = async (selectedFiles: FileList | null) => {\n    if (!selectedFiles) return;\n\n    const validFiles: File[] = [];\n    \n    for (let i = 0; i < selectedFiles.length; i++) {\n      const file = selectedFiles[i];\n      \n      // Check file type\n      if (!supportedTypes.includes(file.type)) {\n        toast({\n          title: \"Invalid file type\",\n          description: `${file.name} is not a supported image format. Please use PNG, JPEG, or SVG.`,\n          variant: \"destructive\",\n        });\n        continue;\n      }\n      \n      // Check file size\n      if (file.size > maxSize * 1024 * 1024) {\n        toast({\n          title: \"File too large\",\n          description: `${file.name} is larger than ${maxSize}MB. Please choose a smaller file.`,\n          variant: \"destructive\",\n        });\n        continue;\n      }\n      \n      validFiles.push(file);\n    }\n\n    if (validFiles.length === 0) return;\n\n    setUploading(true);\n    \n    try {\n      const uploadedFiles: UploadedFile[] = [];\n      \n      for (const file of validFiles) {\n        // For now, create a local URL - in a real app this would upload to a server\n        const url = URL.createObjectURL(file);\n        const markdownSyntax = `![${file.name}](${url})`;\n        \n        const uploadedFile: UploadedFile = {\n          id: `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n          name: file.name,\n          size: file.size,\n          type: file.type,\n          url,\n          markdownSyntax\n        };\n        \n        uploadedFiles.push(uploadedFile);\n      }\n      \n      const newFiles = [...files, ...uploadedFiles];\n      setFiles(newFiles);\n      onFilesChange?.(newFiles);\n      \n      toast({\n        title: \"Files uploaded\",\n        description: `${validFiles.length} file(s) uploaded successfully.`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Upload failed\",\n        description: \"Failed to upload files. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragging(false);\n    handleFileSelect(e.dataTransfer.files);\n  };\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragging(true);\n  };\n\n  const handleDragLeave = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragging(false);\n  };\n\n  const removeFile = (fileId: string) => {\n    const newFiles = files.filter(f => f.id !== fileId);\n    setFiles(newFiles);\n    onFilesChange?.(newFiles);\n  };\n\n  const copyMarkdown = (markdownSyntax: string) => {\n    navigator.clipboard.writeText(markdownSyntax);\n    toast({\n      title: \"Copied to clipboard\",\n      description: \"Markdown syntax copied. You can paste it in any text field.\",\n    });\n  };\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  const getFileIcon = (type: string) => {\n    if (type.startsWith('image/')) {\n      return <ImageIcon className=\"h-4 w-4\" />;\n    }\n    return <File className=\"h-4 w-4\" />;\n  };\n\n  return (\n    <Card className={cn(\"w-full\", className)} data-testid=\"file-upload\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Upload className=\"h-5 w-5\" />\n          Proof of Concept Files\n        </CardTitle>\n        <p className=\"text-sm text-muted-foreground\">\n          Upload screenshots and images to support your findings. Supported formats: PNG, JPEG, SVG (max {maxSize}MB each)\n        </p>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {/* Upload Area */}\n        <div\n          className={cn(\n            \"border-2 border-dashed rounded-lg p-6 text-center transition-colors cursor-pointer\",\n            isDragging\n              ? \"border-primary bg-primary/5\"\n              : \"border-muted-foreground/25 hover:border-primary hover:bg-primary/5\",\n            uploading && \"opacity-50 pointer-events-none\"\n          )}\n          onDrop={handleDrop}\n          onDragOver={handleDragOver}\n          onDragLeave={handleDragLeave}\n          onClick={() => fileInputRef.current?.click()}\n          data-testid=\"upload-area\"\n        >\n          <Upload className=\"h-8 w-8 mx-auto mb-2 text-muted-foreground\" />\n          <p className=\"text-sm font-medium mb-1\">\n            {uploading ? \"Uploading...\" : \"Drop files here or click to upload\"}\n          </p>\n          <p className=\"text-xs text-muted-foreground\">\n            PNG, JPEG, SVG up to {maxSize}MB each\n          </p>\n        </div>\n\n        <Input\n          ref={fileInputRef}\n          type=\"file\"\n          accept={accept}\n          multiple={multiple}\n          onChange={(e) => handleFileSelect(e.target.files)}\n          className=\"hidden\"\n          data-testid=\"file-input\"\n        />\n\n        {/* Uploaded Files List */}\n        {files.length > 0 && (\n          <>\n            <Separator />\n            <div className=\"space-y-3\">\n              <Label className=\"text-sm font-medium\">Uploaded Files</Label>\n              {files.map((file) => (\n                <div\n                  key={file.id}\n                  className=\"flex items-center gap-3 p-3 bg-muted/30 rounded-lg\"\n                  data-testid={`uploaded-file-${file.id}`}\n                >\n                  {getFileIcon(file.type)}\n                  <div className=\"flex-1 min-w-0\">\n                    <p className=\"text-sm font-medium truncate\">{file.name}</p>\n                    <div className=\"flex items-center gap-2 text-xs text-muted-foreground\">\n                      <span>{formatFileSize(file.size)}</span>\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {file.type.split('/')[1].toUpperCase()}\n                      </Badge>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-1\">\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => copyMarkdown(file.markdownSyntax)}\n                      data-testid={`copy-markdown-${file.id}`}\n                    >\n                      <Copy className=\"h-4 w-4\" />\n                    </Button>\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => removeFile(file.id)}\n                      data-testid={`remove-file-${file.id}`}\n                    >\n                      <X className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </>\n        )}\n\n        {/* Usage Instructions */}\n        {files.length > 0 && (\n          <>\n            <Separator />\n            <div className=\"text-xs text-muted-foreground space-y-1\">\n              <p><strong>Usage:</strong></p>\n              <p>• Click the copy button to get markdown syntax for any uploaded image</p>\n              <p>• Paste the markdown syntax in description, steps, impact, or fix fields to display images inline</p>\n              <p>• Images without markdown syntax will be displayed in the \"Proof of Concept\" section</p>\n            </div>\n          </>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":8878},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n\n// Role-based access control middleware\nexport const hasPermission = (requiredPermission: string): RequestHandler => {\n  return async (req, res, next) => {\n    try {\n      const user = req.user as any;\n      \n      if (!req.isAuthenticated() || !user?.claims?.sub) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      const userId = user.claims.sub;\n      \n      // Check if user is super admin first (bypass all permissions)\n      const dbUser = await storage.getUser(userId);\n      if (dbUser?.role === 'super_admin') {\n        return next();\n      }\n      \n      // Get user permissions efficiently in one query\n      const userPermissions = await storage.getUserPermissions(userId);\n      \n      if (!userPermissions.has(requiredPermission)) {\n        return res.status(403).json({ \n          message: \"Access denied\", \n          requiredPermission \n        });\n      }\n      \n      next();\n    } catch (error) {\n      console.error(\"Error checking permissions:\", error);\n      res.status(500).json({ message: \"Error checking permissions\" });\n    }\n  };\n};\n\n// Check multiple permissions (user must have ALL of them)\nexport const hasAllPermissions = (requiredPermissions: string[]): RequestHandler => {\n  return async (req, res, next) => {\n    try {\n      const user = req.user as any;\n      \n      if (!req.isAuthenticated() || !user?.claims?.sub) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      const userId = user.claims.sub;\n      \n      // Check if user is super admin first (bypass all permissions)\n      const dbUser = await storage.getUser(userId);\n      if (dbUser?.role === 'super_admin') {\n        return next();\n      }\n      \n      // Get user permissions efficiently in one query\n      const userPermissions = await storage.getUserPermissions(userId);\n      \n      // Check if user has all required permissions\n      const missingPermissions = requiredPermissions.filter(p => !userPermissions.has(p));\n      \n      if (missingPermissions.length > 0) {\n        return res.status(403).json({ \n          message: \"Access denied\", \n          missingPermissions \n        });\n      }\n      \n      next();\n    } catch (error) {\n      console.error(\"Error checking permissions:\", error);\n      res.status(500).json({ message: \"Error checking permissions\" });\n    }\n  };\n};\n\n// Check if user has any of the provided permissions\nexport const hasAnyPermission = (allowedPermissions: string[]): RequestHandler => {\n  return async (req, res, next) => {\n    try {\n      const user = req.user as any;\n      \n      if (!req.isAuthenticated() || !user?.claims?.sub) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      const userId = user.claims.sub;\n      \n      // Check if user is super admin first (bypass all permissions)\n      const dbUser = await storage.getUser(userId);\n      if (dbUser?.role === 'super_admin') {\n        return next();\n      }\n      \n      // Get user permissions efficiently in one query\n      const userPermissions = await storage.getUserPermissions(userId);\n      \n      // Check if user has any of the allowed permissions\n      const hasAllowedPermission = allowedPermissions.some(p => userPermissions.has(p));\n      \n      if (!hasAllowedPermission) {\n        return res.status(403).json({ \n          message: \"Access denied\", \n          allowedPermissions \n        });\n      }\n      \n      next();\n    } catch (error) {\n      console.error(\"Error checking permissions:\", error);\n      res.status(500).json({ message: \"Error checking permissions\" });\n    }\n  };\n};\n\n// Super admin check - users with role 'super_admin'\nexport const isSuperAdmin: RequestHandler = async (req, res, next) => {\n  try {\n    const user = req.user as any;\n    \n    if (!req.isAuthenticated() || !user?.claims?.sub) {\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n\n    const userId = user.claims.sub;\n    const dbUser = await storage.getUser(userId);\n    \n    if (dbUser?.role !== 'super_admin') {\n      return res.status(403).json({ \n        message: \"Super admin access required\" \n      });\n    }\n    \n    next();\n  } catch (error) {\n    console.error(\"Error checking super admin status:\", error);\n    res.status(500).json({ message: \"Error checking admin status\" });\n  }\n};","size_bytes":8526},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/pages/Dashboard.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ProjectCard } from \"@/components/ProjectCard\";\nimport { FindingCard } from \"@/components/FindingCard\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport {\n  Plus,\n  AlertTriangle,\n  CheckCircle2,\n  Clock,\n  TrendingUp,\n  FolderOpen,\n  Bug,\n  Users,\n} from \"lucide-react\";\n\n// Interfaces for real data\ninterface Project {\n  id: string;\n  name: string;\n  customerName: string;\n  description: string;\n  status: string;\n  startDate: string;\n  expectedEndDate: string;\n  actualEndDate?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface Finding {\n  id: string;\n  title: string;\n  severity: string;\n  status: string;\n  description: string;\n  cvssScore?: number;\n  createdAt: string;\n  updatedAt: string;\n  projectId: string;\n}\n\nexport default function Dashboard() {\n  const { user } = useAuth();\n  \n  const userRole = user?.role || 'researcher';\n  const isResearcher = userRole === 'researcher';\n  const isCustomer = userRole === 'project_user' || userRole === 'customer_admin';\n\n  // Fetch real projects data\n  const { data: projects = [] } = useQuery({\n    queryKey: ['/api/projects'],\n    enabled: !!user\n  });\n\n  // Fetch real findings data\n  const { data: findings = [] } = useQuery({\n    queryKey: ['/api/findings'],\n    enabled: !!user\n  });\n\n  // Calculate real stats from API data\n  const stats = {\n    activeProjects: projects.filter((p: Project) => p.status === 'in_progress').length,\n    totalFindings: findings.length,\n    criticalFindings: findings.filter((f: Finding) => f.severity === 'critical').length,\n    resolvedFindings: findings.filter((f: Finding) => f.status === 'resolved' || f.status === 'closed').length,\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\" data-testid=\"dashboard\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Dashboard</h1>\n          <p className=\"text-muted-foreground\">\n            Welcome back{user?.firstName ? `, ${user.firstName}` : ''}. Here's your security overview.\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          {isResearcher && (\n            <Button data-testid=\"button-new-finding\">\n              <Plus className=\"h-4 w-4 mr-1\" />\n              New Finding\n            </Button>\n          )}\n          <Button variant=\"outline\" data-testid=\"button-new-project\">\n            <Plus className=\"h-4 w-4 mr-1\" />\n            New Project\n          </Button>\n        </div>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active Projects</CardTitle>\n            <FolderOpen className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats.activeProjects}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              <TrendingUp className=\"inline h-3 w-3 mr-1\" />\n              +2 from last month\n            </p>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Findings</CardTitle>\n            <Bug className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats.totalFindings}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              <TrendingUp className=\"inline h-3 w-3 mr-1\" />\n              +12 this week\n            </p>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Critical Findings</CardTitle>\n            <AlertTriangle className=\"h-4 w-4 text-red-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-red-600\">{stats.criticalFindings}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              <Clock className=\"inline h-3 w-3 mr-1\" />\n              Requires immediate attention\n            </p>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Resolved</CardTitle>\n            <CheckCircle2 className=\"h-4 w-4 text-green-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">{stats.resolvedFindings}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {stats.totalFindings > 0 ? Math.round((stats.resolvedFindings / stats.totalFindings) * 100) : 0}% completion rate\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Recent Projects */}\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"text-xl font-semibold\">Recent Projects</h2>\n            <Link href=\"/projects\">\n              <Button variant=\"ghost\" size=\"sm\">\n                View All\n              </Button>\n            </Link>\n          </div>\n          <div className=\"space-y-4\">\n            {projects.slice(0, 3).map((project: Project) => (\n              <ProjectCard\n                key={project.id}\n                project={{\n                  ...project,\n                  startDate: new Date(project.startDate),\n                  endDate: project.expectedEndDate ? new Date(project.expectedEndDate) : new Date(),\n                  findingStats: { total: 0, critical: 0, high: 0, medium: 0, low: 0, informational: 0 },\n                  teamSize: 1,\n                  progress: project.status === 'completed' ? 100 : project.status === 'in_progress' ? 50 : 0,\n                }}\n                onOpen={(id) => window.location.href = `/projects/${id}`}\n                onViewFindings={(id) => window.location.href = `/projects/${id}/findings`}\n              />\n            ))}\n            {projects.length === 0 && (\n              <div className=\"text-center text-muted-foreground py-8\">\n                No projects yet. Create your first project to get started.\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Recent Findings */}\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"text-xl font-semibold\">\n              {isResearcher ? 'My Recent Findings' : 'Recent Findings'}\n            </h2>\n            <Link href=\"/findings\">\n              <Button variant=\"ghost\" size=\"sm\">\n                View All\n              </Button>\n            </Link>\n          </div>\n          <div className=\"space-y-4\">\n            {findings.slice(0, 3).map((finding: Finding) => (\n              <FindingCard\n                key={finding.id}\n                finding={{\n                  ...finding,\n                  createdBy: { id: 'user', name: user?.firstName || 'User' },\n                  createdAt: new Date(finding.createdAt),\n                  updatedAt: new Date(finding.updatedAt),\n                  commentsCount: 0,\n                  evidenceCount: 0,\n                  affectedAssets: [],\n                }}\n                onView={(id) => window.location.href = `/findings/${id}`}\n                onEdit={(id) => window.location.href = `/findings/${id}/edit`}\n                onStatusChange={(id, status) => console.log('Status change:', id, status)}\n              />\n            ))}\n            {findings.length === 0 && (\n              <div className=\"text-center text-muted-foreground py-8\">\n                No findings yet. Start security testing to create findings.\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Quick Actions for Different Roles */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Quick Actions</CardTitle>\n          <CardDescription>\n            {isResearcher\n              ? 'Common tasks for security researchers'\n              : isCustomer\n              ? 'Manage your projects and findings'\n              : 'Administrative actions'}\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-wrap gap-2\">\n            {isResearcher && (\n              <>\n                <Button variant=\"outline\">\n                  <Bug className=\"h-4 w-4 mr-1\" />\n                  Create Finding\n                </Button>\n                <Button variant=\"outline\">\n                  <Clock className=\"h-4 w-4 mr-1\" />\n                  Submit Draft Findings\n                </Button>\n              </>\n            )}\n            {isCustomer && (\n              <>\n                <Button variant=\"outline\">\n                  <CheckCircle2 className=\"h-4 w-4 mr-1\" />\n                  Review Findings\n                </Button>\n                <Button variant=\"outline\">\n                  Export Report\n                </Button>\n              </>\n            )}\n            <Button variant=\"outline\">\n              View Analytics\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":9756},"client/src/components/examples/CVSSCalculator.tsx":{"content":"import { CVSSCalculator } from '../CVSSCalculator'\n\nexport default function CVSSCalculatorExample() {\n  return (\n    <div className=\"max-w-4xl\">\n      <CVSSCalculator \n        onChange={(vector, score, severity) => {\n          console.log('CVSS Update:', { vector, score, severity });\n        }}\n      />\n    </div>\n  )\n}","size_bytes":321},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"attached_assets/bugs_1759029521852.js":{"content":"'use strict';\n\n////////////////////////////////////////////////////////////////////////\n// Required modules\n////////////////////////////////////////////////////////////////////////\nvar async = require('async');\nvar _ = require('lodash');\nvar crypto = require('crypto');\nvar Handlebars = require('handlebars');\nvar request = require('request');\nvar rp = require('request-promise');\nvar pdf = require('html-pdf');\nvar xss = require('xss');\nvar fs = require('fs');\nvar utility = require('./utility');\n// var array = require('node-array');\n//----------------------- export the module ---------------\nvar authorization = require('./authorization');\nvar commonFun = require('./commonfunction');\nvar responses = require('./response');\nvar dbHandler = require('./databaseHandler').dbHandler;\nvar logging = require('./logging');\nvar constants = require('./constants');\nvar programs = require('./programs');\nvar hackers = require('./hacker');\nvar mailer = require('./mailer');\nvar mailgun = require('mailgun-js');\n\nHandlebars.registerHelper('ifEquals', function(arg1, arg2, options) {\n  return (arg1 === arg2) ? options.fn(this) : options.inverse(this);\n});\n\nconst JiraIssueTemplate = Handlebars.compile(\"{ \\\"fields\\\": { \\\"issuetype\\\": { \\\"id\\\": \\\"10005\\\" }, \\\"project\\\": { \\\"key\\\": \\\"\\\" }, \\\"description\\\": { \\\"version\\\": 1, \\\"type\\\": \\\"doc\\\", \\\"content\\\": [ { \\\"type\\\": \\\"paragraph\\\", \\\"content\\\": [ { \\\"type\\\": \\\"text\\\", \\\"text\\\": \\\"CVSS Score: {{{bug.cvss_score}}}\\\" }, { \\\"type\\\": \\\"hardBreak\\\" }, { \\\"type\\\": \\\"text\\\", \\\"text\\\": \\\"CVSS vector: {{{bug.cvss_vector}}}\\\" } ] }, { \\\"type\\\": \\\"paragraph\\\", \\\"content\\\": [ { \\\"type\\\": \\\"text\\\", \\\"text\\\": \\\"Description:\\\", \\\"marks\\\": [ { \\\"type\\\": \\\"strong\\\" } ] } ] }, { \\\"type\\\": \\\"paragraph\\\", \\\"content\\\": [ { \\\"type\\\": \\\"text\\\", \\\"text\\\": \\\"{{{bug.bug_description}}}\\\" } ] }, { \\\"type\\\": \\\"paragraph\\\", \\\"content\\\": [ { \\\"type\\\": \\\"text\\\", \\\"text\\\": \\\"HTTP Request:\\\", \\\"marks\\\": [ { \\\"type\\\": \\\"strong\\\" } ] } ] }, { \\\"type\\\": \\\"paragraph\\\", \\\"content\\\": [ { \\\"type\\\": \\\"text\\\", \\\"text\\\": \\\"{{{bug.http_request}}}\\\" } ] }, { \\\"type\\\": \\\"paragraph\\\", \\\"content\\\": [ { \\\"type\\\": \\\"text\\\", \\\"text\\\": \\\"Steps to Reproduce:\\\", \\\"marks\\\": [ { \\\"type\\\": \\\"strong\\\" } ] } ] } {{#bug.steps_to_reproduce}} {{#ifEquals type \\\"text\\\"}} ,{ \\\"type\\\": \\\"paragraph\\\", \\\"content\\\": [ { \\\"type\\\": \\\"text\\\", \\\"text\\\": \\\"{{{data}}}\\\" } ] }{{/ifEquals}} {{#ifEquals type \\\"image\\\"}} ,{ \\\"type\\\": \\\"paragraph\\\", \\\"content\\\": [ { \\\"type\\\": \\\"text\\\", \\\"text\\\": \\\"{{{data}}}\\\", \\\"marks\\\": [ { \\\"type\\\": \\\"link\\\", \\\"attrs\\\": { \\\"href\\\": \\\"{{{data}}}\\\" } } ] } ] }{{/ifEquals}} {{/bug.steps_to_reproduce}} , { \\\"type\\\": \\\"paragraph\\\", \\\"content\\\": [ { \\\"type\\\": \\\"text\\\", \\\"text\\\": \\\"Fix Recommendation:\\\", \\\"marks\\\": [ { \\\"type\\\": \\\"strong\\\" } ] }, { \\\"type\\\": \\\"hardBreak\\\" }, { \\\"type\\\": \\\"text\\\", \\\"text\\\": \\\"{{{bug.suggested_fix}}}\\\" } ] }, { \\\"type\\\": \\\"paragraph\\\", \\\"content\\\": [ { \\\"type\\\": \\\"text\\\", \\\"text\\\": \\\"Impact\\\", \\\"marks\\\": [ { \\\"type\\\": \\\"strong\\\" } ] }, { \\\"type\\\": \\\"hardBreak\\\" }, { \\\"type\\\": \\\"text\\\", \\\"text\\\": \\\"{{{bug.bug_impact}}}\\\" } ] } ] }, \\\"summary\\\": \\\"{{{bug.bug_caption}}}\\\" } }\");\nconst ReportTemplate = Handlebars.compile(\n  `<!DOCTYPE html>\n  <html lang=\"en\">\n  \n  <head>\n      <meta charset=\"UTF-8\" />\n      <link href=\"https://cdn.jsdelivr.net/npm/tailwindcss@4.0.17/index.min.css\" rel=\"stylesheet\" />\n      <style>\n      html {\n          font-size: 14px;\n          word-wrap: break-word;\n      }\n  \n      body {\n          font-family: 'Arial';\n          line-height: 1.6;  \n      }\n  \n      pre {\n          font-family: 'Arial';\n          overflow-x: auto;\n          white-space: pre-wrap;\n          white-space: -moz-pre-wrap;\n          white-space: -pre-wrap;\n          white-space: -o-pre-wrap;\n          word-wrap: break-word;\n          line-height: 1.6;\n  \n      }\n  \n      .footer-text {\n          font-size: 10px;\n          color: #666;\n          display: inline-block;\n      }\n  \n      .footer-link {\n          font-size: 11px;\n          color: #4299e1;\n          font-weight: 500;\n          display: inline-block;\n      }\n  \n      .footer-image {\n          width: 70px;\n          opacity: 0.3;\n      }\n  \n      .page {\n          position: relative;\n          /* Comment out this section to view in browser == Section Start ==*/\n          /* min-height: 90mm; width: 50mm; */\n          /*== Section End ==*/\n          display: block;\n          page-break-after: auto;\n          margin: 15mm;\n          margin-bottom: 10mm;\n          overflow: hidden;\n      }\n  \n      .flex {\n          display: -webkit-box;\n          display: -webkit-flex;\n          display: flex;\n      }\n  \n      .justify-start {\n          -webkit-box-pack: start;\n          -webkit-justify-content: flex-start;\n          justify-content: flex-start;\n      }\n  \n      .justify-end {\n          -webkit-box-pack: end;\n          -webkit-justify-content: flex-end;\n          justify-content: flex-end;\n      }\n  \n      .justify-center {\n          -webkit-box-pack: center;\n          -webkit-justify-content: center;\n          justify-content: center;\n      }\n  \n      .justify-between {\n          -webkit-box-pack: justify;\n          -webkit-justify-content: space-between;\n          justify-content: space-between;\n      }\n  \n      .justify-around {\n          -webkit-justify-content: space-around;\n          justify-content: space-around;\n      }\n  \n      .justify-evenly {\n          -webkit-box-pack: space-evenly;\n          -webkit-justify-content: space-evenly;\n          justify-content: space-evenly;\n      }\n  \n      .items-start {\n          -webkit-box-align: start;\n          -webkit-align-items: flex-start;\n          align-items: flex-start;\n      }\n  \n      .items-end {\n          -webkit-box-align: end;\n          -webkit-align-items: flex-end;\n          align-items: flex-end;\n      }\n  \n      .items-center {\n          -webkit-box-align: center;\n          -webkit-align-items: center;\n          align-items: center;\n      }\n      .critical {\n        color: #CC0500;\n      }\n      .high{\n        color: #DF3D03;\n      }\n      .medium {\n        color: #F9A009;\n      }\n      .low {\n        color: #ffcb0d;\n      }\n      .none{\n        color: #53aa33;\n      }\n  \n      .border-critical {\n        border-color: #CC0500;\n      }\n      .border-high{\n        border-color: #DF3D03;\n      }\n      .border-medium {\n        border-color: #F9A009;\n      }\n      .border-low {\n        border-color: #ffcb0d;\n      }\n      .border-none{\n        border-color: #53aa33;\n      }\n  \n      @media print {\n          .page {\n              margin: 0;\n              min-height: 100%;\n              width: 100%;\n          }\n      }\n      </style>\n      <title>Document</title>\n  </head> <!-- 1. To start a new page, use a div with .page class 2.  To end the page and start next section from a new page, add <div style=\"page-break-after: always;\"></div> at the end of the .page div 3. To start a fresh page after ending, add another div with .page class -->\n  \n  <body>\n      <!-- Cover Page -->\n      <div class=\"page\">\n          <div class=\"w-full mt-8 flex items-center\">\n              <div class=\"flex items-center\" style=\"width: 160px;\">\n\n\n\n\n    <!-- Logo here: Needs to be uploded to server and stick url here --> <a href=\"https://appsecure.security\"><img style=\"width: 150px;\" src=\"http://127.0.0.1:1234/appsecure_logo.png\" /></a> </div>\n\n              <div class=\"w-full ml-4 items-center\">\n                  <p class=\"text-xl text-gray-900 font-medium\">{{{report_title}}}</p>\n              </div>\n          </div>\n          <div class=\"mt-16 leading-6 text-xs text-gray-700\">\n              <!-- URLs here --> {{#test_scope}} <p>{{.}}</p> {{/test_scope}} </div>\n          <div class=\"w-full border border-b border-grey-200 mt-6\"></div>\n          <div>\n              <div class=\"flex my-4 text-gray-700 text-xs\">\n                  <div class=\"w-1/2\">\n                      <h6 class=\"font-semibold text-gray-700\">REPORT PUBLISH DATE</h6>\n                  </div>\n                  <div class=\"w-1/2\">\n                      <p class=\"font-semibold text-gray-700\">{{{test_time}}}</p>\n                  </div>\n              </div>\n          </div> {{#testers_exist}} <div class=\"w-full border border-b border-grey-200 mb-8\"></div>\n          <div class=\"w-full text-xs text-gray-700\">\n              <p class=\"font-semibold mb-3 text-gray-800\">TEST PERFORMED BY</p> {{#testers}} <div class=\"flex justify-between my-2\">\n                  <p class=\"font-medium text-blue-500\">{{name}}</p>\n                  <p class=\"border border-grey-600 rounded px-1\">{{role}}</p>\n              </div> {{/testers}}\n          </div> {{/testers_exist}} <div style=\"page-break-after: always;\"></div>\n      </div> <!-- Contents -->\n      <div class=\"page\">\n          <h1 class=\"text-lg font-medium text-gray-900\">Contents</h1>\n          <div class=\"w-full border border-b border-grey-200 my-2\"></div>\n          <div class=\"text-xs text-gray-700\">\n              <div class=\"flex justify-between my-2\">\n                  <p>Executive Summary</p>\n                  <p>3</p>\n              </div>\n              <div class=\"flex justify-between my-2\">\n                  <p>Security Checklist</p>\n                  <p>4</p>\n              </div>\n              <div class=\"flex justify-between my-2\">\n                  <p>Scope of Work</p>\n                  <p>7</p>\n              </div>\n              <div class=\"flex justify-between my-2\">\n                  <p>Methodology</p>\n                  <p>9</p>\n              </div>\n              <div class=\"pl-4\">\n                  <div class=\"flex justify-between my-2\">\n                      <p>Pre Engagement</p>\n                      <p>9</p>\n                  </div>\n                  <div class=\"flex justify-between my-2\">\n                      <p>Penetration Testing</p>\n                      <p>9</p>\n                  </div>\n                  <div class=\"flex justify-between my-2\">\n                      <p>Post Engagement | 30 days time after Reporting (Reverification)</p>\n                      <p>9</p>\n                  </div>\n                  <div class=\"flex justify-between my-2\">\n                      <p>Severity Ratings</p>\n                      <p>10</p>\n                  </div>\n                  <div class=\"flex justify-between my-2\">\n                      <p>Severity Rating Scale</p>\n                      <p>10</p>\n                  </div>\n              </div>\n              <div class=\"flex justify-between my-2\">\n                  <p>Vulnerabilities Summary</p>\n                  <p>11</p>\n              </div>\n              <div class=\"flex justify-between my-2\">\n                  <p>Appendix A - Vulnerability Summary & Recommendations</p>\n                  <p>12</p>\n              </div>\n          </div>\n          <div style=\"page-break-after: always;\"></div>\n      </div> <!-- Executive Summary Page -->\n      <div class=\"page text-gray-700 text-sm font-light\">\n          <h1 class=\"text-lg font-medium text-gray-900\">Executive Summary</h1>\n          <div class=\"w-full border border-b border-grey-200 my-2\"></div>\n          <p class=\"pt-2\" style=\"word-wrap: break-word;\">\n              <pre>{{{executive_summary}}}</pre>\n          </p>\n          <div style=\"page-break-after: always;\"></div>\n      </div><!-- Security Checkist Page -->\n      <div class=\"page text-gray-700 text-sm font-light \">\n          <h1 class=\"text-lg font-medium text-gray-900\">Security Checklist</h1>\n          <div class=\"w-full border border-b border-grey-200 my-2\"></div>\n              <table class=\"table-auto border mb-8 text-xs\" style=\"border-radius:10px\" width=\"100%\" >\n                  <thead>\n                    <tr>\n                      <th class=\"px-4 py-2 border text-left text-black\" colspan=\"2\" style=\"background-color: #dde7ea;\">1. Identity Management Testing</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <tr>\n                      <td class=\"border px-4 py-2\" width=\"50%\">1.1 Test Role Definitions</td>\n                      <td class=\"border px-4 py-2\">1.2 Test User Registration Process</td>\n                    </tr>\n                    <tr>\n                      <td class=\"border px-4 py-2\">1.3 Test Account Provisioning Process</td>\n                      <td class=\"border px-4 py-2\">1.4 Testing for Account Enumeration and Guessable User Account</td>\n                    </tr>\n                    <tr>\n                      <td class=\"border px-4 py-2\">1.5 Testing for Weak or Unenforced Username Policy</td>\n                      <td class=\"border px-4 py-2\"></td>\n                    </tr>\n                  </tbody>\n              </table>\n  \n                <table class=\"table-auto border mb-8 text-xs\" style=\"border-radius:10px\" width=\"100%\" >\n                  <thead>\n                    <tr>\n                      <th class=\"px-4 py-2 border text-left text-black\" colspan=\"2\" style=\"background-color: #dde7ea;\">2. Authentication Testing</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <tr>\n                      <td class=\"border px-4 py-2\" width=\"50%\">2.1 Testing for Credentials Transported over an Encrypted Channel</td>\n                      <td class=\"border px-4 py-2\">2.2 Testing for Default Credentials</td>\n                    </tr>\n                    <tr>\n                      <td class=\"border px-4 py-2\">2.3 Testing for Weak Lock Out Mechanism</td>\n                      <td class=\"border px-4 py-2\">2.4 Testing for Bypassing Authentication Schema</td>\n                    </tr>\n                    <tr>\n                      <td class=\"border px-4 py-2\">2.5 Testing for Vulnerable Remember Password</td>\n                      <td class=\"border px-4 py-2\">2.6 Testing for Browser Cache Weaknesses</td>\n                    </tr>\n                    <tr>\n                      <td class=\"border px-4 py-2\">2.7 Testing for Weak Password Policy</td>\n                      <td class=\"border px-4 py-2\">2.8 Testing for Weak Security Question Answer</td>\n                    </tr>\n                    <tr>\n                      <td class=\"border px-4 py-2\">2.9 Testing for Weak Password Change or Reset Functionalities</td>\n                      <td class=\"border px-4 py-2\">2.10 Testing for Weaker Authentication in Alternative Channel</td>\n                    </tr>\n                  </tbody>\n                </table>\n  \n                <table class=\"table-auto border mb-8 text-xs\" style=\"border-radius:10px\" width=\"100%\" >\n                  <thead>\n                    <tr>\n                      <th class=\"px-4 py-2 border text-left text-black\" colspan=\"2\" style=\"background-color: #dde7ea;\">3. Authorization Testing</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <tr>\n                      <td class=\"border px-4 py-2\" width=\"50%\">3.1 Testing Directory Traversal File Include</td>\n                      <td class=\"border px-4 py-2\">3.2 Testing for Bypassing Authorization Schema</td>\n                    </tr>\n                    <tr>\n                      <td class=\"border px-4 py-2\">3.3 Testing for Privilege Escalation</td>\n                      <td class=\"border px-4 py-2\">3.4 Testing for Insecure Direct Object References</td>\n                    </tr>\n                  </tbody>\n                </table>\n  \n                <table class=\"table-auto border mb-8 text-xs\" style=\"border-radius:10px;page-break-inside: avoid;\" width=\"100%\" > \n                  <thead>\n                    <tr>\n                      <th class=\"px-4 py-2 border text-left text-black\" colspan=\"2\" style=\"background-color: #dde7ea;\">4. Session Management Testing</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <tr>\n                      <td class=\"border px-4 py-2\" width=\"50%\">4.1 Testing for Session Management Schema</td>\n                      <td class=\"border px-4 py-2\">4.2 Testing for Cookies Attributes</td>\n                    </tr>\n                    <tr>\n                      <td class=\"border px-4 py-2\">4.3 Testing for Session Fixation</td>\n                      <td class=\"border px-4 py-2\">4.4 Testing for Exposed Session Variables</td>\n                    </tr>\n                    <tr>\n                      <td class=\"border px-4 py-2\">4.5 Testing for Cross Site Request Forgery</td>\n                      <td class=\"border px-4 py-2\">4.6 Testing for Logout Functionality</td>\n                    </tr>\n                    <tr>\n                      <td class=\"border px-4 py-2\">4.7 Testing Session Timeout</td>\n                      <td class=\"border px-4 py-2\">4.8 Testing for Session Puzzling</td>\n                    </tr>\n                  </tbody>\n                </table>\n  \n                <table class=\"table-auto border mb-8 text-xs\" style=\"border-radius:10px\" width=\"100%\" >\n                  <thead>\n                    <tr>\n                      <th class=\"px-4 py-2 border text-left text-black\" colspan=\"2\" style=\"background-color: #dde7ea;\">5. Input Validation Testing</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <tr>\n                      <td class=\"border px-4 py-2\" width=\"50%\">5.1 Testing for Reflected Cross Site Scripting</td>\n                      <td class=\"border px-4 py-2\">5.2 Testing for Stored Cross Site Scripting</td>\n                    </tr>\n                    <tr>\n                      <td class=\"border px-4 py-2\">5.3 Testing for HTTP Verb Tampering</td>\n                      <td class=\"border px-4 py-2\">5.4 Testing for HTTP Parameter Pollution</td>\n                    </tr>\n                    <tr>\n                      <td class=\"border px-4 py-2\">5.5 Testing for SQL Injection</td>\n                      <td class=\"border px-4 py-2\">5.6 Testing for LDAP Injection</td>\n                    </tr>\n                    <tr>\n                      <td class=\"border px-4 py-2\">5.7 Testing for XML Injection</td>\n                      <td class=\"border px-4 py-2\">5.8 Testing for SSI Injection</td>\n                    </tr>\n                    <tr>\n                      <td class=\"border px-4 py-2\" width=\"50%\">5.9 Testing for XPath Injection</td>\n                      <td class=\"border px-4 py-2\">5.10 Testing for IMAP SMTP Injection</td>\n                    </tr>\n                    <tr>\n                      <td class=\"border px-4 py-2\">5.11 Testing for Code Injection</td>\n                      <td class=\"border px-4 py-2\">5.12 Testing for Command Injection</td>\n                    </tr>\n                    <tr>\n                      <td class=\"border px-4 py-2\">5.13 Testing for Buffer Overflow</td>\n                      <td class=\"border px-4 py-2\">5.14 Testing for Incubated Vulnerability</td>\n                    </tr>\n                    <tr>\n                      <td class=\"border px-4 py-2\">5.15 Testing for HTTP Splitting Smuggling</td>\n                      <td class=\"border px-4 py-2\">5.16 Testing for HTTP Incoming Requests</td>\n                    </tr>\n                    <tr>\n                      <td class=\"border px-4 py-2\">5.17 Testing for Host Header Injection</td>\n                      <td class=\"border px-4 py-2\">5.18 Testing for Server Side Template Injection</td>\n                    </tr>\n                  </tbody>\n                </table>\n  \n                <table class=\"table-auto border mb-8 text-xs\" style=\"border-radius:10px\" width=\"100%\" >\n                  <thead>\n                    <tr>\n                      <th class=\"px-4 py-2 border text-left text-black\" colspan=\"2\" style=\"background-color: #dde7ea;\">6. Testing for Error Handling</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <tr>\n                      <td class=\"border px-4 py-2\" width=\"50%\">6.1 Testing for Error Code</td>\n                      <td class=\"border px-4 py-2\">6.2 Testing for Stack Traces</td>\n                    </tr>\n                  </tbody>\n                </table>\n  \n                <table class=\"table-auto border mb-8 text-xs\" style=\"border-radius:10px;page-break-inside: avoid;\" width=\"100%\" >\n                  <thead>\n                    <tr>\n                      <th class=\"px-4 py-2 border text-left text-black\" colspan=\"2\" style=\"background-color: #dde7ea;\">7. Testing for Weak Cryptography</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <tr>\n                      <td class=\"border px-4 py-2\" width=\"50%\">7.1 Testing for Weak SSL TLS Ciphers Insufficient Transport Layer Protection</td>\n                      <td class=\"border px-4 py-2\">7.2 Testing for Padding Oracle</td>\n                    </tr>\n                    <tr>\n                      <td class=\"border px-4 py-2\">7.3 Testing for Sensitive Information Sent via Unencrypted Channels</td>\n                      <td class=\"border px-4 py-2\">7.4 Testing for Weak Encryption</td>\n                    </tr>\n                  </tbody>\n                </table>\n  \n                <table class=\"table-auto border mb-8 text-xs\" style=\"border-radius:10px\" width=\"100%\" > \n                  <thead>\n                    <tr>\n                      <th class=\"px-4 py-2 border text-left text-black\" colspan=\"2\" style=\"background-color: #dde7ea;\">8. Business Logic Testing</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <tr>\n                      <td class=\"border px-4 py-2\" width=\"50%\">8.1 Introduction to Business Logic</td>\n                      <td class=\"border px-4 py-2\">8.2 Test Business Logic Data Validation</td>\n                    </tr>\n                    <tr>\n                      <td class=\"border px-4 py-2\">8.3 Test Ability to Forge Requests</td>\n                      <td class=\"border px-4 py-2\">8.4 Test Integrity Checks</td>\n                    </tr>\n                    <tr>\n                      <td class=\"border px-4 py-2\">8.5 Test for Process Timing</td>\n                      <td class=\"border px-4 py-2\">8.6 Test Number of Times a Function Can Be Used Limits</td>\n                    </tr>\n                    <tr>\n                      <td class=\"border px-4 py-2\">8.7 Testing for the Circumvention of Work Flows</td>\n                      <td class=\"border px-4 py-2\">8.8 Test Defenses Against Application Misuse</td>\n                    </tr>\n                    <tr>\n                      <td class=\"border px-4 py-2\">8.9 Test Upload of Unexpected File Types</td>\n                      <td class=\"border px-4 py-2\">8.10 Test Upload of Malicious Files</td>\n                    </tr>\n                  </tbody>\n                </table>\n  \n                <table class=\"table-auto border mb-8 text-xs\" style=\"border-radius:10px\" width=\"100%\" > \n                  <thead>\n                    <tr>\n                      <th class=\"px-4 py-2 border text-left text-black\" colspan=\"2\" style=\"background-color: #dde7ea;\">9. Client Side Testing</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <tr>\n                      <td class=\"border px-4 py-2\" width=\"50%\">9.1 Testing for DOM Based Cross Site Scripting</td>\n                      <td class=\"border px-4 py-2\">9.2 Testing for JavaScript Execution</td>\n                    </tr>\n                    <tr>\n                      <td class=\"border px-4 py-2\">9.3 Testing for HTML Injection</td>\n                      <td class=\"border px-4 py-2\">9.4 Testing for Client Side URL Redirect</td>\n                    </tr>\n                    <tr>\n                      <td class=\"border px-4 py-2\">9.5 Testing for CSS Injection</td>\n                      <td class=\"border px-4 py-2\">9.6 Testing for Client Side Resource Manipulation</td>\n                    </tr>\n                    <tr>\n                      <td class=\"border px-4 py-2\">9.7 Testing Cross Origin Resource Sharing</td>\n                      <td class=\"border px-4 py-2\">9.8 Testing for Cross Site Flashing</td>\n                    </tr>\n                    <tr>\n                      <td class=\"border px-4 py-2\">9.9 Testing for Clickjacking</td>\n                      <td class=\"border px-4 py-2\">9.10 Testing WebSockets</td>\n                    </tr>\n                    <tr>\n                      <td class=\"border px-4 py-2\">9.11 Testing Web Messaging</td>\n                      <td class=\"border px-4 py-2\">9.12 Testing Browser Storage</td>\n                    </tr>\n                    <tr>\n                      <td class=\"border px-4 py-2\">9.13 Testing for Cross Site Script Inclusion</td>\n                      <td class=\"border px-4 py-2\"></td>\n                    </tr>\n                  </tbody>\n                </table>\n  \n          <div style=\"page-break-after: always;\"></div>\n      </div> \n      <!-- Scope of Work Page 1 -->\n      <div class=\"page text-gray-700 text-sm font-light\">\n          <h1 class=\"text-lg font-medium text-gray-900\">Scope of Work</h1>\n          <div class=\"w-full border border-b border-grey-200 my-2\"></div>\n          <h1 class=\"text-base font-medium text-gray-800 py-4\">Coverage</h1>\n          <p> This penetration test was a manual assessment of the security of the app’s functionality, business logic, and vulnerabilities such as those cataloged in the OWASP Top 10. The assessment also included a review of security controls and requirements listed in the OWASP Application Security Verification Standard (ASVS). The researchers rely on tools to facilitate their work, but the majority of the assessment involves manual analysis. </p> <br />\n          <p> The following is a quick summary of the main tests performed on the {{{coverage_asset_type}}}: </p>\n          <li class=\"my-1\"> Authenticated user testing for session and authentication issues </li>\n          <li class=\"my-1\"> Authorization testing for privilege escalation and access control issues </li>\n          <li class=\"my-1\"> Input injection tests (SQL injection, XSS, and others) </li>\n          <li class=\"my-1\">Platform configuration and infrastructure tests</li>\n          <li class=\"my-1\">OWASP Top 10 Assessment</li>\n          <p> The team had access to authenticated users, enabling them to test security controls across roles and permissions.</p>\n          <div style=\"page-break-after: always;\"></div>\n      </div> <!--  Scop of Work Page 2 -->\n      <div class=\"page text-gray-700 text-sm font-light\">\n          <h1 class=\"text-base font-medium text-gray-800 py-4\"> Target description </h1>\n          <p class=\"mb-3\"> The following URLs/apps were in scope for this assessment: </p> {{#test_scope}} <li class=\"my-2\">{{.}}</li> {{/test_scope}} <h1 class=\"text-base font-medium text-gray-800 py-4\"> Assumptions/Constraints </h1>\n          <p style=\"word-wrap: break-word;\">\n              <pre>{{{assumptions}}}</pre>\n          </p>\n          <div style=\"page-break-after: always;\"></div>\n      </div> <!-- Methodology Page 2 -->\n      <div class=\"page text-gray-700 text-sm font-light\">\n          <h1 class=\"text-lg font-medium text-gray-900\">Methodology</h1>\n          <div class=\"w-full border border-b border-grey-200 my-2\"></div>\n          <p> The test was done according to penetration testing best practices. The flow from start to finish is listed below. </p>\n          <div class=\"my-4 pl-3\">\n              <p class=\"font-medium text-gray-800\">Pre Engagement</p>\n              <div class=\"pl-4 text-xs\">\n                  <li class=\"my-2\">Scoping</li>\n                  <li class=\"my-2\">Discovery</li>\n              </div>\n          </div>\n          <div class=\"my-4 pl-3\">\n              <p class=\"font-medium text-gray-800\">Penetration Testing</p>\n              <div class=\"pl-4 text-xs\">\n                  <li class=\"my-2\">Tool assisted assessment</li>\n                  <li class=\"my-2\"> Manual assessment of OWASP top 10/SANS top 25 & business logic flaws </li>\n                  <li class=\"my-2\">Exploitation</li>\n                  <li class=\"my-2\">Risk analysis</li>\n                  <li class=\"my-2\">Reporting</li>\n              </div>\n          </div>\n          <div class=\"my-4 pl-3\">\n              <p class=\"font-medium text-gray-800\">Post Engagement</p>\n              <div class=\"pl-4 text-xs\">\n                  <li class=\"my-2\">Best practice support</li>\n                  <li class=\"my-2\">Re-testing</li>\n              </div>\n          </div>\n          <div style=\"page-break-after: always;\"></div>\n      </div> <!-- Methodology Page 2 -->\n      <div class=\"page text-gray-700 text-sm font-light\">\n          <h2 class=\"text-base text-gray-800 font-medium mb-1\">Severity Ratings</h2>\n          <p class=\"pb-5\"> The Common Vulnerability Scoring System (CVSS) v3.0 is a framework for rating the severity of security vulnerabilities in software. Operated by the Forum of Incident Response and Security Teams (FIRST), the CVSS uses an algorithm to determine three severity rating scores: Base, Temporal and Environmental. The scores are numeric; they range from 0.0 through 10.0 with 10.0 being the most severe. </p>\n          <p class=\"pb-5\"> CVSS is composed of three metric groups, Base, Temporal, and Environmental, each consisting of a set of metrics, as shown in below figure. </p>\n          <div class=\"flex justify-center\">\n            <img style=\"width: 450px;\" src=\"http://127.0.0.1:1234/severity1.png\" />\n          </div>\n\n      </div> <!-- Methodology Page 3 -->\n      <div class=\"page text-gray-700 text-sm font-light\">\n          <br/><br/>\n          <h2 class=\"text-base text-gray-800 font-medium mb-1\"> Severity Rating Scale </h2>\n\n          <p class=\"pb-5\"> Findings are grouped into four criticality levels based on their risk.</p>\n          <div class=\"flex justify-center\">\n            <img style=\"width: 450px;\" src=\"http://127.0.0.1:1234/severity2.png\" />\n          </div>\n          <div style=\"page-break-after: always;\"></div>\n      </div>\n      <div class=\"page text-gray-700 text-sm font-light\">\n          <h1 class=\"text-lg font-medium text-gray-900\">Vulnerabilities Summary</h1>\n          <div class=\"table w-full\">\n              <div class=\"table-row-group\">\n                  <div class=\"table-row text-xs\" style=\"background-color: #dde7ea;\">\n                      <div class=\"table-cell text-gray-800 px-2 pl-4 py-4\"> S.NO. </div>\n                      <div class=\"table-cell text-gray-800 px-2 pl-4 py-4\"> VULNERABILITY TITLE </div>\n                      <div class=\"table-cell text-gray-800 px-2 py-5 text-center\"> IMPACT </div>\n                      <div class=\"table-cell text-gray-800 px-2 py-5 text-center\"> STATE </div>\n\t\t <!-- <div class=\"table-cell text-gray-800 px-2 py-5 text-center\"> RELATED TO PII </div> -->\n\t\t      \n                  </div> <!-- Snippet to be used: Start--> {{#bugs}} <div class=\"table-row bg-gray-100\" style=\"background-color:rgb(247, 250, 252);\">\n                      <div class=\"table-cell text-blue-500 px-2 pl-4 py-5\"> {{index}} </div>\n                      <div class=\"table-cell text-blue-500 px-2 pl-4 py-5\"> {{bug_caption}} </div>\n                      <div class=\"table-cell text-gray-800 px-2 py-5 text-center {{#isCriticalSeverity}}critical{{/isCriticalSeverity}} {{#isHighSeverity}}high{{/isHighSeverity}} {{#isMediumSeverity}}medium{{/isMediumSeverity}} {{#isLowSeverity}}low{{/isLowSeverity}} {{#isNoneSeverity}}none{{/isNoneSeverity}}\"> {{severity}} </div>\n                      <div class=\"table-cell text-gray-800 px-2 py-5 text-center\"> {{status}} </div>\n\t\t<!-- <div class=\"table-cell text-gray-800 px-2 py-5 text-center\"> No </div> -->\n                  </div> {{/bugs}}\n              </div>\n          </div>\n          <div style=\"page-break-after: always;\"></div>\n      </div> <!-- Appendid Page -->\n      <div class=\"page text-gray-700 text-sm font-light\">\n          <h1 class=\"text-lg font-medium text-gray-900\"> Appendix A - Vulnerability Summary & Recommendations </h1> {{#bugs}}\n          <!-- Snippet for each Bug appendix: Start -->\n          <div class=\"flex items-center w-full my-2 pb-3 border-b-2 border-gray-200\">\n              <div class=\"w-5/6\">\n                  <h1 class=\"text-sm font-medium text-gray-800\" style=\"word-wrap: break-word;\"> <span class=\"text-xs text-gray-700 font-normal\">#{{index}} </span>{{{bug_caption}}} </h1>\n                  <div class=\"flex items-center my-2 font-medium\" style=\"font-size: 10px;\"><span class=\"{{#isCriticalSeverity}}critical{{/isCriticalSeverity}} {{#isHighSeverity}}high{{/isHighSeverity}} {{#isMediumSeverity}}medium{{/isMediumSeverity}} {{#isLowSeverity}}low{{/isLowSeverity}} {{#isNoneSeverity}}none{{/isNoneSeverity}} border {{#isCriticalSeverity}}border-critical{{/isCriticalSeverity}} {{#isHighSeverity}}border-high{{/isHighSeverity}} {{#isMediumSeverity}}border-medium{{/isMediumSeverity}} {{#isLowSeverity}}border-low{{/isLowSeverity}} {{#isNoneSeverity}}border-none{{/isNoneSeverity}} px-2 rounded box-border\">{{{severity}}}</span>\n                      <p class=\"pl-2 text-gray-700\">{{{bug_type}}}</p>\n                  </div>\n                  {{#if cvss_score}}<div class=\"flex items-center my-2 font-medium\" style=\"font-size: 10px;\">\n                      <p class=\"pl-2 text-gray-700\">CVSS Score: {{{cvss_score}}}</p>\n                  </div>{{/if}}\n                  {{#if cvss_vector}}<div class=\"flex items-center my-2 font-medium\" style=\"font-size: 10px;\">\n                      <p class=\"pl-2 text-gray-700\">CVSS Vector: {{{cvss_vector}}}</p>\n                  </div>{{/if}}\n              </div>\n          </div>\n          <div class=\"flex w-full my-6 pb-3 border-b-2 border-gray-200 text-xs\">\n              <div class=\"w-1/6 text-xs mr-2 text-gray-700\">DESCRIPTION</div>\n              <div class=\"w-5/6 pl-2 break-words text-xs\" style=\"word-wrap: break-word;\">\n                  <pre>{{bug_description}}</pre>\n              </div>\n          </div>\n          <div class=\"flex w-full my-6 pb-3 border-b-2 border-gray-200 text-xs\">\n              <div class=\"w-1/6 text-xs mr-2 text-gray-700\">STEPS TO REPRODUCE</div>\n              <div class=\"w-5/6 pl-2 break-words text-xs\" style=\"word-wrap: break-word;\">\n              \\t  {{#steps_to_reproduce}}{{#ifEquals type \"text\"}}<pre>{{data}}</pre>{{/ifEquals}}{{#ifEquals type \"image\"}}<img style=\"width: 450px;\" src=\"{{{data}}}\" />{{/ifEquals}}{{/steps_to_reproduce}}\n              </div>\n          </div>\n          {{#if containsScreenshot}}\n          <div class=\"flex w-full my-6 pb-3 border-b-2 border-gray-200 text-xs\" style=\"page-break-inside: avoid;\">\n             <div class=\"w-1/6 text-xs mr-2 text-gray-700\">SCREENSHOTS</div>\n             <div class=\"w-5/6 pl-2 break-words text-xs\" style=\"word-wrap: break-word;\">\n                 {{#each screenshots}}\n                 <img style=\"max-height: 100vh; width: auto; max-width: 100%; height: auto;\" src=\"{{.}}\" /><br>\n                 {{/each}}\n             </div>\n          </div>\n          {{/if}}\n          <div class=\"flex w-full my-6 pb-3 border-b-2 border-gray-200 text-xs\">\n              <div class=\"w-1/6 text-xs mr-2 text-gray-700\">IMPACT</div>\n              <div class=\"w-5/6 pl-2 break-words text-xs\" style=\"word-wrap: break-word;\">\n                  <pre>{{bug_impact}}</pre>\n              </div>\n          </div>\n          <div class=\"flex w-full my-6 pb-3 border-b-2 border-gray-200 text-xs\" style=\"page-break-inside: avoid;\">\n              <div class=\"w-1/6 text-xs mr-2 text-gray-700\">HTTP REQUEST</div>\n              <div class=\"w-5/6 p-2 break-words text-xs\" style=\"background-color: rgb(237, 242, 247);\">\n                  <pre> {{http_request}} </pre>\n              </div>\n          </div>\n          <div class=\"flex w-full my-6 pb-3 border-b-2 border-gray-200 text-xs\">\n              <div class=\"w-1/6 text-xs mr-2 text-gray-700\">SUGGESTED FIX</div>\n              <div class=\"w-5/6 pl-2 break-words text-xs\" style=\"word-wrap: break-word;\">\n                  <pre>{{suggested_fix}}</pre>\n              </div>\n          </div><!-- Snippet to be used: End-->\n          <div style=\"page-break-after: always;\"></div> {{/bugs}}\n      </div>\n  </body>\n  \n  </html>`\n);\n\nexports.reportBug = reportBug;\nexports.getBugs = getBugs;\nexports.getBugsReport = getBugsReport;\nexports.getComments = getComments;\nexports.postComments = postComments;\nexports.postStatus = postStatus;\nexports.updateBug = updateBug;\nexports.deleteBugHandler = deleteBugHandler;\nexports.moveToJira = moveToJira;\nexports.checkIfProgramExistsForHacker = checkIfProgramExistsForHacker;\nexports.checkIfProgramExistsForHackerByHandle = checkIfProgramExistsForHackerByHandle;\n//exports.webScrapper     =   webScrapper;\nexports.totalreward = totalreward;\nexports.totalRewardThisMonth = totalRewardThisMonth;\nexports.activeBugs = activeBugs;\nexports.resolvedBugs = resolvedBugs;\nexports.totalAwardedBugs = totalAwardedBugs;\nexports.totalClosedBugs = totalClosedBugs;\nexports.totalTriagedBugs = totalTriagedBugs;\nexports.topAwardedBug = topAwardedBug;\nexports.relatedUsersWithBug = relatedUsersWithBug;\nexports.changeCommentStatus = changeCommentStatus;\nexports.getEmailIdForSendingMail = getEmailIdForSendingMail;\nexports.reportAnonymousBug = reportAnonymousBug;\n\nfunction reportBug(req, res) {\n  var handlerInfo = {\n    apiModule: 'bugs',\n    apiHandler: 'reportBug',\n  };\n\n  var authToken = req.headers.auth_token;\n  var userId = req.headers.user_id;\n  var program_uuid = req.body.program_id;\n  var bug_caption = req.body.bug_caption;\n  var bug_description = req.body.bug_description;\n  var steps_to_reproduce = req.body.steps_to_reproduce;\n  var severity = xss(req.body.severity);\n  var suggested_fix = req.body.suggested_fix;\n  var http_request = req.body.http_request;\n  var bug_impact = req.body.bug_impact;\n  var bug_type = req.body.bug_type;\n  var cvss_score = xss(req.body.cvss_score);\n  var cvss_vector = req.body.cvss_vector;\n  var screenshots = req.body.screenshots\n    ? JSON.stringify(req.body.screenshots)\n    : '[]';\n  var agree_to_terms = parseInt(xss(req.body.agree_to_terms));\n\n  var manvalues = [\n    authToken,\n    userId,\n    program_uuid,\n    bug_caption,\n    bug_description,\n    steps_to_reproduce,\n    severity,\n    suggested_fix,\n    http_request,\n    bug_impact,\n    bug_type,\n    agree_to_terms,\n  ];\n  var checkblank = commonFun.checkBlank(manvalues);\n\n  if (checkblank) {\n    return responses.sendParameterMissingResponse(handlerInfo, res);\n  }\n\n  if (!agree_to_terms) {\n    return responses.sendAgreeToTermsResponse(handlerInfo, res);\n  }\n\n  if (\n    commonFun.specialCharacterCheck(authToken) ||\n    commonFun.specialCharacterCheck(userId) ||\n    commonFun.specialCharacterCheck(program_uuid)\n  ) {\n    return responses.sendHackerJoiningResponse(handlerInfo, res);\n  }\n\n  authorization.validateAccessToken(handlerInfo, authToken, userId, function (\n    err,\n    user\n  ) {\n    if (err) {\n      if (err.flag == constants.responseFlags.PENDING_VERIFICATION) {\n        return responses.sendPendingVerificationResponse(handlerInfo, res);\n      }\n      if (err.flag == constants.responseFlags.ACCOUNT_SUSPENDED) {\n        return responses.sendAccountSuspendedResponse(handlerInfo, res);\n      }\n      return responses.sendAuthenticationFailure(handlerInfo, res);\n    }\n    if (user.userRole != constants.userRole.HACKER) {\n      return responses.sendUnauthorizedAccessResponse(handlerInfo, res);\n    }\n\n    var tasks = [\n      checkIfProgramIsActive.bind(null, handlerInfo, program_uuid),\n      checkIfProgramExistsForHacker.bind(\n        null,\n        handlerInfo,\n        user.details.hacker_id\n      ),\n      insertBug.bind(\n        null,\n        handlerInfo,\n        user.details.hacker_id,\n        bug_caption,\n        bug_description,\n        steps_to_reproduce,\n        severity,\n        cvss_score,\n        cvss_vector,\n        screenshots,\n        suggested_fix,\n        http_request,\n        bug_impact,\n        bug_type,\n        user.details.alias,\n        user.details.profile_image,\n        0\n      ),\n      sendMailForCreatedBug.bind(\n        null,\n        handlerInfo,\n        user.details.alias,\n        user.details.email_id,\n        bug_caption\n      ),\n    ];\n\n    async.waterfall(tasks, function (err, data) {\n      if (err) {\n        console.log(\"Failed to post the bug\", err);\n        return responses.sendFailureResponse(\n          handlerInfo,\n          res,\n          'Failed to post the bug :' + (err.message ? err.message : ''),\n          err\n        );\n      }\n      responses.sendSuccessResponse(\n        handlerInfo,\n        res,\n        'You have successfully posted the bug',\n        { Bug_id: data }\n      );\n      // sendMailForCreatedBug(handlerInfo, bug_caption, user.details.alias, user.details.email_id, bug_caption, program_id, data[2], function(){\n      // });\n      // responses.sendSuccessResponse(handlerInfo, res, 'You have successfully posted the bug', {Bug_id : data[2]});\n    });\n  });\n}\n\nfunction checkIfProgramIsActive(handlerInfo, programUuid, callback) {\n  var sql =\n    'SELECT program_id FROM programs WHERE program_uuid = ? AND status = ?';\n\n  var values = [programUuid, 'ACTIVE'];\n  var sqlQuery = dbHandler\n    .getInstance()\n    .executeQuery(sql, values, function (err, active) {\n      // logging.logDatabaseQuery(handlerInfo, 'checking if program is still active', err, active, sqlQuery.sql);\n      if (err || !active.length) {\n        return callback(new Error('This program is no more active'));\n      }\n      var programId = active[0].program_id;\n      callback(null, programId);\n    });\n}\n\nfunction checkIfProgramExistsForHacker(\n  handlerInfo,\n  hackerId,\n  programId,\n  callback\n) {\n  var getPrograms =\n    'SELECT 1  ' +\n    'FROM hacker_program_mapping ' +\n    'WHERE hacker_id = ? ' +\n    'AND program_id = ?';\n\n  var getProgramsQuery = dbHandler\n    .getInstance()\n    .executeQuery(getPrograms, [hackerId, programId], function (err, programs) {\n      // logging.logDatabaseQuery(handlerInfo, 'fetching hacker specific programs', err, programs, getProgramsQuery.sql);\n      if (err || !programs.length) {\n        // return callback(new Error(\"You are not authorised to access this program\"));\n        var getPrograms1 =\n          'INSERT into hacker_program_mapping ' +\n          '(hacker_id, program_id, status) VALUES (?,?, ?)';\n\n        var getProgramsQuery1 = dbHandler\n          .getInstance()\n          .executeQuery(\n            getPrograms1,\n            [hackerId, programId, 'ACTIVE'],\n            function (err1, programs1) {\n              if (err1) {\n                return callback(\n                  new Error(\n                    'Failed to create relation between hacker and the program'\n                  )\n                );\n              }\n              return callback(null, programId);\n            }\n          );\n      }\n      callback(null, programId);\n    });\n}\n\nfunction checkIfProgramExistsForHackerByHandle(\n  handlerInfo,\n  hackerId,\n  programHandle,\n  callback\n) {\n  var getPrograms =\n    'SELECT 1 FROM hacker_program_mapping h, programs p WHERE h.hacker_id = ? ' +\n    'AND h.program_id = p.program_id AND p.program_handle = ?';\n\n  var getProgramsQuery = dbHandler\n    .getInstance()\n    .executeQuery(getPrograms, [hackerId, programHandle], function (\n      err,\n      programs\n    ) {\n      // logging.logDatabaseQuery(handlerInfo, 'fetching hacker specific programs', err, programs, getProgramsQuery.sql);\n      if (err || !programs.length) {\n        return callback(\n          new Error('You are not authorised to access this program')\n        );\n      }\n      callback();\n    });\n}\n\nfunction insertBug(\n  handlerInfo,\n  hackerId,\n  bugCaption,\n  bugDescription,\n  steps_to_reproduce,\n  severity,\n  cvss_score,\n  cvss_vector,\n  screenshots,\n  suggested_fix,\n  http_request,\n  bug_impact,\n  bugType,\n  alias,\n  profile_image,\n  is_anonymous,\n  programId,\n  callback\n) {\n  var bugUuid = crypto.pseudoRandomBytes(32).toString('hex');\n  var sql =\n    'INSERT INTO bugs ' +\n    '(program_id, hacker_id, bug_caption, bug_description, steps_to_reproduce, severity, cvss_score, cvss_vector, screenshots, suggested_fix, http_request, bug_impact, bug_type, created_by, ' +\n    'bug_uuid, status, hacker_alias, hacker_profile_image, is_anonymous) ' +\n    'VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)';\n\n  var values = [\n    programId,\n    hackerId,\n    bugCaption,\n    bugDescription,\n    steps_to_reproduce,\n    severity,\n    cvss_score,\n    cvss_vector,\n    screenshots,\n    suggested_fix,\n    http_request,\n    bug_impact,\n    bugType,\n    alias,\n    bugUuid,\n    'NEW_SUBMISSION',\n    alias,\n    profile_image,\n    is_anonymous,\n  ];\n\n  var sqlQuery = dbHandler\n    .getInstance()\n    .executeQuery(sql, values, function (err, bug) {\n      if (err) {\n        return callback(new Error('Failed to report the bug'));\n      }\n      //The bugUuid generated above is saved in the db and is returned.\n      //console.log(\"insertBug : \", programId, \"bug ID : \", bugUuid);\n      callback(null, bugUuid, programId);\n    });\n}\n\nfunction sendMailForCreatedBug(\n  handlerInfo,\n  hackerAlias,\n  emailidval,\n  bugcaption,\n  bugUuid,\n  programId,\n  callback\n) {\n  getEmailIdForSendingMail(\n    handlerInfo,\n    constants.userRole.PROGRAM_MEMBER,\n    bugUuid,\n    programId,\n    function (err, emails) {\n      var opts = {\n        to: emails[0],\n        text:\n          'Hi,' +\n          '<br><br> A new vulnerability has been reported :' +\n          '<b>' +\n          bugcaption +\n          ' </b>by a security researcher. Please take a look here <br><br> http://139.59.6.20/#/company/bug/' +\n          bugUuid +\n          '<br><br> Thanks,<br><br> hackerhive.io',\n        subject: '[HackerHive.io] ' + bugcaption,\n      };\n      mailer.sendMail(opts, function (err) {\n        if (err) {\n          console.log('sendMailForCreatedBug : ', err);\n          return callback(err);\n        }\n        callback(null, bugUuid);\n      });\n    }\n  );\n}\n\nfunction getEmailIdForSendingMail(\n  handlerInfo,\n  userType,\n  bugId,\n  programId,\n  callback\n) {\n  if (userType == constants.userRole.HACKER) {\n    // when user is program member then send the emails to hacker + all active program members\n    //   var emailList = [];\n    var tasks = [\n      getHackerEmails.bind(null, handlerInfo, bugId),\n      getMemberEmails.bind(null, handlerInfo, programId),\n    ];\n    async.waterfall(tasks, function (err, email) {\n      if (err) {\n        // return responses.sendFailureResponse(handlerInfo, res, 'Failed to fetch emails', err);\n        return callback(err);\n      }\n      callback(null, email);\n    });\n  } else if (userType == constants.userRole.PROGRAM_MEMBER) {\n    var emailList = [];\n    var tasks = [getMemberEmails.bind(null, handlerInfo, programId, emailList)];\n    async.series(tasks, function (err, email) {\n      if (err) {\n        // return responses.sendFailureResponse(handlerInfo, res, 'Failed to fetch emails', err);\n        return callback(err);\n      }\n      callback(null, emailList);\n    });\n  }\n}\n\nfunction getHackerEmails(handlerInfo, bugId, callback) {\n  var sql =\n    'SELECT h.email_id ' +\n    'FROM hackers h, bugs b ' +\n    'WHERE b.hacker_id = h.hacker_id ' +\n    'AND b.bug_uuid = ? AND h.status = \"ACTIVE\"';\n\n  var values = [bugId];\n  var sqlQuery = dbHandler\n    .getInstance()\n    .executeQuery(sql, values, function (err, active) {\n      if (err) {\n        return callback(new Error('no hacker email exists for this bug'));\n      }\n      var emailList = [];\n      if (!active.length) {\n        return callback(null, emailList);\n      }\n      var hackerEmails = [];\n      hackerEmails.push(active[0].email_id);\n      emailList.push(hackerEmails);\n      callback(null, emailList);\n    });\n}\n\nfunction getMemberEmails(handlerInfo, programId, emailList, callback) {\n  var sql =\n    'SELECT email_id FROM program_members ' +\n    'WHERE program_id = ? AND status = \"ACTIVE\"';\n\n  var values = [programId];\n  var sqlQuery = dbHandler\n    .getInstance()\n    .executeQuery(sql, values, function (err, active1) {\n      if (err) {\n        return callback(new Error('Invalid program Id'));\n      }\n      if (!active1.length) {\n        return callback(null, emailList);\n      }\n      var memberEmails = [];\n\n      active1.forEach(function (user) {\n        memberEmails.push(user.email_id);\n      });\n\n      emailList.push(memberEmails);\n      callback(null, emailList);\n    });\n}\n\nfunction getBugs(req, res) {\n  var handlerInfo = {\n    apiModule: 'bugs',\n    apiHandler: 'getBugs',\n  };\n\n  var authToken = req.headers.auth_token;\n  var userId = req.headers.user_id;\n\n  var manvalues = [authToken, userId];\n  var checkblank = commonFun.checkBlank(manvalues);\n\n  if (checkblank) {\n    return responses.sendParameterMissingResponse(handlerInfo, res);\n  }\n\n  if (\n    commonFun.specialCharacterCheck(authToken) ||\n    commonFun.specialCharacterCheck(userId)\n  ) {\n    return responses.sendHackerJoiningResponse(handlerInfo, res);\n  }\n\n  authorization.validateAccessToken(handlerInfo, authToken, userId, function (\n    err,\n    user\n  ) {\n    if (err) {\n      if (err.flag == constants.responseFlags.PENDING_VERIFICATION) {\n        return responses.sendPendingVerificationResponse(handlerInfo, res);\n      }\n      if (err.flag == constants.responseFlags.ACCOUNT_SUSPENDED) {\n        return responses.sendAccountSuspendedResponse(handlerInfo, res);\n      }\n      return responses.sendAuthenticationFailure(handlerInfo, res);\n    }\n\n    var tasks = [];\n    //if he is a program member\n    if (!user.userRole) {\n      tasks.push(\n        getProgramMemberSubmittedBugs.bind(\n          null,\n          handlerInfo,\n          user.details.program_member_id\n        )\n      );\n    } else {\n      tasks.push(\n        getHackerSubmittedBugs.bind(\n          null,\n          handlerInfo,\n          user.details.hacker_id,\n          user.details.email_id\n        )\n      );\n    }\n    async.parallel(tasks, function (err, bugs) {\n      if (err) {\n        return responses.sendFailureResponse(\n          handlerInfo,\n          res,\n          'Failed to fetch bugs',\n          err\n        );\n      }\n      responses.sendSuccessResponse(handlerInfo, res, 'bug details', bugs[0]);\n    });\n  });\n}\n\nfunction getBugsReport(req, res) {\n  var handlerInfo = {\n    apiModule: 'bugs',\n    apiHandler: 'getBugs',\n  };\n\n  req.body.testers_exist = !_.isEmpty(req.body.testers);\n\n  var authToken = req.headers.auth_token;\n  var userId = req.headers.user_id;\n  var report_title = req.body.report_title;\n  var company_name = req.body.company_name;\n  var application_name = req.body.application_name;\n  var asset_type = req.body.asset_type || \"web\";\n  var executive_summary = req.body.executive_summary ? Handlebars.compile(req.body.executive_summary)({\n    company_name: company_name,\n    application_name: application_name,\n    asset_type: constants.assetTypeExecutiveSummaryMapping[asset_type]\n  }) : \"\";\n  var assumptions = req.body.assumptions;\n\n  var manvalues = [\n    authToken,\n    userId,\n    report_title,\n    executive_summary,\n    assumptions,\n  ];\n  var checkblank = commonFun.checkBlank(manvalues);\n\n  if (checkblank) {\n    return responses.sendParameterMissingResponse(handlerInfo, res);\n  }\n\n  if (\n    commonFun.specialCharacterCheck(authToken) ||\n    commonFun.specialCharacterCheck(userId)\n  ) {\n    return responses.sendHackerJoiningResponse(handlerInfo, res);\n  }\n\n  authorization.validateAccessToken(handlerInfo, authToken, userId, function (\n    err,\n    user\n  ) {\n    if (err) {\n      if (err.flag == constants.responseFlags.PENDING_VERIFICATION) {\n        return responses.sendPendingVerificationResponse(handlerInfo, res);\n      }\n      if (err.flag == constants.responseFlags.ACCOUNT_SUSPENDED) {\n        return responses.sendAccountSuspendedResponse(handlerInfo, res);\n      }\n      return responses.sendAuthenticationFailure(handlerInfo, res);\n    }\n\n    var tasks = [];\n    tasks.push(\n      getProgramsSubmittedBugs.bind(null, handlerInfo, user.details.program_id)\n    );\n    async.parallel(tasks, function (err, bugs) {\n      if (err) {\n        return responses.sendFailureResponse(\n          handlerInfo,\n          res,\n          'Failed to fetch bugs',\n          err\n        );\n      }\n      var index = 0;\n      var bugList = _.sortBy(bugs[0], (each) => {\n        return constants.bugCriticalityToPriorityMapping[each.severity];\n      }).map((each) => {\n        index++;\n        return _.merge(each, {\n          index: index,\n          status: constants.bugStatusToNameMapping[each.status],\n          steps_to_reproduce: JSON.parse(each.steps_to_reproduce),\n          screenshots: each.screenshots ? JSON.parse(each.screenshots) : [],\n          containsScreenshot: each.screenshots\n            ? JSON.parse(each.screenshots).length > 0\n            : 0,\n          isCriticalSeverity:\n            each.severity === 'Critical' || each.severity === 'critical',\n          isHighSeverity: each.severity === 'High' || each.severity === 'high',\n          isMediumSeverity:\n            each.severity === 'Medium' || each.severity === 'medium',\n          isLowSeverity: each.severity === 'Low' || each.severity === 'low',\n          isNoneSeverity: each.severity === 'None' || each.severity === 'none',\n        });\n      });\n      var templateData = _.merge(\n        req.body,\n        { bugs: bugList },\n        { test_time: new Date() },\n          {coverage_asset_type: constants.assetTypeScopeOfWorkMapping[asset_type]}\n      );\n      var options = {\n        format: 'A4',\n        orientation: 'portrait',\n        border: {\n          top: '15mm', // default is 0, units: mm, cm, in, px\n          right: '15mm',\n          bottom: '10mm',\n          left: '15mm',\n        },\n        footer: {\n          height: '10mm',\n          contents: {\n            default:\n\n              '<div class=\"flex justify-between items-center\">  <!--  <div class=\"footer-text\">Page {{page}} of {{pages}}</div> -->  <img style=\"width: 70px;\" src=\"https://appsecure.security/static/appsecure-logo@2x-253e0223c2d8f9ad95b32c736b482d49.png\"/><div class=\"footer-text\">© Appsecure Security 2025</div></div>',\n\n          },\n        },\n        type: 'pdf',\n        timeout: 10000000,\n      };\n      pdf\n        .create(ReportTemplate(templateData), options)\n        .toStream(function (err, stream) {\n          if (err) {\n            console.log(\"error while pdf conversion\", err);\n          }\n          res.writeHead(200, {\n            'Content-Type': 'application/pdf',\n            'Access-Control-Allow-Origin': '*',\n            'Content-Disposition': 'attachment; filename=report.pdf',\n          });\n          stream.pipe(res);\n        });\n    });\n  });\n}\n\nfunction getProgramsSubmittedBugs(handlerInfo, programId, callback) {\n  var getBugs =\n    \"SELECT * FROM bugs WHERE program_id = ? AND status in ('OPEN', 'TRIAGED')\";\n\n  var getBugsQuery = dbHandler\n    .getInstance()\n    .executeQuery(getBugs, [programId], function (err, bugs) {\n      if (err) {\n        return callback(err);\n      }\n      callback(null, bugs);\n    });\n}\n\nfunction getHackerSubmittedBugs(handlerInfo, hackerId, emailId, callback) {\n  var getBugs =\n    'SELECT b.bug_uuid, b.hacker_alias as hacker_alias, h.profile_image, p.program_uuid as program_id, p.company_name, ' +\n    'p.company_logo, b.bug_caption, b.bug_type, b.bug_description, b.bug_image, ' +\n    'b.steps_to_reproduce, b.severity, b.suggested_fix, b.http_request, b.bug_impact, b.status, b.bounty_awarded, b.screenshots, b.is_anonymous, ' +\n    'b.created_at, b.updated_at, ( SELECT COUNT(id) FROM comments c where c.bug_uuid = b.bug_uuid ' +\n    'AND c.user_role = 0 AND c.is_read = 0 ) as newCommentCount ' +\n    'FROM hackers h, bugs b, programs p ' +\n    'WHERE h.hacker_id = b.hacker_id ' +\n    'AND b.program_id = p.program_id ' +\n    'AND b.hacker_id = ?';\n\n  var getBugsQuery = dbHandler\n    .getInstance()\n    .executeQuery(getBugs, [hackerId], function (err, bugs) {\n      if (err) {\n        return callback(err);\n      }\n      callback(null, bugs);\n    });\n}\n\nfunction getProgramMemberSubmittedBugs(handlerInfo, programMemberId, callback) {\n  var getBugs =\n    'SELECT b.bug_uuid, m.alias as program_member_alias, b.hacker_alias as hacker_alias, ' +\n    'b.hacker_profile_image as profile_image, p.program_uuid as program_id, p.company_name, ' +\n    'p.company_logo, b.bug_caption, b.bug_type, b.bug_description, b.bug_image, ' +\n    'b.steps_to_reproduce, b.severity, b.suggested_fix, b.http_request, b.bug_impact, b.status, b.bounty_awarded, b.screenshots, b.is_anonymous, ' +\n    'b.created_at, b.updated_at, ( SELECT COUNT(id) FROM comments c where c.bug_uuid = b.bug_uuid ' +\n    'AND c.user_role = 1 AND c.is_read = 0 ) as newCommentCount ' +\n    'FROM program_members m, bugs b, programs p ' +\n    'WHERE b.program_id = m.program_id ' +\n    'AND m.program_id = p.program_id ' +\n    //'AND b.hacker_id = h.hacker_id ' +\n    'AND m.program_member_id = ?';\n\n  var getBugsQuery = dbHandler\n    .getInstance()\n    .executeQuery(getBugs, [programMemberId], function (err, bugs) {\n      if (err) {\n        return callback(err);\n      }\n      callback(null, bugs);\n    });\n}\n\nfunction getComments(req, res) {\n  var handlerInfo = {\n    apiModule: 'bugs',\n    apiHandler: 'getComments',\n  };\n\n  var authToken = req.headers.auth_token;\n  var userId = req.headers.user_id;\n  var bugUuid = req.query.bug_uuid;\n\n  var manvalues = [authToken, userId, bugUuid];\n  var checkblank = commonFun.checkBlank(manvalues);\n\n  if (checkblank) {\n    return responses.sendParameterMissingResponse(handlerInfo, res);\n  }\n\n  if (\n    commonFun.specialCharacterCheck(authToken) ||\n    commonFun.specialCharacterCheck(userId) ||\n    commonFun.specialCharacterCheck(bugUuid)\n  ) {\n    return responses.sendHackerJoiningResponse(handlerInfo, res);\n  }\n  authorization.validateAccessToken(handlerInfo, authToken, userId, function (\n    err,\n    user\n  ) {\n    if (err) {\n      if (err.flag == constants.responseFlags.PENDING_VERIFICATION) {\n        return responses.sendPendingVerificationResponse(handlerInfo, res);\n      }\n      if (err.flag == constants.responseFlags.ACCOUNT_SUSPENDED) {\n        return responses.sendAccountSuspendedResponse(handlerInfo, res);\n      }\n      return responses.sendAuthenticationFailure(handlerInfo, res);\n    }\n    getBugByUuid(handlerInfo, bugUuid, function (err, bug) {\n      var tasks = [];\n      if (!bug) {\n        console.log(\"but does not exist\", bugUuid);\n      }\n      if (bug.hacker_id == 0) {\n        tasks.push(\n          checkIfBugExistsForMember.bind(\n            null,\n            handlerInfo,\n            user.details,\n            bugUuid\n          )\n        );\n      } else {\n        tasks.push(\n          checkIfBugExistsForUser.bind(\n            null,\n            handlerInfo,\n            user.details,\n            user.userRole,\n            bugUuid\n          )\n        );\n      }\n      tasks.push(\n        getCommentsOnBug.bind(null, handlerInfo, bugUuid, user.userRole)\n      );\n\n      async.series(tasks, function (err, comments) {\n        if (err) {\n          return responses.sendFailureResponse(\n            handlerInfo,\n            res,\n            'Failed to fetch comments',\n            err\n          );\n        }\n        responses.sendSuccessResponse(\n          handlerInfo,\n          res,\n          'Comments on bug',\n          comments[1]\n        );\n      });\n    });\n  });\n}\n\nfunction getCommentsOnBug(handlerInfo, bugId, userRole, callback) {\n  var getBugs =\n    'SELECT comment_uuid, content, user_role, created_at, updated_at, bug_uuid, filled_by_name, is_read ' +\n    'FROM comments ' +\n    'WHERE bug_uuid = ?';\n\n  var getBugsQuery = dbHandler\n    .getInstance()\n    .executeQuery(getBugs, [bugId], function (err, comments) {\n      if (err) {\n        return callback(err);\n      }\n      callback(null, comments);\n    });\n}\n\nfunction postStatus(req, res) {\n  var handlerInfo = {\n    apiModule: 'bugs',\n    apiHandler: 'postComments',\n  };\n\n  var authToken = req.headers.auth_token;\n  var userId = req.headers.user_id;\n  var bugUuid = xss(req.body.bug_uuid);\n  var status = parseInt(xss(req.body.status));\n\n  var manvalues = [authToken, userId, bugUuid, status];\n  var checkblank = commonFun.checkBlank(manvalues);\n\n  if (checkblank || !status || status < 1 || status > 8 || !bugUuid) {\n    return responses.sendParameterMissingResponse(handlerInfo, res);\n  }\n\n  for (var key in constants.bugStatus) {\n    if (constants.bugStatus[key] === status) {\n      status = '*--' + key + '--*';\n    }\n  }\n\n  if (\n    commonFun.specialCharacterCheck(authToken) ||\n    commonFun.specialCharacterCheck(userId) ||\n    commonFun.specialCharacterCheck(bugUuid)\n  ) {\n    return responses.sendHackerJoiningResponse(handlerInfo, res);\n  }\n  authorization.validateAccessToken(handlerInfo, authToken, userId, function (\n    err,\n    user\n  ) {\n    if (err) {\n      if (err.flag == constants.responseFlags.PENDING_VERIFICATION) {\n        return responses.sendPendingVerificationResponse(handlerInfo, res);\n      }\n      if (err.flag == constants.responseFlags.ACCOUNT_SUSPENDED) {\n        return responses.sendAccountSuspendedResponse(handlerInfo, res);\n      }\n      return responses.sendAuthenticationFailure(handlerInfo, res);\n    }\n\n    if (user.userRole != constants.userRole.PROGRAM_MEMBER) {\n      return responses.sendUnauthorizedAccessResponse(handlerInfo, res);\n    }\n    if (user.authLevel == constants.authLevel.USER) {\n      return responses.sendUnauthorizedAccessResponse(handlerInfo, res);\n    }\n\n    var userType =\n      user.userRole == constants.userRole.PROGRAM_MEMBER\n        ? constants.userRole.HACKER\n        : constants.userRole.PROGRAM_MEMBER;\n\n    getBugByUuid(handlerInfo, bugUuid, function (err, bug) {\n      var tasks = [];\n      if (bug.hacker_id == 0) {\n        tasks.push(\n          checkIfBugExistsForMember.bind(\n            null,\n            handlerInfo,\n            user.details,\n            bugUuid\n          )\n        );\n      } else {\n        tasks.push(\n          checkIfBugExistsForUser.bind(\n            null,\n            handlerInfo,\n            user.details,\n            user.userRole,\n            bugUuid\n          )\n        );\n      }\n      tasks.push(postComment.bind(null, handlerInfo, user, bugUuid, status));\n\n      async.waterfall(tasks, function (err, comments) {\n        if (err) {\n          if (err.flag == constants.responseFlags.UNAUTHORIZED_ACCESS) {\n            return responses.sendUnauthorizedAccessResponse(handlerInfo, res);\n          }\n          return responses.sendFailureResponse(\n            handlerInfo,\n            res,\n            'Failed to post comments : ' + (err.message ? err.message : ''),\n            err\n          );\n        }\n        responses.sendSuccessResponse(\n          handlerInfo,\n          res,\n          'successfully posted comment',\n          {}\n        );\n      });\n    });\n  });\n}\n\nfunction getBugByUuid(handlerInfo, bugUuid, callback) {\n  var sql = 'SELECT * from bugs where bug_uuid = ?';\n  var values = [bugUuid];\n\n  var sqlQuery = dbHandler\n    .getInstance()\n    .executeQuery(sql, values, function (err, bug) {\n      if (err || !bug.length) {\n        err = new Error('No Bugs Found');\n        err.flag = constants.responseFlags.UNAUTHORIZED_ACCESS;\n        return callback(err);\n      }\n      callback(null, bug[0]);\n    });\n}\n\nfunction postComments(req, res) {\n  var handlerInfo = {\n    apiModule: 'bugs',\n    apiHandler: 'postComments',\n  };\n\n  // logging.trace(handlerInfo, {request : req.headers});\n\n  var authToken = req.headers.auth_token;\n  var userId = req.headers.user_id;\n  var bugUuid = xss(req.body.bug_uuid);\n  var content = xss(req.body.content);\n\n  var manvalues = [authToken, userId, bugUuid, content];\n  var checkblank = commonFun.checkBlank(manvalues);\n\n  if (checkblank || !bugUuid) {\n    return responses.sendParameterMissingResponse(handlerInfo, res);\n  }\n\n  if (\n    commonFun.specialCharacterCheck(authToken) ||\n    commonFun.specialCharacterCheck(userId) ||\n    commonFun.specialCharacterCheck(bugUuid)\n  ) {\n    return responses.sendHackerJoiningResponse(handlerInfo, res);\n  }\n  authorization.validateAccessToken(handlerInfo, authToken, userId, function (\n    err,\n    user\n  ) {\n    if (err) {\n      if (err.flag == constants.responseFlags.PENDING_VERIFICATION) {\n        return responses.sendPendingVerificationResponse(handlerInfo, res);\n      }\n      if (err.flag == constants.responseFlags.ACCOUNT_SUSPENDED) {\n        return responses.sendAccountSuspendedResponse(handlerInfo, res);\n      }\n      return responses.sendAuthenticationFailure(handlerInfo, res);\n    }\n\n    var userType =\n      user.userRole == constants.userRole.PROGRAM_MEMBER\n        ? constants.userRole.HACKER\n        : constants.userRole.PROGRAM_MEMBER;\n    var tasks = [];\n    if (user.userRole === constants.userRole.HACKER) {\n      tasks.push(\n        commonFun.findProgramIdFromBugUuid.bind(null, handlerInfo, bugUuid)\n      );\n      tasks.push(\n        commonFun.checkIfHackerIsMappedToProgram.bind(\n          null,\n          handlerInfo,\n          user.details.hacker_id\n        )\n      );\n      tasks.push(\n        checkIfBugExistsForUser.bind(\n          null,\n          handlerInfo,\n          user.details,\n          user.userRole,\n          bugUuid\n        )\n      );\n    } else {\n      tasks.push(\n        checkIfBugExistsForMember.bind(null, handlerInfo, user.details, bugUuid)\n      );\n    }\n    tasks.push(postComment.bind(null, handlerInfo, user, bugUuid, content));\n    tasks.push(\n      sendMailForCommentOnBug.bind(\n        null,\n        handlerInfo,\n        userType,\n        user.details.alias,\n        bugUuid,\n        content\n      )\n    );\n\n    async.waterfall(tasks, function (err, comments) {\n      if (err) {\n        if (err.flag == constants.responseFlags.UNAUTHORIZED_ACCESS) {\n          return responses.sendUnauthorizedAccessResponse(handlerInfo, res);\n        }\n        return responses.sendFailureResponse(\n          handlerInfo,\n          res,\n          'Failed to post comments : ' + (err.message ? err.message : ''),\n          err\n        );\n      }\n      responses.sendSuccessResponse(\n        handlerInfo,\n        res,\n        'successfully posted comment',\n        {}\n      );\n    });\n  });\n}\n\nfunction checkIfBugExistsForMember(handlerInfo, user, bugUuid, callback) {\n  var sql =\n    'SELECT b.program_id, b.bug_uuid, b.bug_caption, b.bug_id, b.hacker_id, ' +\n    'b.created_by, b.hacker_alias FROM bugs b, program_members p WHERE ' +\n    'b.program_id = p.program_id AND b.bug_uuid = ? AND p.program_member_id = ?';\n  var values = [bugUuid, user.program_member_id];\n\n  var sqlQuery = dbHandler\n    .getInstance()\n    .executeQuery(sql, values, function (err, bugs) {\n      if (err || !bugs.length) {\n        err = new Error('No Bugs Found');\n        err.flag = constants.responseFlags.UNAUTHORIZED_ACCESS;\n        return callback(err);\n      }\n      var bugDetails = bugs[0];\n      callback(null, bugDetails);\n    });\n}\n\nfunction checkIfBugExistsForUser(\n  handlerInfo,\n  user,\n  userRole,\n  bugUuid,\n  callback\n) {\n  var getBugs, values;\n  if (userRole == constants.userRole.HACKER) {\n    getBugs =\n      'SELECT b.program_id, b.bug_uuid, b.bug_caption, b.bug_id, b.hacker_id, h.email_id, h.alias ' +\n      'FROM bugs b, hackers h ' +\n      'WHERE b.bug_uuid = ? AND b.hacker_id = ? AND h.hacker_id = b.hacker_id';\n    values = [bugUuid, user.hacker_id];\n  } else {\n    getBugs =\n      'SELECT b.program_id, b.bug_uuid, b.bug_caption, b.bug_id, b.hacker_id, h.email_id, h.alias ' +\n      'FROM bugs b, program_members p, hackers h ' +\n      'WHERE b.program_id = p.program_id ' +\n      'AND b.bug_uuid = ? AND p.program_member_id = ? AND b.hacker_id = h.hacker_id';\n    values = [bugUuid, user.program_member_id];\n  }\n\n  var getBugsQuery = dbHandler\n    .getInstance()\n    .executeQuery(getBugs, values, function (err, bugs) {\n      if (err || !bugs.length) {\n        err = new Error('No Bugs Found');\n        err.flag = constants.responseFlags.UNAUTHORIZED_ACCESS;\n        return callback(err);\n      }\n      var bugDetails = bugs[0];\n      callback(null, bugDetails);\n    });\n}\n\nfunction postComment(\n  handlerInfo,\n  user,\n  bugUuid,\n  content,\n  bugDetails,\n  callback\n) {\n  var bugId = bugDetails.bug_id;\n  var commentUuid = crypto.pseudoRandomBytes(10).toString('hex');\n  var postComment =\n    'INSERT INTO comments ' +\n    '(bug_id, bug_uuid, user_role, filled_by_id, filled_by_name, content, comment_uuid) ' +\n    'VALUES(?, ?, ?, ?, ?, ?, ?)';\n\n  var values = [\n    bugId,\n    bugUuid,\n    user.userRole,\n    !user.userRole ? user.details.program_member_id : user.details.hacker_id,\n    user.details.alias,\n    content,\n    commentUuid,\n  ];\n\n  var postCommentQuery = dbHandler\n    .getInstance()\n    .executeQuery(postComment, values, function (err, bugs) {\n      if (err) {\n        return callback(err);\n      }\n      callback(null, bugDetails);\n    });\n}\n\nfunction sendMailForCommentOnBug(\n  handlerInfo,\n  userType,\n  alias,\n  bugUuid,\n  content,\n  bugDetails,\n  callback\n) {\n  getEmailIdForSendingMail(\n    handlerInfo,\n    userType,\n    bugUuid,\n    bugDetails.program_id,\n    function (err, emails) {\n      if (userType == constants.userRole.HACKER) {\n        // when user is program member then send the emails to hacker + all active program members\n        var opts = {\n          to: emails[0],\n          bcc: emails[1],\n          text:\n            'Hi, <br><br>  New comment has been posted by  ' +\n            alias +\n            ' on bug #' +\n            bugUuid +\n            ' http://139.59.6.20/#/company/bug/' +\n            bugUuid +\n            '<br><br><br>Thanks, <br> hackerhive.io',\n          subject:\n            '[HackerHive.io] : Comment added on ' + bugDetails.bug_caption,\n        };\n        mailer.sendMail(opts, function (err) {\n          if (err) {\n            return callback(err);\n          }\n          callback();\n        });\n      } else {\n        var opts = {\n          to: emails[0],\n          text:\n            'Hi, <br><br>  New comment has been posted by  ' +\n            alias +\n            ' on bug #' +\n            bugUuid +\n            ' http://139.59.6.20/#/company/bug/' +\n            bugUuid +\n            '<br><br><br>Thanks,, <br> hackerhive.io',\n          subject:\n            '[Hackerhive.io] : Comment added on ' + bugDetails.bug_caption,\n        };\n        mailer.sendMail(opts, function (err) {\n          if (err) {\n            return callback(err);\n          }\n          callback();\n        });\n      }\n    }\n  );\n}\n\n/*function updateBug(req, res){\n    var handlerInfo = {\n        apiModule  : 'bugs',\n        apiHandler : 'updateBug'\n    };\n\n    var authToken       = req.headers.auth_token;\n    var userId          = req.headers.user_id;\n    var status          = parseInt(xss(req.body.status));\n    var bugUuid         = req.body.bug_uuid;\n    var bountyAwarded   = parseInt(xss(req.body.bounty_awarded));\n\n    var manvalues = [authToken, userId, status, bugUuid];\n\n    var checkblank = commonFun.checkBlank(manvalues);\n\n    if (checkblank || (!status || status < 1 || status > 8) || !bugUuid) {\n        return responses.sendParameterMissingResponse(handlerInfo, res);\n    }\n    for(var key in constants.bugStatus){\n      \tif(constants.bugStatus[key] === status) {\n            status = key;\n        }\n    }\n\n    var isBountyAwarded = bountyAwarded ? 1 : 0;\n\nif(commonFun.specialCharacterCheck(authToken) || commonFun.specialCharacterCheck(userId)) {\n        return responses.sendHackerJoiningResponse(handlerInfo, res);\n    }\n    authorization.validateAccessToken(handlerInfo, authToken, userId, function(err, user) {\n        if (err) {\n            if(err.flag == constants.responseFlags.PENDING_VERIFICATION){\n                return responses.sendPendingVerificationResponse(handlerInfo, res);\n            }\n            if(err.flag == constants.responseFlags.ACCOUNT_SUSPENDED){\n                return responses.sendAccountSuspendedResponse(handlerInfo, res);\n            }\n            return responses.sendAuthenticationFailure(handlerInfo, res);\n        }\n\n        if(user.userRole != constants.userRole.PROGRAM_MEMBER){\n            return responses.sendUnauthorizedAccessResponse(handlerInfo, res);\n        }\n\n     \tif(user.authLevel == constants.authLevel.USER) {\n            return responses.sendUnauthorizedAccessResponse(handlerInfo, res);\n        }\n\n        var tasks = [\n            checkIfBugExistsForUser.bind(null, handlerInfo, user.details, user.userRole, bugUuid)\n        ];\n        if(isBountyAwarded){\n            tasks.push(checkIfBountyExists.bind(null, handlerInfo, bugUuid));\n        }\n        tasks.push(updateBugStatus.bind(null, handlerInfo, bugUuid, status, isBountyAwarded, bountyAwarded, user.details.alias));\n        tasks.push(sendMailForBugUpdate.bind(null, handlerInfo, user.details.alias));\n        if (status === \"RESOLVED\") {\n\t\t\tvar score = 20;\n\t\t\ttasks.push(assignScore.bind(null, handlerInfo, status, score));\n\t\t}\n        if (status === \"INFORMATIVE\") {\n\t\t\tvar score = 5;\n\t\t\ttasks.push(assignScore.bind(null, handlerInfo, status, score));\n\t\t}\n\t\tif(isBountyAwarded){\n\t\t\ttasks.push(sendMailForBountyToHacker.bind(null, handlerInfo, bountyAwarded));\n        }\n\n        async.waterfall(tasks, function(err, update){\n            if(err){\n                return responses.sendFailureResponse(handlerInfo, res, 'Failed to update bug : ' + (err.message ? err.message : ''), err);\n            }\n            responses.sendSuccessResponse(handlerInfo, res, 'Successfully updated bug', {});\n        });\n    });\n}*/\n\nfunction updateBug(req, res) {\n  var handlerInfo = {\n    apiModule: 'bugs',\n    apiHandler: 'updateBug',\n  };\n\n  var authToken = req.headers.auth_token;\n  var userId = req.headers.user_id;\n  var status = parseInt(xss(req.body.status));\n  var bugUuid = req.body.bug_uuid;\n  var bountyAwarded = parseInt(xss(req.body.bounty_awarded));\n\n  var manvalues = [authToken, userId, status, bugUuid];\n\n  var checkblank = commonFun.checkBlank(manvalues);\n\n  if (checkblank || !status || status < 1 || status > 8 || !bugUuid) {\n    return responses.sendParameterMissingResponse(handlerInfo, res);\n  }\n  for (var key in constants.bugStatus) {\n    if (constants.bugStatus[key] === status) {\n      status = key;\n    }\n  }\n\n  var isBountyAwarded = bountyAwarded ? 1 : 0;\n\n  if (\n    commonFun.specialCharacterCheck(authToken) ||\n    commonFun.specialCharacterCheck(userId) ||\n    commonFun.specialCharacterCheck(bugUuid)\n  ) {\n    return responses.sendHackerJoiningResponse(handlerInfo, res);\n  }\n  authorization.validateAccessToken(handlerInfo, authToken, userId, function (\n    err,\n    user\n  ) {\n    if (err) {\n      if (err.flag == constants.responseFlags.PENDING_VERIFICATION) {\n        return responses.sendPendingVerificationResponse(handlerInfo, res);\n      }\n      if (err.flag == constants.responseFlags.ACCOUNT_SUSPENDED) {\n        return responses.sendAccountSuspendedResponse(handlerInfo, res);\n      }\n      return responses.sendAuthenticationFailure(handlerInfo, res);\n    }\n\n    if (user.userRole != constants.userRole.PROGRAM_MEMBER) {\n      return responses.sendUnauthorizedAccessResponse(handlerInfo, res);\n    }\n\n    if (user.authLevel == constants.authLevel.USER) {\n      return responses.sendUnauthorizedAccessResponse(handlerInfo, res);\n    }\n\n    isHackerMappedWithBugInfo(handlerInfo, bugUuid, user.details, function (\n      err,\n      bug\n    ) {\n      var tasks = [];\n      var bugDetails = bug[0];\n      var isHackerRegistered = bugDetails.isHackerRegistered;\n      var isHackerMapped = bugDetails.isHackerMapped;\n      var isBugRelatedToProgramMember =\n        bugDetails.program_id == user.details.program_id ? true : false;\n      var isBountyAlreadyAwarded = bugDetails.bounty_awarded ? true : false;\n\n      if (!isHackerMapped && !(status === 'CLOSED')) {\n        /** create mapping as the program member has responded to the bug when status is not closed*/\n        tasks.push(commonFun.createMapping.bind(null, handlerInfo, bug[0]));\n        //return responses.sendFailureResponse(handlerInfo, res, 'Hacker Mapping not found, cannot update bug');\n      }\n\n      if (isBountyAlreadyAwarded) {\n        return responses.sendFailureResponse(\n          handlerInfo,\n          res,\n          'Bounty Already Exist'\n        );\n      }\n\n      if (isBugRelatedToProgramMember && !isBountyAlreadyAwarded) {\n        tasks.push(\n          updateBugStatus.bind(\n            null,\n            handlerInfo,\n            bugUuid,\n            status,\n            isBountyAwarded,\n            bountyAwarded,\n            user.details.alias,\n            bugDetails\n          )\n        );\n      }\n      tasks.push(\n        sendMailForBugUpdate.bind(\n          null,\n          handlerInfo,\n          user.details.alias,\n          isHackerRegistered\n        )\n      );\n\n      if (isHackerRegistered) {\n        if (status === 'RESOLVED') {\n          var score = 20;\n          tasks.push(assignScore.bind(null, handlerInfo, status, score));\n        }\n        if (status === 'INFORMATIVE') {\n          var score = 5;\n          tasks.push(assignScore.bind(null, handlerInfo, status, score));\n        }\n      }\n\n      if (!isBountyAlreadyAwarded && isBountyAwarded) {\n        tasks.push(\n          sendMailForBountyToHacker.bind(null, handlerInfo, bountyAwarded)\n        );\n      }\n\n      async.waterfall(tasks, function (err, update) {\n        if (err) {\n          return responses.sendFailureResponse(\n            handlerInfo,\n            res,\n            'Failed to update bug : ' + (err.message ? err.message : ''),\n            err\n          );\n        }\n        responses.sendSuccessResponse(\n          handlerInfo,\n          res,\n          'Successfully updated bug',\n          {}\n        );\n      });\n    });\n  });\n}\n\nfunction deleteBugHandler(req, res) {\n  var handlerInfo = {\n    apiModule: 'bugs',\n    apiHandler: 'deleteBugHandler',\n  };\n\n  var authToken = req.headers.auth_token;\n  var userId = req.headers.user_id;\n  var bugUuid = req.body.bug_uuid;\n\n  var manvalues = [authToken, userId, bugUuid];\n\n  var checkblank = commonFun.checkBlank(manvalues);\n\n  if (checkblank || !bugUuid) {\n    return responses.sendParameterMissingResponse(handlerInfo, res);\n  }\n  if (\n      commonFun.specialCharacterCheck(authToken) ||\n      commonFun.specialCharacterCheck(userId) ||\n      commonFun.specialCharacterCheck(bugUuid)\n  ) {\n    return responses.sendHackerJoiningResponse(handlerInfo, res);\n  }\n  authorization.validateAccessToken(handlerInfo, authToken, userId, function (\n      err,\n      user\n  ) {\n    if (err) {\n      if (err.flag == constants.responseFlags.PENDING_VERIFICATION) {\n        return responses.sendPendingVerificationResponse(handlerInfo, res);\n      }\n      if (err.flag == constants.responseFlags.ACCOUNT_SUSPENDED) {\n        return responses.sendAccountSuspendedResponse(handlerInfo, res);\n      }\n      return responses.sendAuthenticationFailure(handlerInfo, res);\n    }\n\n    if (user.userRole != constants.userRole.PROGRAM_MEMBER) {\n      return responses.sendUnauthorizedAccessResponse(handlerInfo, res);\n    }\n\n    if (user.authLevel == constants.authLevel.USER) {\n      return responses.sendUnauthorizedAccessResponse(handlerInfo, res);\n    }\n\n    isHackerMappedWithBugInfo(handlerInfo, bugUuid, user.details, function (\n        err,\n        bug\n    ) {\n      var tasks = [];\n      var bugDetails = bug[0];\n      var isHackerRegistered = bugDetails.isHackerRegistered;\n\n\n      tasks.push(\n          deleteBug.bind(\n              null,\n              bugUuid\n          )\n      );\n\n      async.waterfall(tasks, function (err, update) {\n        if (err) {\n          return responses.sendFailureResponse(\n              handlerInfo,\n              res,\n              'Failed to delete bug : ' + (err.message ? err.message : ''),\n              err\n          );\n        }\n        responses.sendSuccessResponse(\n            handlerInfo,\n            res,\n            'Successfully deleted bug',\n            {}\n        );\n      });\n    });\n  });\n}\n\nfunction isHackerMappedWithBugInfo(handlerInfo, bugUuid, user, callback) {\n  var sql = 'select * from bugs where bug_uuid = ?';\n  var sqlQuery = dbHandler\n    .getInstance()\n    .executeQuery(sql, [bugUuid], function (err, bug) {\n      if (err || !bug.length) {\n        return callback(err);\n      }\n      var isHackerRegistered = true;\n      var isHackerMapped = false;\n      if (bug[0].hacker_id == 0) {\n        //Then the hacker is not registered\n        isHackerRegistered = false;\n        commonFun.checkIfAnonymousMappingExists(\n          handlerInfo,\n          bug[0].hacker_alias,\n          bug[0].program_id,\n          function (err, hackerInfo) {\n            if (err) {\n              return callback(err);\n            }\n            if (hackerInfo.already_mapped) {\n              isHackerMapped = true;\n            }\n            bug[0].isHackerRegistered = isHackerRegistered;\n            bug[0].isHackerMapped = isHackerMapped;\n            callback(null, bug);\n          }\n        );\n      } else {\n        bug[0].isHackerRegistered = isHackerRegistered;\n        bug[0].isHackerMapped = false;\n        callback(null, bug);\n      }\n    });\n}\n\nfunction checkIfBountyExists(handlerInfo, bugUuid, bugDetails, callback) {\n  var sql =\n    'SELECT 1 FROM bugs WHERE bug_uuid = ? AND bounty_awarded IS NOT NULL';\n\n  var sqlQuery = dbHandler\n    .getInstance()\n    .executeQuery(sql, [bugUuid], function (err, select) {\n      if (err || select.length) {\n        return callback(new Error('Bounty already inserted. Cant be updated'));\n      }\n      callback(null, bugDetails);\n    });\n}\n\nfunction updateBugStatus(\n  handlerInfo,\n  bugUuid,\n  status,\n  isBountyAwarded,\n  bountyAwarded,\n  updatedBy,\n  bugDetails,\n  callback\n) {\n  var data = {\n    status: status,\n    updated_by: updatedBy,\n  };\n\n  if (isBountyAwarded) {\n    data.bounty_awarded = bountyAwarded;\n  }\n  var sql = 'UPDATE bugs SET ? WHERE bug_uuid = ?';\n\n  var sqlQuery = dbHandler\n    .getInstance()\n    .executeQuery(sql, [data, bugUuid], function (err, update) {\n      if (err) {\n        return callback(err);\n      }\n      callback(null, bugDetails);\n    });\n}\n\nfunction deleteBug(bugUuid, callback) {\n  var sql = 'DELETE from bugs WHERE bug_uuid = ?';\n\n  var sqlQuery = dbHandler\n      .getInstance()\n      .executeQuery(sql, [bugUuid], function (err, update) {\n        if (err) {\n          return callback(err);\n        }\n        callback(null);\n      });\n}\n\nfunction sendMailForBugUpdate(\n  handlerInfo,\n  alias,\n  isHackerRegistered,\n  bugDetails,\n  callback\n) {\n  getEmailIdForSendingMail(\n    handlerInfo,\n    constants.userRole.HACKER,\n    bugDetails.bug_uuid,\n    bugDetails.program_id,\n    function (err, emails) {\n      var to = isHackerRegistered ? emails[0] : [bugDetails.hacker_alias];\n\n      var bcc = isHackerRegistered ? emails[1] : emails[0];\n      bugDetails.email_id = isHackerRegistered\n        ? emails[1]\n        : bugDetails.hacker_alias;\n      console.log('to => ', to);\n      console.log('bcc => ', bcc);\n      console.log('hacker_alias => ', bugDetails.hacker_alias);\n      var opts = {\n        to: to,\n        bcc: bcc,\n        text:\n          'Hi, <br><br> Your Bug http://139.59.6.20#/hacker/bug/' +\n          bugDetails.bug_uuid +\n          ' status has been updated by ' +\n          alias +\n          '<br><br>Please login to HackerHive.io to check<br><br>',\n        subject: '[HackerHive.io] ' + ' Vulnerability status updated',\n      };\n      mailer.sendMail(opts, function (err) {\n        if (err) {\n          return callback(err);\n        }\n        callback(null, bugDetails);\n      });\n    }\n  );\n}\n\nfunction assignScore(\n  handlerInfo,\n  status,\n  score,\n  isHackerRegistered,\n  bugDetails,\n  callback\n) {\n  var sql =\n    'UPDATE hackers set points = points + ?, fixed = fixed + 1 WHERE hacker_id = ?';\n  var values = [score, bugDetails.hacker_id];\n\n  var sqlQuery = dbHandler\n    .getInstance()\n    .executeQuery(sql, values, function (err, upd) {\n      if (err) {\n        return callback(new Error('error updating score'));\n      }\n      callback(null, bugDetails);\n    });\n}\n\nfunction sendMailForBountyToHacker(\n  handlerInfo,\n  bountytohacker,\n  bugDetails,\n  callback\n) {\n  var opts = {\n    to: [bugDetails.email_id],\n    text:\n      'Hi,<br><br>You are awarded ' +\n      '<b>Rs.</b>' +\n      '<b>' +\n      bountytohacker +\n      '</b>' +\n      ' as a bounty on ' +\n      '<b>' +\n      bugDetails.bug_caption +\n      '</b>' +\n      '<br><br>Congratulations!<br><br> <b>What is next?</b><br>' +\n      'Please update your payment info on hackerhive. Your bounty will be paid within 30 days.<br><br>',\n    subject:\n      '[Security][Hackerhive.io] ' +\n      ':Bug bounty awarded on-' +\n      bugDetails.bug_caption,\n  };\n  mailer.sendMail(opts, function (err) {\n    if (err) {\n      return callback(err);\n    }\n    callback(err);\n  });\n}\n\nfunction moveToJira(req, res) {\n  var handlerInfo = {\n    apiModule: 'bugs',\n    apiHandler: 'moveToJira',\n  };\n\n  // logging.trace(handlerInfo, {headers : req.headers}, {Query : req.query});\n  var bugId = req.body.bug_uuid;\n  var authToken = req.headers.auth_token;\n  var userId = req.headers.user_id;\n\n  if (\n      commonFun.specialCharacterCheck(authToken) ||\n      commonFun.specialCharacterCheck(userId) ||\n      commonFun.specialCharacterCheck(bugId)\n  ) {\n    return responses.sendHackerJoiningResponse(handlerInfo, res);\n  }\n  authorization.validateAccessToken(handlerInfo, authToken, userId, function (\n      err,\n      user\n  ) {\n    // if (user.userRole != constants.userRole.PROGRAM_MEMBER) {\n    //   return responses.sendUnauthorizedAccessResponse(handlerInfo, res);\n    // }\n    //\n    // if (user.authLevel == constants.authLevel.USER) {\n    //   return responses.sendUnauthorizedAccessResponse(handlerInfo, res);\n    // }\n\n    var query1 = 'select * from bugs where bug_uuid=? ';\n\n    var sqlQuery = dbHandler\n        .getInstance()\n        .executeQuery(query1, [bugId], function (err, bugs) {\n          // logging.logDatabaseQuery(handlerInfo, 'Checking for data', err, select, sqlQuery.sql);\n          if (bugs == null) {\n            responses.sendSuccessResponse(handlerInfo, res, 'Null value', {});\n          } else {\n            var bug_desc = bugs[0].bug_description;\n            var steps_to_reproduce = bugs[0].steps_to_reproduce;\n            var severity = bugs[0].severity;\n            var suggested_fix = bugs[0].suggested_fix;\n            var http_request = bugs[0].http_request;\n            var bug_impact = bugs[0].bug_impact;\n            var bug_type = bugs[0].bug_type;\n            var bug_status = bugs[0].status;\n            var bug_caption = bugs[0].bug_caption;\n            var programidval = bugs[0].program_id;\n\n            var program_id_query =\n                'select * from program_members where member_uuid=? AND auth_token=?';\n            var sqlQuery_pgm_id = dbHandler\n                .getInstance()\n                .executeQuery(program_id_query, [userId, authToken], function (\n                    err,\n                    program_members\n                ) {\n                  // logging.logDatabaseQuery(handlerInfo, 'Checking for data', err, select, sqlQuery.sql);\n                  if (err) {\n                    responses.sendSuccessResponse(\n                        handlerInfo,\n                        res,\n                        ' Data Mismatched',\n                        {}\n                    );\n                  } else {\n                    var pgmidval = program_members[0].program_id;\n                    // if (pgmidval !== programidval) {\n                    //   return responses.sendUnauthorizedAccessResponse(\n                    //       handlerInfo,\n                    //       res\n                    //   );\n                    // }\n\n                    var sqlquery2 = 'select * from programs where program_id=?';\n                    var sqlQuery3 = dbHandler\n                        .getInstance()\n                        .executeQuery(sqlquery2, [pgmidval], function (err, programs) {\n                          // logging.logDatabaseQuery(handlerInfo, 'Checking for data', err, select, sqlQuery.sql);\n\n                          if (err) {\n                            responses.sendSuccessResponse(\n                                handlerInfo,\n                                res,\n                                'Data Mismatched  ' + sqlquery2 + pgmidval,\n                                {}\n                            );\n                          } else {\n                            createJiraTicket(bugs[0], program_members[0], programs[0], function (err, data) {\n                              if (err) {\n                                return responses.sendSuccessResponse(\n                                    handlerInfo,\n                                    res,\n                                    'Error while creating Jira ticket',\n                                    {}\n                                );\n                              }\n                              responses.sendSuccessResponse(\n                                  handlerInfo,\n                                  res,\n                                  'Ticket created',\n                                  {\n                                    \"ticket\": data.key\n                                  }\n                              );\n                            })\n                          }\n                        });\n                  }\n                });\n          }\n        });\n  });\n}\n\nvar createJiraTicket = function (bugDetails, userDetails, programDetails, callback) {\n  bugDetails.http_request = commonFun.escapeJson(bugDetails.http_request);\n  bugDetails.suggested_fix = commonFun.escapeJson(bugDetails.suggested_fix);\n  bugDetails.steps_to_reproduce = _.map(JSON.parse(bugDetails.steps_to_reproduce), (step) => {\n    step.data = commonFun.escapeJson(step.data);\n    return step;\n  });\n  var payload = JSON.parse(commonFun.escapeNewLine(JiraIssueTemplate({bug: bugDetails})));\n  payload.fields.project.key = programDetails.jira_project_key;\n  payload.fields.issuetype.id = programDetails.jira_issue_type;\n  var authToken = programDetails.jira_email_id + ':' + programDetails.jira_token;\n  var buff = new Buffer(authToken);\n  authToken = buff.toString('base64');\n  request.post({\n    method: 'POST',\n    uri: programDetails.jira_url + '/rest/api/3/issue',\n    body: payload,\n    headers: {\n      'Authorization': 'Basic ' + authToken\n    },\n    json: true\n  }, async function (err, res, body) {\n    if (err || !_.isEmpty(body.errorMessages) || !_.isEmpty(body.errors)) return callback(err || \"Something went wrong\");\n    var screenshots = JSON.parse(bugDetails.screenshots) || [];\n    for (var i = 0; i < screenshots.length; i++) {\n      try {\n        var fileName = await commonFun.downloadFile(screenshots[i]);\n        await rp({\n          method: 'POST',\n          uri: programDetails.jira_url + '/rest/api/3/issue/' + body.key + '/attachments',\n          formData: {\n            file: fs.createReadStream(fileName)\n          },\n          headers: {\n            'Authorization': 'Basic ' + authToken,\n            'X-Atlassian-Token': 'no-check'\n          }\n        });\n        await fs.unlinkSync(fileName);\n      } catch (e) {\n        return callback(e);\n      }\n    }\n    callback(null, body);\n  });\n}\n\nexports.listJiraProjects = async function(req, res) {\n  var handlerInfo = {\n    apiModule: 'bugs',\n    apiHandler: 'listJiraProject',\n  };\n  var instanceUrl = req.query.jira_url;\n  var emailId = req.query.jira_email_id;\n  var apiKey = req.query.jira_token;\n\n  var manvalues = [instanceUrl, emailId, apiKey];\n\n  var checkblank = commonFun.checkBlank(manvalues);\n\n  if (checkblank) {\n    return responses.sendParameterMissingResponse(handlerInfo, res);\n  }\n\n  var projects = [];\n  var start = 0;\n  var authToken = emailId + ':' + apiKey;\n  var buff = new Buffer(authToken);\n  authToken = buff.toString('base64');\n  while(true) {\n    var response =  await rp({\n      method: 'GET',\n      uri: instanceUrl + '/rest/api/2/project/search?expand=issueTypes&status=live&startAt=' + start,\n      headers: {\n        'Authorization': 'Basic ' + authToken\n      },\n      json: true\n    });\n    projects = projects.concat(response.values);\n    if (response.isLast) {\n      break;\n    }\n    start = start + 50;\n  }\n  var apiResponse = _.map(projects, (each) => {\n    return {\n      key: each.key,\n      id: each.id,\n      name: each.name,\n      link: instanceUrl + \"/browse/\" + each.key,\n      issueTypes: _.map(each.issueTypes, (type) => {\n        return {\n          id: type.id,\n          name: type.name\n        }\n      })\n    };\n  });\n  return responses.sendSuccessResponse(\n      handlerInfo,\n      res,\n      'Success',\n      apiResponse\n  );\n}\n\n/**\n * Rohit - added on 15-Dec-2016\n * This function takes out all the records of a company and sums the reward history of the company\n * till date\n */\nfunction totalreward(req, res) {\n  var handlerInfo = {\n    apiModule: 'bugs',\n    apiHandler: 'totalreward',\n  };\n\n  // logging.trace(handlerInfo, {headers : req.headers}, {BODY : req.body});\n\n  var authToken = req.headers.auth_token;\n  var userId = req.headers.user_id;\n\n  var manvalues = [authToken, userId];\n  var checkblank = commonFun.checkBlank(manvalues);\n\n  if (checkblank) {\n    return responses.sendParameterMissingResponse(handlerInfo, res);\n  }\n\n  if (\n    commonFun.specialCharacterCheck(authToken) ||\n    commonFun.specialCharacterCheck(userId)\n  ) {\n    return responses.sendHackerJoiningResponse(handlerInfo, res);\n  }\n  authorization.validateAccessToken(handlerInfo, authToken, userId, function (\n    err,\n    user\n  ) {\n    if (err) {\n      if (err.flag == constants.responseFlags.PENDING_VERIFICATION) {\n        return responses.sendPendingVerificationResponse(handlerInfo, res);\n      }\n      if (err.flag == constants.responseFlags.ACCOUNT_SUSPENDED) {\n        return responses.sendAccountSuspendedResponse(handlerInfo, res);\n      }\n      return responses.sendAuthenticationFailure(handlerInfo, res);\n    }\n    if (user.userRole != constants.userRole.PROGRAM_MEMBER) {\n      return responses.sendUnauthorizedAccessResponse(handlerInfo, res);\n    }\n\n    var tasks = [fetchTotalreward.bind(null, handlerInfo, userId)];\n\n    async.parallel(tasks, function (err, leaders) {\n      if (err) {\n        return responses.sendFailureResponse(\n          handlerInfo,\n          res,\n          'Failed to fetch total rewarded',\n          err\n        );\n      }\n      responses.sendSuccessResponse(\n        handlerInfo,\n        res,\n        'Total rewarded till date',\n        leaders[0]\n      );\n    });\n  });\n}\n\nfunction fetchTotalreward(handlerInfo, userId, callback) {\n  var sql =\n    'SELECT count (*) as total, SUM(bounty_awarded) as totalreward ' +\n    'FROM bugs b, program_members p ' +\n    'WHERE b.program_id = p.program_id AND p.program_member_id = ? AND b.bounty_awarded != \"NULL\"';\n\n  var sqlQuery = dbHandler\n    .getInstance()\n    .executeQuery(sql, [userId], function (err, leaders) {\n      // logging.logDatabaseQuery(handlerInfo, 'getting total bounty Awarded', err, leaders, sqlQuery.sql);\n      if (err) {\n        return callback(err);\n      }\n      callback(null, leaders);\n    });\n}\n\n/**\n * Rohit - added on 15-Dec-2016\n * This function takes out all the records of a company and sums the reward history of the company\n * for the current month\n */\nfunction totalRewardThisMonth(req, res) {\n  var handlerInfo = {\n    apiModule: 'bugs',\n    apiHandler: 'totalRewardThisMonth',\n  };\n\n  // logging.trace(handlerInfo, {headers : req.headers}, {BODY : req.body});\n\n  var authToken = req.headers.auth_token;\n  var userId = req.headers.user_id;\n\n  var manvalues = [authToken, userId];\n  var checkblank = commonFun.checkBlank(manvalues);\n\n  if (checkblank) {\n    return responses.sendParameterMissingResponse(handlerInfo, res);\n  }\n\n  if (\n    commonFun.specialCharacterCheck(authToken) ||\n    commonFun.specialCharacterCheck(userId)\n  ) {\n    return responses.sendHackerJoiningResponse(handlerInfo, res);\n  }\n  authorization.validateAccessToken(handlerInfo, authToken, userId, function (\n    err,\n    user\n  ) {\n    if (err) {\n      if (err.flag == constants.responseFlags.PENDING_VERIFICATION) {\n        return responses.sendPendingVerificationResponse(handlerInfo, res);\n      }\n      if (err.flag == constants.responseFlags.ACCOUNT_SUSPENDED) {\n        return responses.sendAccountSuspendedResponse(handlerInfo, res);\n      }\n      return responses.sendAuthenticationFailure(handlerInfo, res);\n    }\n    if (user.userRole != constants.userRole.PROGRAM_MEMBER) {\n      return responses.sendUnauthorizedAccessResponse(handlerInfo, res);\n    }\n\n    var tasks = [fetchtotalRewardThisMonth.bind(null, handlerInfo, userId)];\n\n    async.parallel(tasks, function (err, leaders) {\n      if (err) {\n        return responses.sendFailureResponse(\n          handlerInfo,\n          res,\n          'Failed to fetch total rewarded this month',\n          err\n        );\n      }\n      responses.sendSuccessResponse(\n        handlerInfo,\n        res,\n        'Total rewarded this month',\n        leaders[0]\n      );\n    });\n  });\n}\n\nfunction fetchtotalRewardThisMonth(handlerInfo, userId, callback) {\n  var sql =\n    'SELECT count(*) as total, SUM(bounty_awarded) as totalRewardThisMonth ' +\n    'FROM bugs b, program_members p ' +\n    'WHERE b.program_id = p.program_id AND p.program_member_id = ? AND YEAR(CURRENT_DATE()) = YEAR(b.updated_at) ' +\n    'AND MONTH(CURRENT_DATE()) = MONTH(b.updated_at) AND b.bounty_awarded != \"NULL\"';\n\n  var sqlQuery = dbHandler\n    .getInstance()\n    .executeQuery(sql, [userId], function (err, leaders) {\n      // logging.logDatabaseQuery(handlerInfo, 'getting total bounty Awarded this month', err, leaders, sqlQuery.sql);\n      if (err) {\n        return callback(err);\n      }\n      callback(null, leaders);\n    });\n}\n\n/**\n * Rohit - added on 15-Dec-2016\n * This function takes out all the records of a company with resolved bugs\n */\nfunction resolvedBugs(req, res) {\n  var handlerInfo = {\n    apiModule: 'bugs',\n    apiHandler: 'resolvedBugs',\n  };\n\n  // logging.trace(handlerInfo, {headers : req.headers}, {BODY : req.body});\n\n  var authToken = req.headers.auth_token;\n  var userId = req.headers.user_id;\n\n  var manvalues = [authToken, userId];\n  var checkblank = commonFun.checkBlank(manvalues);\n\n  if (checkblank) {\n    return responses.sendParameterMissingResponse(handlerInfo, res);\n  }\n\n  if (\n    commonFun.specialCharacterCheck(authToken) ||\n    commonFun.specialCharacterCheck(userId)\n  ) {\n    return responses.sendHackerJoiningResponse(handlerInfo, res);\n  }\n  authorization.validateAccessToken(handlerInfo, authToken, userId, function (\n    err,\n    user\n  ) {\n    if (err) {\n      if (err.flag == constants.responseFlags.PENDING_VERIFICATION) {\n        return responses.sendPendingVerificationResponse(handlerInfo, res);\n      }\n      if (err.flag == constants.responseFlags.ACCOUNT_SUSPENDED) {\n        return responses.sendAccountSuspendedResponse(handlerInfo, res);\n      }\n      return responses.sendAuthenticationFailure(handlerInfo, res);\n    }\n    if (user.userRole != constants.userRole.PROGRAM_MEMBER) {\n      return responses.sendUnauthorizedAccessResponse(handlerInfo, res);\n    }\n\n    var tasks = [fetchResolvedBugs.bind(null, handlerInfo, userId)];\n\n    async.parallel(tasks, function (err, leaders) {\n      if (err) {\n        return responses.sendFailureResponse(\n          handlerInfo,\n          res,\n          'Failed to fetch resolved bugs',\n          err\n        );\n      }\n      responses.sendSuccessResponse(\n        handlerInfo,\n        res,\n        'resolved bugs',\n        leaders[0]\n      );\n    });\n  });\n}\n\nfunction fetchResolvedBugs(handlerInfo, userId, callback) {\n  var sql =\n    'SELECT count(*) as total ' +\n    'FROM bugs b, program_members p ' +\n    'WHERE b.program_id = p.program_id AND p.program_member_id = ? AND b.status = \"RESOLVED\"';\n\n  var sqlQuery = dbHandler\n    .getInstance()\n    .executeQuery(sql, [userId], function (err, leaders) {\n      // logging.logDatabaseQuery(handlerInfo, 'getting resolved bugs', err, leaders, sqlQuery.sql);\n      if (err) {\n        return callback(err);\n      }\n      callback(null, leaders);\n    });\n}\n\n/**\n * Rohit - added on 15-Dec-2016\n * This function takes out all the records of a company with active bugs\n */\nfunction activeBugs(req, res) {\n  var handlerInfo = {\n    apiModule: 'bugs',\n    apiHandler: 'activeBugs',\n  };\n\n  // logging.trace(handlerInfo, {headers : req.headers}, {BODY : req.body});\n\n  var authToken = req.headers.auth_token;\n  var userId = req.headers.user_id;\n\n  var manvalues = [authToken, userId];\n  var checkblank = commonFun.checkBlank(manvalues);\n\n  if (checkblank) {\n    return responses.sendParameterMissingResponse(handlerInfo, res);\n  }\n\n  if (\n    commonFun.specialCharacterCheck(authToken) ||\n    commonFun.specialCharacterCheck(userId)\n  ) {\n    return responses.sendHackerJoiningResponse(handlerInfo, res);\n  }\n  authorization.validateAccessToken(handlerInfo, authToken, userId, function (\n    err,\n    user\n  ) {\n    if (err) {\n      if (err.flag == constants.responseFlags.PENDING_VERIFICATION) {\n        return responses.sendPendingVerificationResponse(handlerInfo, res);\n      }\n      if (err.flag == constants.responseFlags.ACCOUNT_SUSPENDED) {\n        return responses.sendAccountSuspendedResponse(handlerInfo, res);\n      }\n      return responses.sendAuthenticationFailure(handlerInfo, res);\n    }\n    if (user.userRole != constants.userRole.PROGRAM_MEMBER) {\n      return responses.sendUnauthorizedAccessResponse(handlerInfo, res);\n    }\n\n    var tasks = [fetchActiveBugs.bind(null, handlerInfo, userId)];\n\n    async.parallel(tasks, function (err, leaders) {\n      if (err) {\n        return responses.sendFailureResponse(\n          handlerInfo,\n          res,\n          'Failed to fetch open bugs',\n          err\n        );\n      }\n      responses.sendSuccessResponse(handlerInfo, res, 'open bugs', leaders[0]);\n    });\n  });\n}\n\nfunction fetchActiveBugs(handlerInfo, userId, callback) {\n  var sql =\n    'SELECT count(*) as total ' +\n    'FROM bugs b, program_members p ' +\n    'WHERE b.program_id = p.program_id AND p.program_member_id = ? AND b.status = \"OPEN\"';\n\n  var sqlQuery = dbHandler\n    .getInstance()\n    .executeQuery(sql, [userId], function (err, leaders) {\n      // logging.logDatabaseQuery(handlerInfo, 'getting open bugs', err, leaders, sqlQuery.sql);\n      if (err) {\n        return callback(err);\n      }\n      callback(null, leaders);\n    });\n}\n\n/**\n * Rohit - added on 15-Dec-2016\n * This function takes out all the records of a company with awarded bugs\n */\nfunction totalAwardedBugs(req, res) {\n  var handlerInfo = {\n    apiModule: 'bugs',\n    apiHandler: 'totalAwardedBugs',\n  };\n\n  // logging.trace(handlerInfo, {headers : req.headers}, {BODY : req.body});\n\n  var authToken = req.headers.auth_token;\n  var userId = req.headers.user_id;\n\n  var manvalues = [authToken, userId];\n  var checkblank = commonFun.checkBlank(manvalues);\n\n  if (checkblank) {\n    return responses.sendParameterMissingResponse(handlerInfo, res);\n  }\n\n  if (\n    commonFun.specialCharacterCheck(authToken) ||\n    commonFun.specialCharacterCheck(userId)\n  ) {\n    return responses.sendHackerJoiningResponse(handlerInfo, res);\n  }\n  authorization.validateAccessToken(handlerInfo, authToken, userId, function (\n    err,\n    user\n  ) {\n    if (err) {\n      if (err.flag == constants.responseFlags.PENDING_VERIFICATION) {\n        return responses.sendPendingVerificationResponse(handlerInfo, res);\n      }\n      if (err.flag == constants.responseFlags.ACCOUNT_SUSPENDED) {\n        return responses.sendAccountSuspendedResponse(handlerInfo, res);\n      }\n      return responses.sendAuthenticationFailure(handlerInfo, res);\n    }\n    if (user.userRole != constants.userRole.PROGRAM_MEMBER) {\n      return responses.sendUnauthorizedAccessResponse(handlerInfo, res);\n    }\n\n    var tasks = [fetchAwardedBugs.bind(null, handlerInfo, userId)];\n\n    async.parallel(tasks, function (err, leaders) {\n      if (err) {\n        return responses.sendFailureResponse(\n          handlerInfo,\n          res,\n          'Failed to fetch awarded bugs',\n          err\n        );\n      }\n      responses.sendSuccessResponse(\n        handlerInfo,\n        res,\n        'awarded bugs',\n        leaders[0]\n      );\n    });\n  });\n}\n\nfunction fetchAwardedBugs(handlerInfo, userId, callback) {\n  var sql =\n    'SELECT count(*) as total ' +\n    'FROM bugs b, program_members p ' +\n    'WHERE b.program_id = p.program_id AND p.program_member_id = ? AND b.bounty_awarded != \"NULL\"';\n\n  var sqlQuery = dbHandler\n    .getInstance()\n    .executeQuery(sql, [userId], function (err, leaders) {\n      // logging.logDatabaseQuery(handlerInfo, 'getting awarded bugs', err, leaders, sqlQuery.sql);\n      if (err) {\n        return callback(err);\n      }\n      callback(null, leaders);\n    });\n}\n\n/**\n * Rohit - added on 15-Dec-2016\n * This function takes out all the records of a company with closed bugs\n */\nfunction totalClosedBugs(req, res) {\n  var handlerInfo = {\n    apiModule: 'bugs',\n    apiHandler: 'totalClosedBugs',\n  };\n\n  // logging.trace(handlerInfo, {headers : req.headers}, {BODY : req.body});\n\n  var authToken = req.headers.auth_token;\n  var userId = req.headers.user_id;\n\n  var manvalues = [authToken, userId];\n  var checkblank = commonFun.checkBlank(manvalues);\n\n  if (checkblank) {\n    return responses.sendParameterMissingResponse(handlerInfo, res);\n  }\n\n  if (\n    commonFun.specialCharacterCheck(authToken) ||\n    commonFun.specialCharacterCheck(userId)\n  ) {\n    return responses.sendHackerJoiningResponse(handlerInfo, res);\n  }\n  authorization.validateAccessToken(handlerInfo, authToken, userId, function (\n    err,\n    user\n  ) {\n    if (err) {\n      if (err.flag == constants.responseFlags.PENDING_VERIFICATION) {\n        return responses.sendPendingVerificationResponse(handlerInfo, res);\n      }\n      if (err.flag == constants.responseFlags.ACCOUNT_SUSPENDED) {\n        return responses.sendAccountSuspendedResponse(handlerInfo, res);\n      }\n      return responses.sendAuthenticationFailure(handlerInfo, res);\n    }\n    if (user.userRole != constants.userRole.PROGRAM_MEMBER) {\n      return responses.sendUnauthorizedAccessResponse(handlerInfo, res);\n    }\n\n    var tasks = [fetchClosedBugs.bind(null, handlerInfo, userId)];\n\n    async.parallel(tasks, function (err, leaders) {\n      if (err) {\n        return responses.sendFailureResponse(\n          handlerInfo,\n          res,\n          'Failed to fetch closed bugs',\n          err\n        );\n      }\n      responses.sendSuccessResponse(\n        handlerInfo,\n        res,\n        'closed bugs',\n        leaders[0]\n      );\n    });\n  });\n}\n\nfunction fetchClosedBugs(handlerInfo, userId, callback) {\n  var sql =\n    'SELECT count(*) as total ' +\n    'FROM bugs b, program_members p ' +\n    'WHERE b.program_id = p.program_id AND p.program_member_id = ? AND b.status = \"CLOSED\"';\n\n  var sqlQuery = dbHandler\n    .getInstance()\n    .executeQuery(sql, [userId], function (err, leaders) {\n      // logging.logDatabaseQuery(handlerInfo, 'getting closed bugs', err, leaders, sqlQuery.sql);\n      if (err) {\n        return callback(err);\n      }\n      callback(null, leaders);\n    });\n}\n\n/**\n * Rohit - added on 28-Dec-2016\n * This function takes out all the records of a company with triaged bugs\n */\nfunction totalTriagedBugs(req, res) {\n  var handlerInfo = {\n    apiModule: 'bugs',\n    apiHandler: 'totalTriagedBugs',\n  };\n\n  // logging.trace(handlerInfo, {headers : req.headers}, {BODY : req.body});\n\n  var authToken = req.headers.auth_token;\n  var userId = req.headers.user_id;\n\n  var manvalues = [authToken, userId];\n  var checkblank = commonFun.checkBlank(manvalues);\n\n  if (checkblank) {\n    return responses.sendParameterMissingResponse(handlerInfo, res);\n  }\n\n  if (\n    commonFun.specialCharacterCheck(authToken) ||\n    commonFun.specialCharacterCheck(userId)\n  ) {\n    return responses.sendHackerJoiningResponse(handlerInfo, res);\n  }\n  authorization.validateAccessToken(handlerInfo, authToken, userId, function (\n    err,\n    user\n  ) {\n    if (err) {\n      if (err.flag == constants.responseFlags.PENDING_VERIFICATION) {\n        return responses.sendPendingVerificationResponse(handlerInfo, res);\n      }\n      if (err.flag == constants.responseFlags.ACCOUNT_SUSPENDED) {\n        return responses.sendAccountSuspendedResponse(handlerInfo, res);\n      }\n      return responses.sendAuthenticationFailure(handlerInfo, res);\n    }\n    if (user.userRole != constants.userRole.PROGRAM_MEMBER) {\n      return responses.sendUnauthorizedAccessResponse(handlerInfo, res);\n    }\n\n    var tasks = [fetchTriagedBugs.bind(null, handlerInfo, userId)];\n\n    async.parallel(tasks, function (err, leaders) {\n      if (err) {\n        return responses.sendFailureResponse(\n          handlerInfo,\n          res,\n          'Failed to fetch triaged bugs',\n          err\n        );\n      }\n      responses.sendSuccessResponse(\n        handlerInfo,\n        res,\n        'triaged bugs',\n        leaders[0]\n      );\n    });\n  });\n}\n\nfunction fetchTriagedBugs(handlerInfo, userId, callback) {\n  var sql =\n    'SELECT count(*) as total ' +\n    'FROM bugs b, program_members p ' +\n    'WHERE b.program_id = p.program_id AND p.program_member_id = ? AND b.status = \"TRIAGED\"';\n\n  var sqlQuery = dbHandler\n    .getInstance()\n    .executeQuery(sql, [userId], function (err, leaders) {\n      // logging.logDatabaseQuery(handlerInfo, 'getting triaged bugs', err, leaders, sqlQuery.sql);\n      if (err) {\n        return callback(err);\n      }\n      callback(null, leaders);\n    });\n}\n\n/**\n * Rohit - added on 28-Dec-2016\n * This function takes out all the records of a top awarded bug\n */\nfunction topAwardedBug(req, res) {\n  var handlerInfo = {\n    apiModule: 'bugs',\n    apiHandler: 'topAwardedBug',\n  };\n\n  // logging.trace(handlerInfo, {headers : req.headers}, {BODY : req.body});\n\n  var authToken = req.headers.auth_token;\n  var userId = req.headers.user_id;\n\n  var manvalues = [authToken, userId];\n  var checkblank = commonFun.checkBlank(manvalues);\n\n  if (checkblank) {\n    return responses.sendParameterMissingResponse(handlerInfo, res);\n  }\n\n  if (\n    commonFun.specialCharacterCheck(authToken) ||\n    commonFun.specialCharacterCheck(userId)\n  ) {\n    return responses.sendHackerJoiningResponse(handlerInfo, res);\n  }\n  authorization.validateAccessToken(handlerInfo, authToken, userId, function (\n    err,\n    user\n  ) {\n    if (err) {\n      if (err.flag == constants.responseFlags.PENDING_VERIFICATION) {\n        return responses.sendPendingVerificationResponse(handlerInfo, res);\n      }\n      if (err.flag == constants.responseFlags.ACCOUNT_SUSPENDED) {\n        return responses.sendAccountSuspendedResponse(handlerInfo, res);\n      }\n      return responses.sendAuthenticationFailure(handlerInfo, res);\n    }\n    if (user.userRole != constants.userRole.PROGRAM_MEMBER) {\n      return responses.sendUnauthorizedAccessResponse(handlerInfo, res);\n    }\n\n    var tasks = [fetchTopAwardedBug.bind(null, handlerInfo, userId)];\n\n    async.parallel(tasks, function (err, leaders) {\n      if (err) {\n        return responses.sendFailureResponse(\n          handlerInfo,\n          res,\n          'Failed to fetch top awarded bug',\n          err\n        );\n      }\n      responses.sendSuccessResponse(\n        handlerInfo,\n        res,\n        'top awarded bug',\n        leaders[0]\n      );\n    });\n  });\n}\n\nfunction fetchTopAwardedBug(handlerInfo, userId, callback) {\n  var sql =\n    'SELECT MAX(b.bounty_awarded) as awardedBounty, b.created_by ' +\n    'FROM bugs b, program_members p ' +\n    'WHERE b.program_id = p.program_id AND p.program_member_id = ? AND b.bounty_awarded != \"NULL\"';\n\n  var sqlQuery = dbHandler\n    .getInstance()\n    .executeQuery(sql, [userId], function (err, leaders) {\n      // logging.logDatabaseQuery(handlerInfo, 'top awarded bug', err, leaders, sqlQuery.sql);\n      if (err) {\n        return callback(err);\n      }\n      callback(null, leaders);\n    });\n}\n\n/**\n * Rohit - added on 20-Feb-2016\n * This function takes out all the users related to a bug\n */\nfunction relatedUsersWithBug(req, res) {\n  var handlerInfo = {\n    apiModule: 'bugs',\n    apiHandler: 'relatedUsersWithBug',\n  };\n\n  // logging.trace(handlerInfo, {headers : req.headers}, {BODY : req.body});\n\n  var authToken = req.headers.auth_token;\n  var userId = req.headers.user_id;\n  var bugUuid = req.query.bug_uuid;\n\n  var manvalues = [authToken, userId, bugUuid];\n  var checkblank = commonFun.checkBlank(manvalues);\n  if (checkblank) {\n    return responses.sendParameterMissingResponse(handlerInfo, res);\n  }\n\n  if (\n    commonFun.specialCharacterCheck(authToken) ||\n    commonFun.specialCharacterCheck(userId)\n  ) {\n    return responses.sendHackerJoiningResponse(handlerInfo, res);\n  }\n  authorization.validateAccessToken(handlerInfo, authToken, userId, function (\n    err,\n    user\n  ) {\n    if (err) {\n      if (err.flag == constants.responseFlags.PENDING_VERIFICATION) {\n        return responses.sendPendingVerificationResponse(handlerInfo, res);\n      }\n      if (err.flag == constants.responseFlags.ACCOUNT_SUSPENDED) {\n        return responses.sendAccountSuspendedResponse(handlerInfo, res);\n      }\n      return responses.sendAuthenticationFailure(handlerInfo, res);\n    }\n\n    var sql =\n      'SELECT program_id, hacker_id, created_by FROM bugs WHERE bug_uuid = ?';\n\n    var sqlQuery = dbHandler\n      .getInstance()\n      .executeQuery(sql, [bugUuid], function (err, results) {\n        // logging.logDatabaseQuery(handlerInfo, 'related users of a bug', err, results, sqlQuery.sql);\n        if (err) {\n          return callback(err);\n        }\n        var usersList = [];\n        var hackerId = results[0].hacker_id;\n        var programId = results[0].program_id;\n        var tasks = [];\n        if (results[0].hacker_id == 0) {\n          tasks.push(\n            getMemberAlias.bind(null, handlerInfo, programId, usersList)\n          );\n        } else {\n          tasks.push(\n            getHackerAlias.bind(null, handlerInfo, hackerId, usersList)\n          );\n          tasks.push(\n            getMemberAlias.bind(null, handlerInfo, programId, usersList)\n          );\n        }\n        async.series(tasks, function (err) {\n          if (err) {\n            return responses.sendFailureResponse(\n              handlerInfo,\n              res,\n              'Failed to fetch related users of a bug',\n              err\n            );\n          }\n          responses.sendSuccessResponse(\n            handlerInfo,\n            res,\n            'related users of a bug',\n            usersList\n          );\n        });\n      });\n  });\n}\n\nfunction getHackerAlias(handlerInfo, hackerId, usersList, callback) {\n  var sql =\n    'SELECT alias FROM hackers WHERE hacker_id = ? and status = \"ACTIVE\"';\n\n  var sqlQuery = dbHandler\n    .getInstance()\n    .executeQuery(sql, [hackerId], function (err, results) {\n      // logging.logDatabaseQuery(handlerInfo, 'related hacker(s) of a bug', err, results, sqlQuery.sql);\n      if (err) {\n        return callback(err);\n      }\n      for (var i in results) {\n        usersList.push(results[i].alias);\n      }\n      callback(null, usersList);\n    });\n}\n\nfunction getMemberAlias(handlerInfo, programId, usersList, callback) {\n  var sql =\n    'SELECT alias FROM program_members WHERE program_id = ? and status = \"ACTIVE\"';\n\n  var sqlQuery = dbHandler\n    .getInstance()\n    .executeQuery(sql, [programId], function (err, results) {\n      // logging.logDatabaseQuery(handlerInfo, 'related member(s) of a bug', err, results, sqlQuery.sql);\n      if (err) {\n        return callback(err);\n      }\n      for (var i in results) {\n        usersList.push(results[i].alias);\n      }\n      callback(null, usersList);\n    });\n}\n\nfunction changeCommentStatus(req, res) {\n  var handlerInfo = {\n    apiModule: 'bugs',\n    apiHandler: 'changeCommentStatus',\n  };\n\n  // logging.trace(handlerInfo, {request : req.headers});\n\n  var authToken = req.headers.auth_token;\n  var userId = req.headers.user_id;\n  var bugUuid = req.query.bug_uuid;\n  var status = parseInt(req.query.status);\n  var commentUuid = req.query.comment_uuid;\n\n  var manvalues = [authToken, userId, bugUuid, status, commentUuid];\n  var checkblank = commonFun.checkBlank(manvalues);\n\n  if (checkblank || !bugUuid) {\n    return responses.sendParameterMissingResponse(handlerInfo, res);\n  }\n  if (status != 1) {\n    return responses.sendFailureResponse(\n      handlerInfo,\n      res,\n      'Status nto acceptable'\n    );\n  }\n\n  if (\n    commonFun.specialCharacterCheck(authToken) ||\n    commonFun.specialCharacterCheck(userId) ||\n    commonFun.specialCharacterCheck(bugUuid) ||\n    commonFun.specialCharacterCheck(commentUuid)\n  ) {\n    return responses.sendHackerJoiningResponse(handlerInfo, res);\n  }\n  authorization.validateAccessToken(handlerInfo, authToken, userId, function (\n    err,\n    user\n  ) {\n    if (err) {\n      if (err.flag == constants.responseFlags.PENDING_VERIFICATION) {\n        return responses.sendPendingVerificationResponse(handlerInfo, res);\n      }\n      if (err.flag == constants.responseFlags.ACCOUNT_SUSPENDED) {\n        return responses.sendAccountSuspendedResponse(handlerInfo, res);\n      }\n      return responses.sendAuthenticationFailure(handlerInfo, res);\n    }\n\n    var userType =\n      user.userRole == constants.userRole.PROGRAM_MEMBER\n        ? constants.userRole.HACKER\n        : constants.userRole.PROGRAM_MEMBER;\n\n    var tasks = [\n      checkIfBugExistsForUser.bind(\n        null,\n        handlerInfo,\n        user.details,\n        user.userRole,\n        bugUuid\n      ),\n      markCommentRead.bind(null, handlerInfo, status, commentUuid),\n    ];\n\n    async.series(tasks, function (err, comments) {\n      if (err) {\n        if (err.flag == constants.responseFlags.UNAUTHORIZED_ACCESS) {\n          return responses.sendUnauthorizedAccessResponse(handlerInfo, res);\n        }\n        return responses.sendFailureResponse(\n          handlerInfo,\n          res,\n          'Failed to change comment status ',\n          err\n        );\n      }\n      responses.sendSuccessResponse(\n        handlerInfo,\n        res,\n        'status successfully changed ',\n        {}\n      );\n    });\n  });\n}\n\nfunction markCommentRead(handlerInfo, status, commentUuid, callback) {\n  var query =\n    'UPDATE comments set is_read = ? where is_read = 0 AND user_role = ? AND comment_uuid = ?';\n  var execQuery = dbHandler\n    .getInstance()\n    .executeQuery(query, [status, commentUuid], function (err, comment) {\n      if (err) {\n        return callback(err);\n      }\n      callback();\n    });\n}\n\nfunction reportAnonymousBug(req, res) {\n  var handlerInfo = {\n    apiModule: 'bugs',\n    apiHandler: 'reportAnonymousBug',\n  };\n\n  var program_handle = req.query.program_handle;\n  var bug_caption = req.body.bug_caption;\n  var bug_description = req.body.bug_description;\n  var steps_to_reproduce = req.body.steps_to_reproduce;\n  var severity = xss(req.body.severity);\n  var cvss_score = xss(req.body.cvss_score);\n  var cvss_vector = xss(req.body.cvss_vector);\n  var screenshots = req.body.screenshots\n    ? JSON.stringify(req.body.screenshots)\n    : '[]';\n  var suggested_fix = xss(req.body.suggested_fix);\n  var http_request = xss(req.body.http_request);\n  var bug_impact = xss(req.body.bug_impact);\n  var bug_type = xss(req.body.bug_type);\n  var hacker_email_id = xss(req.body.email_id);\n  var agree_to_terms = xss(req.body.agree_to_terms) ? 1 : 0;\n\n  var manvalues = [\n    program_handle,\n    bug_caption,\n    bug_description,\n    steps_to_reproduce,\n    severity,\n    suggested_fix,\n    http_request,\n    bug_impact,\n    bug_type,\n    agree_to_terms,\n    hacker_email_id,\n  ];\n  var checkblank = commonFun.checkBlank(manvalues);\n\n  if (checkblank) {\n    return responses.sendParameterMissingResponse(handlerInfo, res);\n  }\n\n  if (\n    commonFun.specialCharacterCheck(program_handle) ||\n    !commonFun.emailFormatCheck(hacker_email_id)\n  ) {\n    return responses.sendHackerJoiningResponse(handlerInfo, res);\n  }\n\n  if (!agree_to_terms) {\n    return responses.sendAgreeToTermsResponse(handlerInfo, res);\n  }\n\n  commonFun.getUserByEmailId(handlerInfo, hacker_email_id, function (\n    err,\n    user\n  ) {\n    var tasks = [];\n    var hackerId = 0;\n    var alias = '';\n    tasks.push(\n      programs.getProgramIdByHandle.bind(null, handlerInfo, program_handle)\n    );\n    if (err) {\n      if (err.flag == constants.responseFlags.ACCOUNT_SUSPENDED) {\n        return responses.sendAccountSuspendedResponse(handlerInfo, res);\n      } else {\n        /**\n         * Check can be added to see if its a public program or private\n         * Case 1: when hacker is not part of hackerhive then add hacker to the database\n         * our table requires data to be filled by hacker only, since we do not have much data\n         * Hence its better to send the hacker an email to register with details,\n         * add the member to newmember table.. and then send the invite to join\n         */\n        hackerId = 0;\n        alias = hacker_email_id;\n        tasks.push(\n          hackers.addAnonymousHacker.bind(null, handlerInfo, hacker_email_id)\n        );\n        tasks.push(\n          createAnonymousMapping.bind(null, handlerInfo, hacker_email_id)\n        );\n        tasks.push(\n          insertBug.bind(\n            null,\n            handlerInfo,\n            hackerId,\n            bug_caption,\n            bug_description,\n            steps_to_reproduce,\n            severity,\n            cvss_score,\n            cvss_vector,\n            screenshots,\n            suggested_fix,\n            http_request,\n            bug_impact,\n            bug_type,\n            alias,\n            'https://res.cloudinary.com/dq1fr3elj/image/upload/v1517394082/members/default_profile_image.png',\n            1\n          )\n        );\n        tasks.push(\n          sendMailForCreatedBug.bind(\n            null,\n            handlerInfo,\n            alias,\n            hacker_email_id,\n            bug_caption\n          )\n        );\n\n        async.waterfall(tasks, function (err, data) {\n          if (err) {\n            return responses.sendFailureResponse(\n              handlerInfo,\n              res,\n              'Failed to post the bug',\n              err\n            );\n          }\n          responses.sendSuccessResponse(\n            handlerInfo,\n            res,\n            'You have successfully posted the bug',\n            err\n          );\n        });\n      }\n    } else {\n      /**\n       * Case 2: when reporter is a part of hackerhive, either as Hacker or Program Member\n       * then dont allow reporter to post bug for now\n       */\n\n      return responses.sendFailureResponse(\n        handlerInfo,\n        res,\n        'You can post the bug by going to hackerhive'\n      );\n      //if(user.userRole === constants.userRole.PROGRAM_MEMBER) {\n      //    return responses.sendFailureResponse(handlerInfo, res, \"Failed to post the bug :\");\n      //}\n      //if(user.userRole === constants.userRole.HACKER) {\n      //    return responses.sendFailureResponse(handlerInfo, res, \"Failed to post the bug :\");\n      //}\n    }\n  });\n}\nfunction createAnonymousMapping(handlerInfo, emailId, programId, callback) {\n  var getPrograms =\n    'SELECT 1  ' +\n    'FROM anonymous_hacker_program_mapping ' +\n    'WHERE reporter_email_id = ? ' +\n    'AND program_id = ?';\n\n  var getProgramsQuery = dbHandler\n    .getInstance()\n    .executeQuery(getPrograms, [emailId, programId], function (err, programs) {\n      if (err) {\n        return callback(err);\n      }\n      if (!programs.length) {\n        var setMapping1 =\n          'INSERT into anonymous_hacker_program_mapping ' +\n          '(reporter_email_id, program_id, status) VALUES (?, ?, ?)';\n\n        var setMappingQuery1 = dbHandler\n          .getInstance()\n          .executeQuery(setMapping1, [emailId, programId, 'ACTIVE'], function (\n            err1,\n            programs1\n          ) {\n            if (err1) {\n              return callback(\n                new Error(\n                  'Failed to create relation between hacker and the program'\n                )\n              );\n            }\n            return callback(null, programId);\n          });\n      } else {\n        return callback(null, programId);\n      }\n    });\n}\n","size_bytes":124266},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 100%;\n\n  --foreground: 222 84% 5%;\n\n  --border: 215 16% 87%;\n\n  --card: 210 40% 98%;\n\n  --card-foreground: 222 84% 5%;\n\n  --card-border: 215 16% 92%;\n\n  --sidebar: 210 40% 96%;\n\n  --sidebar-foreground: 222 84% 5%;\n\n  --sidebar-border: 215 16% 89%;\n\n  --sidebar-primary: 219 91% 45%;\n\n  --sidebar-primary-foreground: 210 40% 98%;\n\n  --sidebar-accent: 215 25% 88%;\n\n  --sidebar-accent-foreground: 222 84% 5%;\n\n  --sidebar-ring: 219 91% 45%;\n\n  --popover: 210 40% 95%;\n\n  --popover-foreground: 222 84% 5%;\n\n  --popover-border: 215 16% 85%;\n\n  --primary: 219 91% 45%;\n\n  --primary-foreground: 210 40% 98%;\n\n  --secondary: 215 25% 90%;\n\n  --secondary-foreground: 222 84% 5%;\n\n  --muted: 215 16% 92%;\n\n  --muted-foreground: 215 25% 35%;\n\n  --accent: 215 25% 88%;\n\n  --accent-foreground: 222 84% 5%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 215 16% 75%;\n  --ring: 219 91% 45%;\n  --chart-1: 219 91% 35%;\n  --chart-2: 142 76% 30%;\n  --chart-3: 25 95% 40%;\n  --chart-4: 45 93% 35%;\n  --chart-5: 280 70% 40%;\n\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: JetBrains Mono, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 2px 0px 0px hsl(215 16% 75% / 0.05);\n  --shadow-xs: 0px 2px 0px 0px hsl(215 16% 75% / 0.05);\n  --shadow-sm: 0px 2px 0px 0px hsl(215 16% 75% / 0.05), 0px 1px 2px -1px hsl(215 16% 75% / 0.10);\n  --shadow: 0px 2px 0px 0px hsl(215 16% 75% / 0.05), 0px 1px 2px -1px hsl(215 16% 75% / 0.10);\n  --shadow-md: 0px 2px 0px 0px hsl(215 16% 75% / 0.05), 0px 2px 4px -1px hsl(215 16% 75% / 0.10);\n  --shadow-lg: 0px 2px 0px 0px hsl(215 16% 75% / 0.05), 0px 4px 6px -1px hsl(215 16% 75% / 0.10);\n  --shadow-xl: 0px 2px 0px 0px hsl(215 16% 75% / 0.05), 0px 8px 10px -1px hsl(215 16% 75% / 0.10);\n  --shadow-2xl: 0px 2px 0px 0px hsl(215 16% 75% / 0.05);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 222 84% 5%;\n\n  --foreground: 210 40% 98%;\n\n  --border: 217 33% 15%;\n\n  --card: 217 33% 17%;\n\n  --card-foreground: 210 40% 98%;\n\n  --card-border: 217 33% 20%;\n\n  --sidebar: 217 33% 14%;\n\n  --sidebar-foreground: 210 40% 98%;\n\n  --sidebar-border: 217 33% 18%;\n\n  --sidebar-primary: 219 91% 60%;\n\n  --sidebar-primary-foreground: 210 40% 98%;\n\n  --sidebar-accent: 217 33% 19%;\n\n  --sidebar-accent-foreground: 210 40% 98%;\n\n  --sidebar-ring: 219 91% 60%;\n\n  --popover: 217 33% 20%;\n\n  --popover-foreground: 210 40% 98%;\n\n  --popover-border: 217 33% 25%;\n\n  --primary: 219 91% 60%;\n\n  --primary-foreground: 210 40% 98%;\n\n  --secondary: 217 33% 22%;\n\n  --secondary-foreground: 210 40% 98%;\n\n  --muted: 217 33% 16%;\n\n  --muted-foreground: 215 25% 70%;\n\n  --accent: 217 33% 18%;\n\n  --accent-foreground: 210 40% 98%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 217 33% 30%;\n  --ring: 219 91% 60%;\n  --chart-1: 219 91% 70%;\n  --chart-2: 142 76% 65%;\n  --chart-3: 25 95% 65%;\n  --chart-4: 45 93% 65%;\n  --chart-5: 280 70% 65%;\n\n  --shadow-2xs: 0px 2px 0px 0px hsl(222 84% 2% / 0.30);\n  --shadow-xs: 0px 2px 0px 0px hsl(222 84% 2% / 0.30);\n  --shadow-sm: 0px 2px 0px 0px hsl(222 84% 2% / 0.30), 0px 1px 2px -1px hsl(222 84% 2% / 0.40);\n  --shadow: 0px 2px 0px 0px hsl(222 84% 2% / 0.30), 0px 1px 2px -1px hsl(222 84% 2% / 0.40);\n  --shadow-md: 0px 2px 0px 0px hsl(222 84% 2% / 0.30), 0px 2px 4px -1px hsl(222 84% 2% / 0.40);\n  --shadow-lg: 0px 2px 0px 0px hsl(222 84% 2% / 0.30), 0px 4px 6px -1px hsl(222 84% 2% / 0.40);\n  --shadow-xl: 0px 2px 0px 0px hsl(222 84% 2% / 0.30), 0px 8px 10px -1px hsl(222 84% 2% / 0.40);\n  --shadow-2xl: 0px 2px 0px 0px hsl(222 84% 2% / 0.30);\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":10793},"client/src/components/SeverityBadge.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\nimport { cn } from \"@/lib/utils\";\n\ntype Severity = \"critical\" | \"high\" | \"medium\" | \"low\" | \"informational\";\n\ninterface SeverityBadgeProps {\n  severity: Severity;\n  className?: string;\n}\n\nconst severityConfig = {\n  critical: {\n    label: \"Critical\",\n    className: \"bg-red-100 text-red-800 border-red-200 dark:bg-red-900/20 dark:text-red-400 dark:border-red-800\",\n  },\n  high: {\n    label: \"High\",\n    className: \"bg-orange-100 text-orange-800 border-orange-200 dark:bg-orange-900/20 dark:text-orange-400 dark:border-orange-800\",\n  },\n  medium: {\n    label: \"Medium\",\n    className: \"bg-yellow-100 text-yellow-800 border-yellow-200 dark:bg-yellow-900/20 dark:text-yellow-400 dark:border-yellow-800\",\n  },\n  low: {\n    label: \"Low\",\n    className: \"bg-green-100 text-green-800 border-green-200 dark:bg-green-900/20 dark:text-green-400 dark:border-green-800\",\n  },\n  informational: {\n    label: \"Info\",\n    className: \"bg-blue-100 text-blue-800 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\",\n  },\n};\n\nexport function SeverityBadge({ severity, className }: SeverityBadgeProps) {\n  const config = severityConfig[severity];\n  \n  return (\n    <Badge \n      variant=\"outline\" \n      className={cn(config.className, className)}\n      data-testid={`badge-severity-${severity}`}\n    >\n      {config.label}\n    </Badge>\n  );\n}","size_bytes":1393},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/examples/StatusBadge.tsx":{"content":"import { StatusBadge } from '../StatusBadge'\n\nexport default function StatusBadgeExample() {\n  return (\n    <div className=\"space-y-4\">\n      <div>\n        <h4 className=\"text-sm font-medium mb-2\">Finding Statuses</h4>\n        <div className=\"flex gap-2 flex-wrap\">\n          <StatusBadge status=\"draft\" />\n          <StatusBadge status=\"submitted\" />\n          <StatusBadge status=\"company_review\" />\n          <StatusBadge status=\"remediation_in_progress\" />\n          <StatusBadge status=\"ready_for_retest\" />\n          <StatusBadge status=\"verified_fixed\" />\n          <StatusBadge status=\"risk_accepted\" />\n          <StatusBadge status=\"closed\" />\n        </div>\n      </div>\n      <div>\n        <h4 className=\"text-sm font-medium mb-2\">Project Statuses</h4>\n        <div className=\"flex gap-2 flex-wrap\">\n          <StatusBadge status=\"planned\" />\n          <StatusBadge status=\"in_progress\" />\n          <StatusBadge status=\"complete\" />\n        </div>\n      </div>\n    </div>\n  )\n}","size_bytes":990},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/pages/FindingDetail.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useRoute, Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { ArrowLeft, Save, X, MessageSquare, Clock, User, Calendar, Building } from \"lucide-react\";\nimport { SeverityBadge } from \"@/components/SeverityBadge\";\nimport { StatusBadge } from \"@/components/StatusBadge\";\nimport { CVSSCalculator } from \"@/components/CVSSCalculator\";\nimport { RichTextEditor } from \"@/components/RichTextEditor\";\nimport { format } from \"date-fns\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient } from \"@/lib/queryClient\";\n\ninterface Finding {\n  id: string;\n  title: string;\n  descriptionHtml?: string;\n  stepsHtml?: string;\n  impactHtml?: string;\n  fixHtml?: string;\n  cvssVector?: string;\n  cvssScore?: number;\n  severity: 'critical' | 'high' | 'medium' | 'low' | 'informational';\n  status: string;\n  createdAt: string;\n  updatedAt: string;\n  project: {\n    name: string;\n    id: string;\n  };\n  reporter: {\n    firstName: string;\n    lastName: string;\n  };\n}\n\ninterface Activity {\n  id: string;\n  action: string;\n  oldValues: any;\n  newValues: any;\n  createdAt: string;\n  actorId: string;\n}\n\ninterface Comment {\n  id: string;\n  content: string;\n  createdAt: string;\n  author: {\n    firstName: string;\n    lastName: string;\n  };\n}\n\nexport default function FindingDetail() {\n  const [, params] = useRoute(\"/findings/:id\");\n  const findingId = params?.id;\n  const [isEditing, setIsEditing] = useState(false);\n  const [editedFinding, setEditedFinding] = useState<Partial<Finding>>({});\n  const [newComment, setNewComment] = useState(\"\");\n  const { toast } = useToast();\n\n  const { data: finding, isLoading } = useQuery({\n    queryKey: ['/api/findings', findingId],\n    enabled: !!findingId,\n  });\n\n  const { data: activities = [] } = useQuery({\n    queryKey: ['/api/findings', findingId, 'activities'],\n    enabled: !!findingId,\n  });\n\n  const { data: comments = [] } = useQuery({\n    queryKey: ['/api/findings', findingId, 'comments'],\n    enabled: !!findingId,\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: (data: Partial<Finding>) => \n      fetch(`/api/findings/${findingId}`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      }).then(res => res.json()),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/findings', findingId] });\n      queryClient.invalidateQueries({ queryKey: ['/api/findings', findingId, 'activities'] });\n      setIsEditing(false);\n      setEditedFinding({});\n      toast({\n        title: \"Finding updated\",\n        description: \"Changes have been saved successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update finding. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const commentMutation = useMutation({\n    mutationFn: (content: string) =>\n      fetch(`/api/findings/${findingId}/comments`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ content }),\n      }).then(res => res.json()),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/findings', findingId, 'comments'] });\n      setNewComment(\"\");\n      toast({\n        title: \"Comment added\",\n        description: \"Your comment has been posted successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add comment. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSave = () => {\n    updateMutation.mutate(editedFinding);\n  };\n\n  const handleCancel = () => {\n    setIsEditing(false);\n    setEditedFinding({});\n  };\n\n  const handleAddComment = () => {\n    if (newComment.trim()) {\n      commentMutation.mutate(newComment);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!finding) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold mb-2\">Finding Not Found</h1>\n          <p className=\"text-muted-foreground mb-4\">The finding you're looking for doesn't exist.</p>\n          <Link href=\"/findings\">\n            <Button>Back to Findings</Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  const typedFinding = finding as Finding;\n  const typedActivities = activities as Activity[];\n  const typedComments = comments as Comment[];\n\n  return (\n    <div className=\"p-6\" data-testid=\"page-finding-detail\">\n      <div className=\"flex flex-col gap-6 max-w-4xl mx-auto\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-4\">\n            <Link href=\"/findings\">\n              <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-back-to-findings\">\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                Back to Findings\n              </Button>\n            </Link>\n            <Separator orientation=\"vertical\" className=\"h-6\" />\n            <div>\n              <h1 className=\"text-2xl font-bold\" data-testid=\"heading-finding-title\">\n                {isEditing ? (\n                  <Input\n                    value={editedFinding.title ?? typedFinding.title}\n                    onChange={(e) => setEditedFinding({ ...editedFinding, title: e.target.value })}\n                    className=\"text-2xl font-bold border-none p-0 h-auto bg-transparent\"\n                    data-testid=\"input-edit-title\"\n                  />\n                ) : (\n                  typedFinding.title\n                )}\n              </h1>\n              <div className=\"flex items-center gap-2 mt-1\">\n                <SeverityBadge severity={typedFinding.severity} />\n                {isEditing ? (\n                  <Select\n                    value={editedFinding.status ?? typedFinding.status}\n                    onValueChange={(value) => setEditedFinding({ ...editedFinding, status: value })}\n                  >\n                    <SelectTrigger className=\"w-48\" data-testid=\"select-edit-status\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"draft\">Draft</SelectItem>\n                      <SelectItem value=\"submitted\">Submitted</SelectItem>\n                      <SelectItem value=\"company_review\">Under Review</SelectItem>\n                      <SelectItem value=\"remediation_in_progress\">In Remediation</SelectItem>\n                      <SelectItem value=\"ready_for_retest\">Ready for Retest</SelectItem>\n                      <SelectItem value=\"verified_fixed\">Verified Fixed</SelectItem>\n                      <SelectItem value=\"risk_accepted\">Risk Accepted</SelectItem>\n                      <SelectItem value=\"closed\">Closed</SelectItem>\n                    </SelectContent>\n                  </Select>\n                ) : (\n                  <StatusBadge status={typedFinding.status as any} />\n                )}\n              </div>\n            </div>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            {isEditing ? (\n              <>\n                <Button\n                  onClick={handleSave}\n                  disabled={updateMutation.isPending}\n                  data-testid=\"button-save-changes\"\n                >\n                  <Save className=\"h-4 w-4 mr-2\" />\n                  {updateMutation.isPending ? \"Saving...\" : \"Save\"}\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  onClick={handleCancel}\n                  data-testid=\"button-cancel-edit\"\n                >\n                  <X className=\"h-4 w-4 mr-2\" />\n                  Cancel\n                </Button>\n              </>\n            ) : (\n              <Button\n                onClick={() => setIsEditing(true)}\n                disabled={typedFinding.status === 'closed' || typedFinding.status === 'verified_fixed'}\n                data-testid=\"button-edit-finding\"\n              >\n                Edit Finding\n              </Button>\n            )}\n          </div>\n        </div>\n\n        {/* Finding Information */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Building className=\"h-5 w-5\" />\n                Project\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Link href={`/projects/${typedFinding.project.id}`} className=\"text-primary hover:underline\">\n                {typedFinding.project.name}\n              </Link>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <User className=\"h-5 w-5\" />\n                Reporter\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center gap-2\">\n                <Avatar className=\"h-8 w-8\">\n                  <AvatarFallback>\n                    {typedFinding.reporter.firstName?.[0]}{typedFinding.reporter.lastName?.[0]}\n                  </AvatarFallback>\n                </Avatar>\n                <span>{typedFinding.reporter.firstName} {typedFinding.reporter.lastName}</span>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Calendar className=\"h-5 w-5\" />\n                Reported\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p>{format(new Date(typedFinding.createdAt), 'MMM d, yyyy')}</p>\n              <p className=\"text-sm text-muted-foreground\">\n                Updated {format(new Date(typedFinding.updatedAt), 'MMM d, yyyy')}\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Finding Details */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Vulnerability Description</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {isEditing ? (\n                <RichTextEditor\n                  content={editedFinding.descriptionHtml ?? typedFinding.descriptionHtml ?? \"\"}\n                  onChange={(content) => setEditedFinding({ ...editedFinding, descriptionHtml: content })}\n                  placeholder=\"Describe the vulnerability...\"\n                  disabled={updateMutation.isPending}\n                  className=\"min-h-[200px]\"\n                />\n              ) : (\n                <div \n                  className=\"prose dark:prose-invert max-w-none\"\n                  dangerouslySetInnerHTML={{ __html: typedFinding.descriptionHtml || \"No description provided.\" }}\n                />\n              )}\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Steps to Reproduce</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {isEditing ? (\n                <RichTextEditor\n                  content={editedFinding.stepsHtml ?? typedFinding.stepsHtml ?? \"\"}\n                  onChange={(content) => setEditedFinding({ ...editedFinding, stepsHtml: content })}\n                  placeholder=\"List the steps to reproduce...\"\n                  disabled={updateMutation.isPending}\n                  className=\"min-h-[200px]\"\n                />\n              ) : (\n                <div \n                  className=\"prose dark:prose-invert max-w-none\"\n                  dangerouslySetInnerHTML={{ __html: typedFinding.stepsHtml || \"No steps provided.\" }}\n                />\n              )}\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Impact</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {isEditing ? (\n                <RichTextEditor\n                  content={editedFinding.impactHtml ?? typedFinding.impactHtml ?? \"\"}\n                  onChange={(content) => setEditedFinding({ ...editedFinding, impactHtml: content })}\n                  placeholder=\"Describe the impact...\"\n                  disabled={updateMutation.isPending}\n                  className=\"min-h-[200px]\"\n                />\n              ) : (\n                <div \n                  className=\"prose dark:prose-invert max-w-none\"\n                  dangerouslySetInnerHTML={{ __html: typedFinding.impactHtml || \"No impact description provided.\" }}\n                />\n              )}\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Fix Suggestions</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {isEditing ? (\n                <RichTextEditor\n                  content={editedFinding.fixHtml ?? typedFinding.fixHtml ?? \"\"}\n                  onChange={(content) => setEditedFinding({ ...editedFinding, fixHtml: content })}\n                  placeholder=\"Suggest fixes...\"\n                  disabled={updateMutation.isPending}\n                  className=\"min-h-[200px]\"\n                />\n              ) : (\n                <div \n                  className=\"prose dark:prose-invert max-w-none\"\n                  dangerouslySetInnerHTML={{ __html: typedFinding.fixHtml || \"No fix suggestions provided.\" }}\n                />\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* CVSS Score Section */}\n        <div className=\"space-y-6\">\n          {isEditing ? (\n            <CVSSCalculator\n              value={editedFinding.cvssVector ?? typedFinding.cvssVector ?? \"\"}\n              onChange={(vector, score, severity) => {\n                setEditedFinding({ \n                  ...editedFinding, \n                  cvssVector: vector,\n                  cvssScore: score,\n                  severity: severity as any\n                });\n              }}\n              disabled={updateMutation.isPending}\n            />\n          ) : (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  <span>CVSS Score</span>\n                  <div className=\"flex items-center gap-2\">\n                    <Badge variant=\"outline\" className=\"font-mono text-sm\" data-testid=\"cvss-score-display\">\n                      {typedFinding.cvssScore?.toFixed(1) ?? \"N/A\"}\n                    </Badge>\n                    <SeverityBadge severity={typedFinding.severity} />\n                  </div>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {typedFinding.cvssVector ? (\n                  <div className=\"space-y-2\">\n                    <p className=\"text-sm text-muted-foreground\">CVSS Vector</p>\n                    <p className=\"font-mono text-sm bg-muted p-2 rounded\" data-testid=\"cvss-vector-display\">\n                      {typedFinding.cvssVector}\n                    </p>\n                  </div>\n                ) : (\n                  <p className=\"text-muted-foreground\">No CVSS score calculated</p>\n                )}\n              </CardContent>\n            </Card>\n          )}\n        </div>\n\n        {/* Activity Log */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Clock className=\"h-5 w-5\" />\n              Activity Log\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {typedActivities.length === 0 ? (\n              <p className=\"text-muted-foreground\">No activity recorded yet.</p>\n            ) : (\n              <div className=\"space-y-4\">\n                {typedActivities.map((activity) => (\n                  <div key={activity.id} className=\"border-l-2 border-muted pl-4\">\n                    <div className=\"flex items-center gap-2 mb-1\">\n                      <Badge variant=\"outline\">{activity.action}</Badge>\n                      <span className=\"text-sm text-muted-foreground\">\n                        {format(new Date(activity.createdAt), 'MMM d, yyyy h:mm a')}\n                      </span>\n                    </div>\n                    {activity.oldValues && activity.newValues && (\n                      <div className=\"text-sm text-muted-foreground\">\n                        {Object.keys(activity.newValues).map((key) => (\n                          <div key={key}>\n                            <strong>{key}:</strong> {activity.oldValues[key]} → {activity.newValues[key]}\n                          </div>\n                        ))}\n                      </div>\n                    )}\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Comments */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <MessageSquare className=\"h-5 w-5\" />\n              Comments ({typedComments.length})\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {/* Add Comment */}\n              <div className=\"flex gap-3\">\n                <Avatar className=\"h-8 w-8\">\n                  <AvatarFallback>You</AvatarFallback>\n                </Avatar>\n                <div className=\"flex-1\">\n                  <Textarea\n                    value={newComment}\n                    onChange={(e) => setNewComment(e.target.value)}\n                    placeholder=\"Add a comment...\"\n                    rows={3}\n                    data-testid=\"textarea-new-comment\"\n                  />\n                  <div className=\"flex justify-end mt-2\">\n                    <Button\n                      onClick={handleAddComment}\n                      disabled={!newComment.trim() || commentMutation.isPending}\n                      size=\"sm\"\n                      data-testid=\"button-add-comment\"\n                    >\n                      {commentMutation.isPending ? \"Adding...\" : \"Add Comment\"}\n                    </Button>\n                  </div>\n                </div>\n              </div>\n\n              <Separator />\n\n              {/* Comments List */}\n              {typedComments.length === 0 ? (\n                <p className=\"text-muted-foreground\">No comments yet. Be the first to comment!</p>\n              ) : (\n                <div className=\"space-y-4\">\n                  {typedComments.map((comment) => (\n                    <div key={comment.id} className=\"flex gap-3\">\n                      <Avatar className=\"h-8 w-8\">\n                        <AvatarFallback>\n                          {comment.author.firstName?.[0]}{comment.author.lastName?.[0]}\n                        </AvatarFallback>\n                      </Avatar>\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-2 mb-1\">\n                          <span className=\"font-medium\">\n                            {comment.author.firstName} {comment.author.lastName}\n                          </span>\n                          <span className=\"text-sm text-muted-foreground\">\n                            {format(new Date(comment.createdAt), 'MMM d, yyyy h:mm a')}\n                          </span>\n                        </div>\n                        <p className=\"text-sm\">{comment.content}</p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":20553},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ProjectCard.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { StatusBadge } from './StatusBadge';\nimport {\n  Building2,\n  Calendar,\n  Users,\n  AlertTriangle,\n  CheckCircle2,\n  Clock,\n  ExternalLink,\n} from 'lucide-react';\nimport { format } from 'date-fns';\nimport { cn } from '@/lib/utils';\n\ninterface ProjectCardProps {\n  project: {\n    id: string;\n    name: string;\n    customerName: string;\n    description?: string;\n    status: 'planned' | 'in_progress' | 'complete';\n    startDate?: Date;\n    endDate?: Date;\n    findingStats?: {\n      total: number;\n      critical: number;\n      high: number;\n      medium: number;\n      low: number;\n      informational: number;\n    };\n    teamSize?: number;\n    progress?: number;\n  };\n  onOpen?: (id: string) => void;\n  onViewFindings?: (id: string) => void;\n  className?: string;\n}\n\nexport function ProjectCard({\n  project,\n  onOpen,\n  onViewFindings,\n  className,\n}: ProjectCardProps) {\n  const handleOpen = () => {\n    onOpen?.(project.id);\n    console.log('Opening project:', project.id);\n  };\n\n  const handleViewFindings = () => {\n    onViewFindings?.(project.id);\n    console.log('View findings for project:', project.id);\n  };\n\n  const getSeverityCount = (severity: keyof typeof project.findingStats) => {\n    return project.findingStats?.[severity] || 0;\n  };\n\n  const getProgressPercentage = () => {\n    if (project.progress !== undefined) return project.progress;\n    if (project.status === 'complete') return 100;\n    if (project.status === 'in_progress') return 65;\n    return 0;\n  };\n\n  return (\n    <Card \n      className={cn('hover-elevate transition-colors', className)} \n      data-testid={`card-project-${project.id}`}\n    >\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between gap-3\">\n          <div className=\"flex-1 min-w-0\">\n            <CardTitle className=\"text-lg truncate mb-1\">\n              {project.name}\n            </CardTitle>\n            <div className=\"flex items-center gap-2 text-sm text-muted-foreground mb-2\">\n              <Building2 className=\"h-4 w-4\" />\n              <span>{project.customerName}</span>\n            </div>\n            <StatusBadge status={project.status} />\n          </div>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-4\">\n        {project.description && (\n          <p className=\"text-sm text-muted-foreground line-clamp-2\">\n            {project.description}\n          </p>\n        )}\n        \n        {/* Project Timeline */}\n        <div className=\"space-y-2\">\n          <div className=\"flex items-center justify-between text-sm\">\n            <span className=\"text-muted-foreground\">Progress</span>\n            <span className=\"font-medium\">{getProgressPercentage()}%</span>\n          </div>\n          <Progress value={getProgressPercentage()} className=\"h-2\" />\n        </div>\n        \n        {/* Date Range */}\n        {(project.startDate || project.endDate) && (\n          <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n            <Calendar className=\"h-4 w-4\" />\n            <span>\n              {project.startDate && format(project.startDate, 'MMM dd')}\n              {project.startDate && project.endDate && ' - '}\n              {project.endDate && format(project.endDate, 'MMM dd, yyyy')}\n            </span>\n          </div>\n        )}\n        \n        {/* Team Size */}\n        {project.teamSize && (\n          <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n            <Users className=\"h-4 w-4\" />\n            <span>{project.teamSize} team members</span>\n          </div>\n        )}\n        \n        {/* Finding Statistics */}\n        {project.findingStats && (\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm font-medium\">Findings</span>\n              <span className=\"text-sm text-muted-foreground\">\n                {project.findingStats.total} total\n              </span>\n            </div>\n            <div className=\"flex gap-1 flex-wrap\">\n              {getSeverityCount('critical') > 0 && (\n                <Badge variant=\"outline\" className=\"text-xs bg-red-50 text-red-700 border-red-200\">\n                  {getSeverityCount('critical')} Critical\n                </Badge>\n              )}\n              {getSeverityCount('high') > 0 && (\n                <Badge variant=\"outline\" className=\"text-xs bg-orange-50 text-orange-700 border-orange-200\">\n                  {getSeverityCount('high')} High\n                </Badge>\n              )}\n              {getSeverityCount('medium') > 0 && (\n                <Badge variant=\"outline\" className=\"text-xs bg-yellow-50 text-yellow-700 border-yellow-200\">\n                  {getSeverityCount('medium')} Medium\n                </Badge>\n              )}\n              {getSeverityCount('low') > 0 && (\n                <Badge variant=\"outline\" className=\"text-xs bg-green-50 text-green-700 border-green-200\">\n                  {getSeverityCount('low')} Low\n                </Badge>\n              )}\n            </div>\n          </div>\n        )}\n        \n        {/* Action Buttons */}\n        <div className=\"flex gap-2 pt-2\">\n          <Button \n            onClick={handleOpen} \n            className=\"flex-1\"\n            data-testid={`button-open-${project.id}`}\n          >\n            <ExternalLink className=\"h-4 w-4 mr-1\" />\n            Open Project\n          </Button>\n          {project.findingStats && project.findingStats.total > 0 && (\n            <Button \n              variant=\"outline\" \n              onClick={handleViewFindings}\n              data-testid={`button-findings-${project.id}`}\n            >\n              View Findings\n            </Button>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":5999},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/AppSidebar.tsx":{"content":"import {\n  Calendar,\n  Home,\n  Search,\n  Settings,\n  FolderOpen,\n  Bug,\n  FileText,\n  Users,\n  Shield,\n  UserPlus,\n} from \"lucide-react\";\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarHeader,\n  SidebarFooter,\n} from \"@/components/ui/sidebar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { ThemeToggle } from \"./ThemeToggle\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link, useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\n\n// Base navigation items that all users can see\nconst baseNavigationItems = [\n  {\n    title: \"Dashboard\",\n    url: \"/\",\n    icon: Home,\n  },\n  {\n    title: \"Projects\",\n    url: \"/projects\",\n    icon: FolderOpen,\n  },\n  {\n    title: \"Findings\",\n    url: \"/findings\",\n    icon: Bug,\n  },\n];\n\n// Additional items for different permissions\nconst permissionBasedItems = {\n  search: {\n    title: \"Search\",\n    url: \"/search\",\n    icon: Search,\n  },\n  reports: {\n    title: \"Reports\",\n    url: \"/reports\",\n    icon: FileText,\n  },\n  templates: {\n    title: \"Templates\",\n    url: \"/templates\",\n    icon: FileText,\n  },\n  settings: {\n    title: \"Settings\",\n    url: \"/settings\",\n    icon: Settings,\n  },\n};\n\n// Admin section items based on permissions\nconst adminSectionItems = {\n  manage_users: {\n    title: \"User Management\",\n    url: \"/users\",\n    icon: Users,\n  },\n  manage_roles: {\n    title: \"Role Management\",\n    url: \"/roles\",\n    icon: Shield,\n  },\n};\n\nexport function AppSidebar() {\n  const { user } = useAuth();\n  const [location] = useLocation();\n\n  // Fetch user permissions from backend\n  const { data: userPermissions = [] } = useQuery({\n    queryKey: ['/api/auth/permissions'],\n    enabled: !!user\n  });\n\n  // Convert permissions array to Set for faster lookup\n  const permissions = new Set((userPermissions as any[])?.map((p: any) => p.name) || []);\n\n  // Build navigation items based on user permissions\n  const buildNavigationItems = () => {\n    const items = [...baseNavigationItems];\n\n    // Add search for researchers\n    if (permissions.has('view_findings') || permissions.has('manage_findings')) {\n      items.push(permissionBasedItems.search);\n    }\n\n    // Add reports for customers\n    if (permissions.has('view_reports')) {\n      items.push(permissionBasedItems.reports);\n    }\n\n    // Add templates for all users\n    items.push(permissionBasedItems.templates);\n\n    return items;\n  };\n\n  // Build admin section items based on permissions\n  const buildAdminItems = () => {\n    const adminItems = [];\n\n    // Super admin users get all admin features regardless of permissions\n    const isSuperAdmin = user?.role === 'super_admin';\n\n    if (isSuperAdmin || permissions.has('manage_users')) {\n      adminItems.push(adminSectionItems.manage_users);\n    }\n\n    if (isSuperAdmin || permissions.has('manage_roles')) {\n      adminItems.push(adminSectionItems.manage_roles);\n    }\n\n\n    return adminItems;\n  };\n\n  const navigationItems = buildNavigationItems();\n  const adminItems = buildAdminItems();\n  const hasAdminAccess = adminItems.length > 0;\n\n  return (\n    <Sidebar data-testid=\"app-sidebar\">\n      <SidebarHeader className=\"p-4\">\n        <div className=\"flex items-center gap-2\">\n          <div className=\"flex h-8 w-8 items-center justify-center rounded-md bg-primary text-primary-foreground\">\n            <Shield className=\"h-4 w-4\" />\n          </div>\n          <div className=\"flex flex-col\">\n            <span className=\"text-sm font-semibold\">PenTest Pro</span>\n            <span className=\"text-xs text-muted-foreground\">\n              {user?.role === 'super_admin' ? 'Super Admin' :\n               user?.role === 'org_admin' ? 'Organization Admin' :\n               user?.role === 'customer_admin' ? 'Customer Admin' :\n               user?.role === 'researcher' ? 'Researcher' :\n               user?.role === 'project_user' ? 'Project User' : 'User'}\n            </span>\n          </div>\n        </div>\n      </SidebarHeader>\n      \n      <SidebarContent>\n        <SidebarGroup>\n          <SidebarGroupLabel>Navigation</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {navigationItems.map((item) => {\n                const isActive = location === item.url;\n                return (\n                  <SidebarMenuItem key={item.title}>\n                    <SidebarMenuButton \n                      asChild \n                      isActive={isActive}\n                      data-testid={`nav-${item.title.toLowerCase().replace(/\\s+/g, '-')}`}\n                    >\n                      <Link href={item.url}>\n                        <item.icon className=\"h-4 w-4\" />\n                        <span>{item.title}</span>\n                      </Link>\n                    </SidebarMenuButton>\n                  </SidebarMenuItem>\n                );\n              })}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n\n        {/* Admin Section - Only show if user has admin permissions */}\n        {hasAdminAccess && (\n          <SidebarGroup>\n            <SidebarGroupLabel>Administration</SidebarGroupLabel>\n            <SidebarGroupContent>\n              <SidebarMenu>\n                {adminItems.map((item) => {\n                  const isActive = location === item.url || \n                    (item.url.includes('#') && location === item.url.split('#')[0]);\n                  return (\n                    <SidebarMenuItem key={item.title}>\n                      <SidebarMenuButton \n                        asChild \n                        isActive={isActive}\n                        data-testid={`nav-${item.title.toLowerCase().replace(/\\s+/g, '-')}`}\n                      >\n                        <Link href={item.url}>\n                          <item.icon className=\"h-4 w-4\" />\n                          <span>{item.title}</span>\n                        </Link>\n                      </SidebarMenuButton>\n                    </SidebarMenuItem>\n                  );\n                })}\n              </SidebarMenu>\n            </SidebarGroupContent>\n          </SidebarGroup>\n        )}\n\n        {/* Quick Actions */}\n        {permissions.has('manage_findings') && (\n          <SidebarGroup>\n            <SidebarGroupLabel>Quick Actions</SidebarGroupLabel>\n            <SidebarGroupContent>\n              <SidebarMenu>\n                <SidebarMenuItem>\n                  <SidebarMenuButton \n                    asChild\n                    data-testid=\"button-new-finding\"\n                  >\n                    <Link href=\"/findings/new\">\n                      <Bug className=\"h-4 w-4\" />\n                      <span>New Finding</span>\n                    </Link>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              </SidebarMenu>\n            </SidebarGroupContent>\n          </SidebarGroup>\n        )}\n\n        {/* Additional Quick Actions for Settings */}\n        {permissions.has('manage_system') && (\n          <SidebarGroup>\n            <SidebarGroupLabel>System</SidebarGroupLabel>\n            <SidebarGroupContent>\n              <SidebarMenu>\n                <SidebarMenuItem>\n                  <SidebarMenuButton \n                    asChild\n                    data-testid=\"nav-settings\"\n                  >\n                    <Link href=\"/settings\">\n                      <Settings className=\"h-4 w-4\" />\n                      <span>Settings</span>\n                    </Link>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              </SidebarMenu>\n            </SidebarGroupContent>\n          </SidebarGroup>\n        )}\n      </SidebarContent>\n      \n      <SidebarFooter className=\"p-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <div className=\"h-8 w-8 rounded-full bg-primary text-primary-foreground flex items-center justify-center text-sm font-medium\">\n              {/* TODO: Remove mock functionality */}\n              {user?.firstName?.[0] || user?.email?.[0] || 'U'}\n            </div>\n            <div className=\"flex flex-col text-sm\">\n              <span className=\"font-medium\">\n                {user?.firstName || user?.email || 'User'}\n              </span>\n              <span className=\"text-xs text-muted-foreground\">\n                {user?.email}\n              </span>\n            </div>\n          </div>\n          <div className=\"flex items-center gap-1\">\n            <ThemeToggle />\n            <Button \n              variant=\"ghost\" \n              size=\"sm\" \n              onClick={() => window.location.href = '/api/logout'}\n              data-testid=\"button-logout\"\n            >\n              Logout\n            </Button>\n          </div>\n        </div>\n      </SidebarFooter>\n    </Sidebar>\n  );\n}","size_bytes":8928},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/examples/FileUploadZone.tsx":{"content":"import { FileUploadZone } from '../FileUploadZone'\n\nexport default function FileUploadZoneExample() {\n  return (\n    <div className=\"max-w-2xl\">\n      <FileUploadZone\n        onFilesAdded={(files) => {\n          console.log('Files added:', files.map(f => f.file.name));\n        }}\n        maxFiles={5}\n      />\n    </div>\n  )\n}","size_bytes":327},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"client/src/pages/ProjectDetail.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useRoute, Link } from \"wouter\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Project, Finding, ProjectCredential, PostmanCollection, ProjectStatus, FindingStatus, Severity, CredentialType, ReportTemplateType } from \"@shared/schema\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { StatusBadge } from \"@/components/StatusBadge\";\nimport { SeverityBadge } from \"@/components/SeverityBadge\";\nimport { RichTextEditor } from \"@/components/RichTextEditor\";\nimport { \n  ArrowLeft, \n  Calendar, \n  Clock, \n  Users, \n  FileText, \n  Download, \n  Upload,\n  Eye,\n  Key,\n  Globe,\n  Shield,\n  Plus,\n  ExternalLink\n} from \"lucide-react\";\nimport { format } from \"date-fns\";\n\ninterface ProjectDetail extends Project {\n  teamSize: number;\n  scope: {\n    inScope: string[];\n    outOfScope: string[];\n    methodology: string;\n  };\n  credentials: {\n    id: string;\n    name: string;\n    type: CredentialType;\n    username?: string;\n    environment: string;\n  }[];\n  postmanCollections: {\n    id: string;\n    name: string;\n    description: string;\n    uploadedAt: Date;\n    fileName: string;\n    size: number;\n  }[];\n  findings: {\n    id: string;\n    title: string;\n    severity: Severity;\n    status: FindingStatus;\n    createdAt: Date;\n  }[];\n  findingStats: {\n    total: number;\n    critical: number;\n    high: number;\n    medium: number;\n    low: number;\n    informational: number;\n  };\n}\n\n// Mock data for development\nconst mockProjectDetail: ProjectDetail = {\n  id: \"proj-001\",\n  name: \"Healthcare Portal Security Assessment\",\n  customerName: \"HealthTech Solutions\",\n  description: \"Comprehensive security assessment of patient portal and healthcare management system including HIPAA compliance review. This assessment will cover web application security, API security, and database security aspects.\",\n  status: \"in_progress\" as ProjectStatus,\n  startDate: new Date(\"2024-01-20\"),\n  expectedEndDate: new Date(\"2024-03-15\"),\n  actualEndDate: null,\n  inScope: [],\n  outOfScope: [],\n  methodology: null,\n  organizationId: \"org-001\",\n  createdBy: null,\n  tags: [],\n  createdAt: new Date(\"2024-01-15\"),\n  updatedAt: new Date(\"2024-02-10\"),\n  teamSize: 5,\n  scope: {\n    inScope: [\n      \"Patient portal web application (https://portal.healthtech.com)\",\n      \"Healthcare management API endpoints\",\n      \"Administrative dashboard\",\n      \"Mobile application API\",\n      \"Database security review\"\n    ],\n    outOfScope: [\n      \"Physical security assessment\",\n      \"Social engineering attacks\",\n      \"Third-party integrations\",\n      \"Legacy systems not in scope\"\n    ],\n    methodology: \"OWASP Web Security Testing Guide v4.2, NIST SP 800-115\"\n  },\n  credentials: [\n    {\n      id: \"cred-001\",\n      name: \"Patient User Account\",\n      type: \"user\" as CredentialType,\n      username: \"test.patient@healthtech.com\",\n      environment: \"Staging\"\n    },\n    {\n      id: \"cred-002\", \n      name: \"Healthcare Admin\",\n      type: \"admin\" as CredentialType,\n      username: \"admin.test@healthtech.com\",\n      environment: \"Staging\"\n    },\n    {\n      id: \"cred-003\",\n      name: \"API Service Account\",\n      type: \"service\" as CredentialType,\n      environment: \"Testing\"\n    }\n  ],\n  postmanCollections: [\n    {\n      id: \"pc-001\",\n      name: \"Healthcare API Collection\",\n      description: \"Complete API collection for patient management endpoints\",\n      uploadedAt: new Date(\"2024-01-25\"),\n      fileName: \"healthtech-api.postman_collection.json\",\n      size: 245760\n    },\n    {\n      id: \"pc-002\",\n      name: \"Authentication Flows\",\n      description: \"OAuth2 and session management API calls\",\n      uploadedAt: new Date(\"2024-01-22\"),\n      fileName: \"auth-flows.postman_collection.json\", \n      size: 89432\n    }\n  ],\n  findings: [\n    {\n      id: \"find-001\",\n      title: \"SQL Injection in Patient Search\",\n      severity: \"critical\" as Severity,\n      status: \"submitted\" as FindingStatus,\n      createdAt: new Date(\"2024-02-01\")\n    },\n    {\n      id: \"find-002\",\n      title: \"Cross-Site Scripting in Profile\",\n      severity: \"high\" as Severity,\n      status: \"company_review\" as FindingStatus,\n      createdAt: new Date(\"2024-02-03\")\n    },\n    {\n      id: \"find-003\",\n      title: \"Weak Password Policy\",\n      severity: \"medium\" as Severity,\n      status: \"draft\" as FindingStatus,\n      createdAt: new Date(\"2024-02-05\")\n    }\n  ],\n  findingStats: { total: 18, critical: 1, high: 4, medium: 7, low: 5, informational: 1 }\n};\n\nfunction ExportReportDialog({ projectId, projectName }: { projectId: string; projectName: string }) {\n  const [reportName, setReportName] = useState(`${projectName} - Security Assessment Report`);\n  const [reportScope, setReportScope] = useState(\"\");\n  const [selectedTemplateId, setSelectedTemplateId] = useState<string>(\"\");\n  const [executiveSummary, setExecutiveSummary] = useState(\"\");\n  const [isExporting, setIsExporting] = useState(false);\n  const { toast } = useToast();\n\n  // Fetch available templates\n  const { data: templates, isLoading: isLoadingTemplates } = useQuery({\n    queryKey: ['/api/templates'],\n    queryFn: async () => {\n      const response = await apiRequest('GET', '/api/templates');\n      return (await response.json()) as any[];\n    }\n  });\n\n  const handleExportReport = async () => {\n    if (!selectedTemplateId) {\n      toast({\n        title: \"Template Required\",\n        description: \"Please select a report template before exporting.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    const selectedTemplate = templates?.find((t: any) => t.id === selectedTemplateId);\n    \n    if (!selectedTemplate) {\n      toast({\n        title: \"Template Error\",\n        description: \"Selected template not found. Please select a valid template.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    setIsExporting(true);\n    try {\n      await apiRequest('POST', `/api/projects/${projectId}/export`, {\n        reportName,\n        reportScope,\n        templateId: selectedTemplateId,\n        templateType: selectedTemplate?.type || 'html',\n        executiveSummary,\n        includeExecutiveSummary: !!executiveSummary\n      });\n\n      // Invalidate exports cache to refresh the list\n      queryClient.invalidateQueries({ queryKey: ['/api/projects', projectId, 'exports'] });\n      \n      toast({\n        title: \"Report Export Started\",\n        description: \"Your security assessment report is being generated. You'll be notified when it's ready.\"\n      });\n    } catch (error) {\n      console.error('Export failed:', error);\n      toast({\n        title: \"Export Failed\",\n        description: \"Failed to start report export. Please try again.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsExporting(false);\n    }\n  };\n\n  const handleExportExecutiveSummary = async () => {\n    if (!executiveSummary) {\n      toast({\n        title: \"Executive Summary Required\",\n        description: \"Please write an executive summary before exporting.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setIsExporting(true);\n    try {\n      await apiRequest('POST', `/api/projects/${projectId}/export`, {\n        reportName: `${reportName} - Executive Summary`,\n        templateType: 'executive-summary',\n        executiveSummary,\n        includeExecutiveSummary: true\n      });\n\n      // Invalidate exports cache to refresh the list\n      queryClient.invalidateQueries({ queryKey: ['/api/projects', projectId, 'exports'] });\n      \n      toast({\n        title: \"Executive Summary Export Started\",\n        description: \"Your executive summary is being generated. You'll be notified when it's ready.\"\n      });\n    } catch (error) {\n      console.error('Executive summary export failed:', error);\n      toast({\n        title: \"Export Failed\",\n        description: \"Failed to export executive summary. Please try again.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsExporting(false);\n    }\n  };\n\n  return (\n    <Dialog>\n      <DialogTrigger asChild>\n        <Button data-testid=\"button-export-report\">\n          <Download className=\"h-4 w-4 mr-2\" />\n          Export Report\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Export Security Assessment Report</DialogTitle>\n          <DialogDescription>\n            Configure and export your penetration testing report\n          </DialogDescription>\n        </DialogHeader>\n        \n        <div className=\"space-y-6\">\n          {/* Report Name */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"report-name\">Report Name</Label>\n            <Input\n              id=\"report-name\"\n              value={reportName}\n              onChange={(e) => setReportName(e.target.value)}\n              placeholder=\"Enter report name\"\n              data-testid=\"input-report-name\"\n            />\n          </div>\n\n          {/* Scope */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"report-scope\">Scope</Label>\n            <Textarea\n              id=\"report-scope\"\n              value={reportScope}\n              onChange={(e) => setReportScope(e.target.value)}\n              placeholder=\"Define the scope of this security assessment...\"\n              rows={3}\n              data-testid=\"input-report-scope\"\n            />\n          </div>\n\n          {/* Report Template */}\n          <div className=\"space-y-2\">\n            <Label>Report Template</Label>\n            <Select value={selectedTemplateId} onValueChange={setSelectedTemplateId}>\n              <SelectTrigger data-testid=\"select-report-template\">\n                <SelectValue placeholder={isLoadingTemplates ? \"Loading templates...\" : \"Select report template\"} />\n              </SelectTrigger>\n              <SelectContent>\n                {templates && templates.length > 0 ? (\n                  templates.map((template: any) => (\n                    <SelectItem key={template.id} value={template.id}>\n                      <div className=\"flex flex-col\">\n                        <span className=\"font-medium\">{template.name}</span>\n                        {template.description && (\n                          <span className=\"text-xs text-muted-foreground\">{template.description}</span>\n                        )}\n                      </div>\n                    </SelectItem>\n                  ))\n                ) : (\n                  <div className=\"px-2 py-1.5 text-sm text-muted-foreground\">\n                    {isLoadingTemplates ? \"Loading templates...\" : \"No templates available\"}\n                  </div>\n                )}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Executive Summary */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"executive-summary\">Executive Summary</Label>\n            <RichTextEditor\n              content={executiveSummary}\n              onChange={setExecutiveSummary}\n              placeholder=\"Write the executive summary for this security assessment...\"\n            />\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"flex gap-3 pt-4\">\n            <Button \n              onClick={handleExportReport}\n              disabled={isExporting || !selectedTemplateId}\n              className=\"flex-1\"\n              data-testid=\"button-export-full-report\"\n            >\n              {isExporting ? \"Exporting...\" : \"Export Full Report\"}\n            </Button>\n            <Button \n              variant=\"outline\"\n              onClick={handleExportExecutiveSummary}\n              disabled={isExporting || !executiveSummary}\n              data-testid=\"button-export-executive-summary\"\n            >\n              Export Executive Summary\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nfunction SubmitFindingDialog({ projectId }: { projectId: string }) {\n  const [findingTitle, setFindingTitle] = useState(\"\");\n  const [findingDescription, setFindingDescription] = useState(\"\");\n  const [severity, setSeverity] = useState<string>(\"\");\n\n  return (\n    <Dialog>\n      <DialogTrigger asChild>\n        <Button data-testid=\"button-submit-finding\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Submit Finding\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"max-w-2xl\">\n        <DialogHeader>\n          <DialogTitle>Submit New Finding</DialogTitle>\n          <DialogDescription>\n            Add a new security finding to this project\n          </DialogDescription>\n        </DialogHeader>\n        \n        <div className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"finding-title\">Finding Title</Label>\n            <Input\n              id=\"finding-title\"\n              value={findingTitle}\n              onChange={(e) => setFindingTitle(e.target.value)}\n              placeholder=\"e.g., SQL Injection in Login Form\"\n              data-testid=\"input-finding-title\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label>Severity</Label>\n            <Select value={severity} onValueChange={setSeverity}>\n              <SelectTrigger data-testid=\"select-finding-severity\">\n                <SelectValue placeholder=\"Select severity level\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"critical\">Critical</SelectItem>\n                <SelectItem value=\"high\">High</SelectItem>\n                <SelectItem value=\"medium\">Medium</SelectItem>\n                <SelectItem value=\"low\">Low</SelectItem>\n                <SelectItem value=\"informational\">Informational</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label>Description</Label>\n            <RichTextEditor\n              content={findingDescription}\n              onChange={setFindingDescription}\n              placeholder=\"Describe the security finding in detail...\"\n            />\n          </div>\n\n          <div className=\"flex gap-3 pt-4\">\n            <Button \n              disabled={!findingTitle || !severity || !findingDescription}\n              className=\"flex-1\"\n              data-testid=\"button-save-finding\"\n            >\n              Submit Finding\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nexport default function ProjectDetail() {\n  const [, params] = useRoute(\"/projects/:id\");\n  const projectId = params?.id;\n\n  // Fetch real project data from API\n  const { data: project, isLoading, error } = useQuery<Project>({\n    queryKey: ['/api/projects', projectId],\n    enabled: !!projectId\n  });\n\n  // Fetch project findings for statistics\n  const { data: findings = [] } = useQuery<Finding[]>({\n    queryKey: ['/api/projects', projectId, 'findings'],\n    enabled: !!projectId\n  });\n\n  // Calculate finding statistics from real data\n  const findingStats = findings.reduce((stats, finding) => {\n    stats.total++;\n    stats[finding.severity]++;\n    return stats;\n  }, { total: 0, critical: 0, high: 0, medium: 0, low: 0, informational: 0 });\n\n  // Create extended project data with real findings and stats\n  const projectData: ProjectDetail | undefined = project ? {\n    ...project,\n    teamSize: 4, // TODO: Get from project members API\n    scope: {\n      inScope: project.inScope || [],\n      outOfScope: project.outOfScope || [],\n      methodology: project.methodology || \"OWASP Testing Guide\"\n    },\n    credentials: [], // TODO: Fetch from credentials API\n    postmanCollections: [], // TODO: Fetch from collections API\n    findings: findings.slice(0, 10), // Show latest 10 findings\n    findingStats\n  } : undefined;\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"flex items-center justify-center min-h-[400px]\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n            <p className=\"text-muted-foreground\">Loading project details...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!projectData) {\n    return (\n      <div className=\"p-6\">\n        <Card>\n          <CardContent className=\"p-8 text-center\">\n            <FileText className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium mb-2\">Project not found</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              The project you're looking for doesn't exist or has been removed.\n            </p>\n            <Link href=\"/projects\">\n              <Button>Back to Projects</Button>\n            </Link>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center gap-4\">\n        <Link href=\"/projects\">\n          <Button variant=\"outline\" size=\"sm\" data-testid=\"button-back-to-projects\">\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back to Projects\n          </Button>\n        </Link>\n        <div className=\"flex-1\">\n          <h1 className=\"text-3xl font-bold\" data-testid=\"heading-project-name\">{projectData.name}</h1>\n          <p className=\"text-muted-foreground\">{projectData.customerName}</p>\n        </div>\n        <StatusBadge status={projectData.status} />\n      </div>\n\n      {/* Action Bar */}\n      <div className=\"flex flex-wrap gap-3\">\n        <SubmitFindingDialog projectId={projectData.id} />\n        <ExportReportDialog projectId={projectData.id} projectName={projectData.name} />\n        <Button variant=\"outline\" data-testid=\"button-view-findings\">\n          <Eye className=\"h-4 w-4 mr-2\" />\n          View All Findings ({projectData.findingStats.total})\n        </Button>\n      </div>\n\n      <Tabs defaultValue=\"overview\" className=\"space-y-6\">\n        <TabsList>\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n          <TabsTrigger value=\"scope\">Scope & Details</TabsTrigger>\n          <TabsTrigger value=\"credentials\">Credentials</TabsTrigger>\n          <TabsTrigger value=\"collections\">Postman Collections</TabsTrigger>\n          <TabsTrigger value=\"findings\">Findings</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          {/* Project Info Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center gap-2 mb-2\">\n                  <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n                  <span className=\"text-sm text-muted-foreground\">Start Date</span>\n                </div>\n                <div className=\"font-medium\">{projectData.startDate ? format(projectData.startDate, \"MMM d, yyyy\") : 'TBD'}</div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center gap-2 mb-2\">\n                  <Clock className=\"h-4 w-4 text-muted-foreground\" />\n                  <span className=\"text-sm text-muted-foreground\">Expected End</span>\n                </div>\n                <div className=\"font-medium\">{projectData.expectedEndDate ? format(projectData.expectedEndDate, \"MMM d, yyyy\") : 'TBD'}</div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center gap-2 mb-2\">\n                  <Users className=\"h-4 w-4 text-muted-foreground\" />\n                  <span className=\"text-sm text-muted-foreground\">Team Size</span>\n                </div>\n                <div className=\"font-medium\">{projectData.teamSize} members</div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center gap-2 mb-2\">\n                  <Shield className=\"h-4 w-4 text-muted-foreground\" />\n                  <span className=\"text-sm text-muted-foreground\">Total Findings</span>\n                </div>\n                <div className=\"font-medium\">{projectData.findingStats.total}</div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Description */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Project Description</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-muted-foreground leading-relaxed\">{projectData.description}</p>\n            </CardContent>\n          </Card>\n\n          {/* Finding Stats */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Finding Distribution</CardTitle>\n              <CardDescription>Security vulnerabilities by severity level</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex flex-wrap gap-3\">\n                {projectData.findingStats.critical > 0 && (\n                  <div className=\"flex items-center gap-2\">\n                    <SeverityBadge severity=\"critical\" />\n                    <span className=\"font-medium\">{projectData.findingStats.critical}</span>\n                  </div>\n                )}\n                {projectData.findingStats.high > 0 && (\n                  <div className=\"flex items-center gap-2\">\n                    <SeverityBadge severity=\"high\" />\n                    <span className=\"font-medium\">{projectData.findingStats.high}</span>\n                  </div>\n                )}\n                {projectData.findingStats.medium > 0 && (\n                  <div className=\"flex items-center gap-2\">\n                    <SeverityBadge severity=\"medium\" />\n                    <span className=\"font-medium\">{projectData.findingStats.medium}</span>\n                  </div>\n                )}\n                {projectData.findingStats.low > 0 && (\n                  <div className=\"flex items-center gap-2\">\n                    <SeverityBadge severity=\"low\" />\n                    <span className=\"font-medium\">{projectData.findingStats.low}</span>\n                  </div>\n                )}\n                {projectData.findingStats.informational > 0 && (\n                  <div className=\"flex items-center gap-2\">\n                    <SeverityBadge severity=\"informational\" />\n                    <span className=\"font-medium\">{projectData.findingStats.informational}</span>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"scope\" className=\"space-y-6\">\n          <div className=\"grid md:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Globe className=\"h-5 w-5\" />\n                  In Scope\n                </CardTitle>\n                <CardDescription>Assets and systems included in this assessment</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-2\">\n                  {projectData.scope.inScope.map((item: string, index: number) => (\n                    <li key={index} className=\"flex items-start gap-2\">\n                      <div className=\"w-2 h-2 bg-green-500 rounded-full mt-2 flex-shrink-0\" />\n                      <span className=\"text-sm\">{item}</span>\n                    </li>\n                  ))}\n                </ul>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Shield className=\"h-5 w-5\" />\n                  Out of Scope\n                </CardTitle>\n                <CardDescription>Assets and systems excluded from this assessment</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-2\">\n                  {projectData.scope.outOfScope.map((item: string, index: number) => (\n                    <li key={index} className=\"flex items-start gap-2\">\n                      <div className=\"w-2 h-2 bg-red-500 rounded-full mt-2 flex-shrink-0\" />\n                      <span className=\"text-sm\">{item}</span>\n                    </li>\n                  ))}\n                </ul>\n              </CardContent>\n            </Card>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Testing Methodology</CardTitle>\n              <CardDescription>Standards and frameworks used for this assessment</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-sm text-muted-foreground\">{projectData.scope.methodology}</p>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"credentials\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Key className=\"h-5 w-5\" />\n                Test Credentials\n              </CardTitle>\n              <CardDescription>Authentication credentials provided for testing</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {projectData.credentials.map((cred) => (\n                  <div key={cred.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                    <div className=\"space-y-1\">\n                      <div className=\"font-medium\">{cred.name}</div>\n                      {cred.username && (\n                        <div className=\"text-sm text-muted-foreground\">Username: {cred.username}</div>\n                      )}\n                      <div className=\"flex gap-2\">\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {cred.type}\n                        </Badge>\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {cred.environment}\n                        </Badge>\n                      </div>\n                    </div>\n                    <Button variant=\"outline\" size=\"sm\" data-testid={`button-view-credential-${cred.id}`}>\n                      <Eye className=\"h-4 w-4 mr-2\" />\n                      View\n                    </Button>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"collections\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Upload className=\"h-5 w-5\" />\n                Postman Collections\n              </CardTitle>\n              <CardDescription>API collections provided for testing</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {projectData.postmanCollections.map((collection) => (\n                  <div key={collection.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                    <div className=\"space-y-1 flex-1\">\n                      <div className=\"font-medium\">{collection.name}</div>\n                      <div className=\"text-sm text-muted-foreground\">{collection.description}</div>\n                      <div className=\"flex items-center gap-4 text-xs text-muted-foreground\">\n                        <span>Uploaded: {format(collection.uploadedAt, \"MMM d, yyyy\")}</span>\n                        <span>Size: {Math.round(collection.size / 1024)} KB</span>\n                      </div>\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Button variant=\"outline\" size=\"sm\" data-testid={`button-download-collection-${collection.id}`}>\n                        <Download className=\"h-4 w-4 mr-2\" />\n                        Download\n                      </Button>\n                      <Button variant=\"outline\" size=\"sm\" data-testid={`button-view-collection-${collection.id}`}>\n                        <ExternalLink className=\"h-4 w-4 mr-2\" />\n                        Open in Postman\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"findings\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  <FileText className=\"h-5 w-5\" />\n                  Security Findings\n                </div>\n                <SubmitFindingDialog projectId={projectData.id} />\n              </CardTitle>\n              <CardDescription>Vulnerabilities discovered during this assessment</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {projectData.findings.map((finding) => (\n                  <div key={finding.id} className=\"flex items-center justify-between p-3 border rounded-lg hover-elevate\">\n                    <div className=\"space-y-1 flex-1\">\n                      <div className=\"font-medium\">{finding.title}</div>\n                      <div className=\"flex items-center gap-3\">\n                        <SeverityBadge severity={finding.severity} />\n                        <StatusBadge status={finding.status} />\n                        <span className=\"text-xs text-muted-foreground\">\n                          {format(finding.createdAt, \"MMM d, yyyy\")}\n                        </span>\n                      </div>\n                    </div>\n                    <Button variant=\"outline\" size=\"sm\" data-testid={`button-view-finding-${finding.id}`}>\n                      <Eye className=\"h-4 w-4 mr-2\" />\n                      View\n                    </Button>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":31034},"client/src/components/examples/ThemeToggle.tsx":{"content":"import { ThemeToggle } from '../ThemeToggle'\n\nexport default function ThemeToggleExample() {\n  return (\n    <div className=\"p-4\">\n      <ThemeToggle />\n    </div>\n  )\n}","size_bytes":168},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/pages/UserManagement.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { UserPlus, Edit2, Trash2, Shield, Mail, Users } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\n\ninterface User {\n  id: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  organizationId: string;\n  isActive: boolean;\n  createdAt: string;\n}\n\ninterface Role {\n  id: string;\n  name: string;\n  description: string;\n  organizationId: string;\n}\n\ninterface UserRole {\n  userId: string;\n  roleId: string;\n  assignedAt: string;\n  role: Role;\n}\n\n\nconst createUserSchema = z.object({\n  email: z.string().email(\"Please enter a valid email address\"),\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n  role: z.string().min(1, \"Role is required\"),\n});\n\ntype CreateUserForm = z.infer<typeof createUserSchema>;\n\nexport default function UserManagement() {\n  const { toast } = useToast();\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [isCreateUserDialogOpen, setIsCreateUserDialogOpen] = useState(false);\n  const [isRoleDialogOpen, setIsRoleDialogOpen] = useState(false);\n  const [createdUserPassword, setCreatedUserPassword] = useState<string | null>(null);\n\n  const form = useForm<CreateUserForm>({\n    resolver: zodResolver(createUserSchema),\n    defaultValues: {\n      email: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      role: \"\",\n    },\n  });\n\n  // Fetch all users in the organization\n  const { data: users = [] } = useQuery<User[]>({\n    queryKey: ['/api/users'],\n  });\n\n  // Fetch all roles\n  const { data: roles = [] } = useQuery<Role[]>({\n    queryKey: ['/api/roles'],\n  });\n\n  // Fetch user roles\n  const { data: userRoles = [] } = useQuery<UserRole[]>({\n    queryKey: ['/api/user-roles'],\n  });\n\n\n  // Invite user mutation\n  const createUserMutation = useMutation({\n    mutationFn: async (data: CreateUserForm) => {\n      const response = await apiRequest('POST', '/api/users', data);\n      return await response.json();\n    },\n    onSuccess: (data: any) => {\n      toast({\n        title: \"User Created\",\n        description: \"The user has been created successfully.\",\n      });\n      if (data.password) {\n        setCreatedUserPassword(data.password);\n      }\n      queryClient.invalidateQueries({ queryKey: ['/api/users'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/user-roles'] });\n      setIsCreateUserDialogOpen(false);\n      form.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create user\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Assign role mutation\n  const assignRoleMutation = useMutation({\n    mutationFn: async ({ userId, roleId }: { userId: string; roleId: string }) => {\n      return apiRequest('POST', `/api/users/${userId}/roles`, { roleId });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Role Assigned\",\n        description: \"The role has been assigned successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/user-roles'] });\n      setIsRoleDialogOpen(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to assign role\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Remove role mutation\n  const removeRoleMutation = useMutation({\n    mutationFn: async ({ userId, roleId }: { userId: string; roleId: string }) => {\n      return apiRequest('DELETE', `/api/users/${userId}/roles/${roleId}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Role Removed\",\n        description: \"The role has been removed successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/user-roles'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to remove role\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Deactivate user mutation\n  const deactivateUserMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      return apiRequest('PUT', `/api/users/${userId}/deactivate`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"User Deactivated\",\n        description: \"The user has been deactivated successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/users'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to deactivate user\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Reset password mutation\n  const resetPasswordMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      const response = await apiRequest('PUT', `/api/users/${userId}/reset-password`);\n      return await response.json();\n    },\n    onSuccess: (data: any) => {\n      toast({\n        title: \"Password Reset\",\n        description: `Password reset successfully. Temporary password: ${data.tempPassword}. Please share this securely with the user.`,\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/users'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to reset password\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onCreateUserSubmit = (data: CreateUserForm) => {\n    createUserMutation.mutate(data);\n  };\n\n  const getUserRoles = (userId: string) => {\n    return userRoles.filter(ur => ur.userId === userId);\n  };\n\n  const handleAssignRole = (userId: string, roleId: string) => {\n    assignRoleMutation.mutate({ userId, roleId });\n  };\n\n  const handleRemoveRole = (userId: string, roleId: string) => {\n    removeRoleMutation.mutate({ userId, roleId });\n  };\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-8\" data-testid=\"page-user-management\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-semibold text-foreground\">User Management</h1>\n          <p className=\"text-sm text-muted-foreground\">\n            Manage users, roles, and permissions for your organization\n          </p>\n        </div>\n        <Dialog open={isCreateUserDialogOpen} onOpenChange={setIsCreateUserDialogOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-create-user\">\n              <UserPlus className=\"w-4 h-4 mr-2\" />\n              Create User\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"sm:max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Create New User</DialogTitle>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onCreateUserSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email Address</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          type=\"email\" \n                          placeholder=\"user@example.com\"\n                          data-testid=\"input-invite-email\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"firstName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>First Name</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          placeholder=\"John\"\n                          data-testid=\"input-invite-firstname\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"lastName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Last Name</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          placeholder=\"Doe\"\n                          data-testid=\"input-invite-lastname\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"role\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>User Role</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-user-role\">\n                            <SelectValue placeholder=\"Select a role\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {roles.map((role) => (\n                            <SelectItem key={role.id} value={role.id}>\n                              {role.name} - {role.description}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <div className=\"flex justify-end space-x-2\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setIsCreateUserDialogOpen(false)}\n                    data-testid=\"button-cancel-create\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    disabled={createUserMutation.isPending}\n                    data-testid=\"button-create-user\"\n                  >\n                    {createUserMutation.isPending ? \"Creating...\" : \"Create User\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n\n        {/* Password Display Dialog */}\n        <Dialog open={!!createdUserPassword} onOpenChange={() => setCreatedUserPassword(null)}>\n          <DialogContent className=\"sm:max-w-md\">\n            <DialogHeader>\n              <DialogTitle>User Created Successfully</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div className=\"p-4 bg-muted rounded-lg\">\n                <p className=\"text-sm text-muted-foreground mb-2\">\n                  The user has been created with the following password:\n                </p>\n                <div className=\"font-mono text-lg font-semibold p-2 bg-background rounded border\">\n                  {createdUserPassword}\n                </div>\n              </div>\n              <div className=\"text-sm text-amber-600 bg-amber-50 p-3 rounded-lg border border-amber-200\">\n                <strong>Important:</strong> Please save this password securely. It will not be shown again.\n                Share it with the user through a secure channel.\n              </div>\n              <div className=\"flex justify-end\">\n                <Button onClick={() => setCreatedUserPassword(null)}>\n                  Got it\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Statistics Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Users</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"stat-total-users\">{users.length}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Active users in organization\n            </p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Available Roles</CardTitle>\n            <Shield className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"stat-available-roles\">{roles.length}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Configured roles and permissions\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Users Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Users</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Name</TableHead>\n                <TableHead>Email</TableHead>\n                <TableHead>Roles</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {users.map((user) => {\n                const userRolesList = getUserRoles(user.id);\n                return (\n                  <TableRow key={user.id} data-testid={`row-user-${user.id}`}>\n                    <TableCell className=\"font-medium\">\n                      {user.firstName} {user.lastName}\n                    </TableCell>\n                    <TableCell>{user.email}</TableCell>\n                    <TableCell>\n                      <div className=\"flex flex-wrap gap-1\">\n                        {userRolesList.map((userRole) => (\n                          <Badge \n                            key={userRole.roleId} \n                            variant=\"secondary\"\n                            data-testid={`badge-role-${userRole.role.name}`}\n                          >\n                            {userRole.role.name}\n                            <button\n                              onClick={() => handleRemoveRole(user.id, userRole.roleId)}\n                              className=\"ml-1 text-xs hover:text-destructive\"\n                              data-testid={`button-remove-role-${userRole.roleId}`}\n                            >\n                              ×\n                            </button>\n                          </Badge>\n                        ))}\n                        <Dialog open={isRoleDialogOpen && selectedUser?.id === user.id} onOpenChange={(open) => {\n                          setIsRoleDialogOpen(open);\n                          if (!open) setSelectedUser(null);\n                        }}>\n                          <DialogTrigger asChild>\n                            <Button \n                              variant=\"outline\" \n                              size=\"sm\"\n                              onClick={() => setSelectedUser(user)}\n                              data-testid={`button-assign-role-${user.id}`}\n                            >\n                              <Shield className=\"w-3 h-3 mr-1\" />\n                              Assign Role\n                            </Button>\n                          </DialogTrigger>\n                          <DialogContent>\n                            <DialogHeader>\n                              <DialogTitle>Assign Role to {user.firstName} {user.lastName}</DialogTitle>\n                            </DialogHeader>\n                            <div className=\"space-y-4\">\n                              <Label>Select Role</Label>\n                              <Select \n                                onValueChange={(roleId) => handleAssignRole(user.id, roleId)}\n                                data-testid=\"select-role-assignment\"\n                              >\n                                <SelectTrigger>\n                                  <SelectValue placeholder=\"Choose a role...\" />\n                                </SelectTrigger>\n                                <SelectContent>\n                                  {roles.filter(role => \n                                    !userRolesList.some(ur => ur.roleId === role.id)\n                                  ).map((role) => (\n                                    <SelectItem key={role.id} value={role.id}>\n                                      {role.name} - {role.description}\n                                    </SelectItem>\n                                  ))}\n                                </SelectContent>\n                              </Select>\n                            </div>\n                          </DialogContent>\n                        </Dialog>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <Badge variant={user.isActive ? \"secondary\" : \"destructive\"}>\n                        {user.isActive ? \"Active\" : \"Inactive\"}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex space-x-2\">\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          onClick={() => resetPasswordMutation.mutate(user.id)}\n                          data-testid={`button-reset-password-${user.id}`}\n                          title=\"Reset Password\"\n                        >\n                          <Edit2 className=\"w-3 h-3\" />\n                        </Button>\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          disabled={!user.isActive}\n                          onClick={() => deactivateUserMutation.mutate(user.id)}\n                          data-testid={`button-deactivate-${user.id}`}\n                          title=\"Deactivate User\"\n                        >\n                          <Trash2 className=\"w-3 h-3\" />\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                );\n              })}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n\n    </div>\n  );\n}","size_bytes":19641},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { User } from \"@shared/schema\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery<User>({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}","size_bytes":306},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/examples/AppSidebar.tsx":{"content":"import { AppSidebar } from '../AppSidebar'\nimport { SidebarProvider } from '@/components/ui/sidebar'\n\nexport default function AppSidebarExample() {\n  const style = {\n    \"--sidebar-width\": \"16rem\",\n    \"--sidebar-width-icon\": \"3rem\",\n  } as React.CSSProperties;\n\n  return (\n    <SidebarProvider style={style}>\n      <div className=\"flex h-screen w-full\">\n        <AppSidebar />\n        <div className=\"flex-1 p-6\">\n          <h2 className=\"text-2xl font-bold mb-4\">Main Content Area</h2>\n          <p className=\"text-muted-foreground\">\n            This is where the main application content would be displayed.\n          </p>\n        </div>\n      </div>\n    </SidebarProvider>\n  )\n}","size_bytes":682},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/pages/CreateFinding.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useLocation, Link } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { ArrowLeft, Save } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { CVSSCalculator } from \"@/components/CVSSCalculator\";\nimport { RichTextEditor } from \"@/components/RichTextEditor\";\nimport { FileUpload } from \"@/components/FileUpload\";\nimport { FindingPreview } from \"@/components/FindingPreview\";\n\nconst createFindingSchema = z.object({\n  title: z.string().min(1, \"Title is required\"),\n  projectId: z.string().min(1, \"Project is required\"),\n  severity: z.enum([\"critical\", \"high\", \"medium\", \"low\", \"informational\"]),\n  cvssVector: z.string().optional(),\n  cvssScore: z.number().optional(),\n  descriptionHtml: z.string().optional(),\n  stepsHtml: z.string().optional(),\n  impactHtml: z.string().optional(),\n  fixHtml: z.string().optional(),\n  proofOfConceptFiles: z.array(z.object({\n    id: z.string(),\n    name: z.string(),\n    size: z.number(),\n    type: z.string(),\n    url: z.string(),\n    markdownSyntax: z.string(),\n  })).optional(),\n});\n\ntype CreateFindingForm = z.infer<typeof createFindingSchema>;\n\ninterface Project {\n  id: string;\n  name: string;\n}\n\nexport default function CreateFinding() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const { data: projects = [], isLoading: loadingProjects } = useQuery({\n    queryKey: ['/api/projects'],\n  });\n\n  const form = useForm<CreateFindingForm>({\n    resolver: zodResolver(createFindingSchema),\n    defaultValues: {\n      title: \"\",\n      projectId: \"\",\n      severity: \"medium\",\n      cvssVector: \"\",\n      cvssScore: 0,\n      descriptionHtml: \"\",\n      stepsHtml: \"\",\n      impactHtml: \"\",\n      fixHtml: \"\",\n      proofOfConceptFiles: [],\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: (data: CreateFindingForm) =>\n      fetch(`/api/projects/${data.projectId}/findings`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      }).then(res => {\n        if (!res.ok) throw new Error('Failed to create finding');\n        return res.json();\n      }),\n    onSuccess: (finding) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/findings'] });\n      toast({\n        title: \"Finding created\",\n        description: \"The finding has been created successfully.\",\n      });\n      setLocation(`/findings/${finding.id}`);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create finding. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (data: CreateFindingForm) => {\n    createMutation.mutate(data);\n  };\n\n  const typedProjects = projects as Project[];\n\n  return (\n    <div className=\"p-6\" data-testid=\"page-create-finding\">\n      <div className=\"flex flex-col gap-6 max-w-4xl mx-auto\">\n        {/* Header */}\n        <div className=\"flex items-center gap-4\">\n          <Link href=\"/findings\">\n            <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-back-to-findings\">\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Back to Findings\n            </Button>\n          </Link>\n          <div>\n            <h1 className=\"text-2xl font-bold\" data-testid=\"heading-create-finding\">\n              Create New Finding\n            </h1>\n            <p className=\"text-muted-foreground\">\n              Document a new security finding for your project\n            </p>\n          </div>\n        </div>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-6\">\n            {/* Basic Information */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Basic Information</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"title\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Finding Title *</FormLabel>\n                        <FormControl>\n                          <Input\n                            {...field}\n                            placeholder=\"Enter finding title...\"\n                            data-testid=\"input-title\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"projectId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Project *</FormLabel>\n                        <Select\n                          onValueChange={field.onChange}\n                          value={field.value}\n                          disabled={loadingProjects}\n                        >\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-project\">\n                              <SelectValue placeholder=\"Select project...\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {typedProjects.map((project) => (\n                              <SelectItem key={project.id} value={project.id}>\n                                {project.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"col-span-full\">\n                  <CVSSCalculator\n                    value={form.watch('cvssVector')}\n                    onChange={(vector, score, severity) => {\n                      form.setValue('cvssVector', vector);\n                      form.setValue('cvssScore', score);\n                      form.setValue('severity', severity as any);\n                    }}\n                  />\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Technical Details - One by One Layout */}\n            <div className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Vulnerability Description</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <FormField\n                    control={form.control}\n                    name=\"descriptionHtml\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormControl>\n                          <RichTextEditor\n                            content={field.value || ''}\n                            onChange={field.onChange}\n                            placeholder=\"Describe the vulnerability in detail...\"\n                            className=\"min-h-[200px]\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Steps to Reproduce</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <FormField\n                    control={form.control}\n                    name=\"stepsHtml\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormControl>\n                          <RichTextEditor\n                            content={field.value || ''}\n                            onChange={field.onChange}\n                            placeholder=\"1. Step one\\n2. Step two\\n3. Result\"\n                            className=\"min-h-[200px]\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Impact Assessment</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <FormField\n                    control={form.control}\n                    name=\"impactHtml\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormControl>\n                          <RichTextEditor\n                            content={field.value || ''}\n                            onChange={field.onChange}\n                            placeholder=\"Describe the potential impact and risks...\"\n                            className=\"min-h-[200px]\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Fix Recommendations</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <FormField\n                    control={form.control}\n                    name=\"fixHtml\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormControl>\n                          <RichTextEditor\n                            content={field.value || ''}\n                            onChange={field.onChange}\n                            placeholder=\"Provide recommendations for fixing this vulnerability...\"\n                            className=\"min-h-[200px]\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Proof of Concept Files - Optional */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Proof of Concept Files (Optional)</CardTitle>\n                <p className=\"text-sm text-muted-foreground\">\n                  Upload screenshots, files, or other evidence to support your finding\n                </p>\n              </CardHeader>\n              <CardContent>\n                <FileUpload\n                  onFilesChange={(files) => {\n                    form.setValue('proofOfConceptFiles', files);\n                  }}\n                  multiple={true}\n                  maxSize={10}\n                />\n              </CardContent>\n            </Card>\n\n            {/* Action Buttons */}\n            <div className=\"flex items-center justify-between\">\n              <FindingPreview\n                title={form.watch('title')}\n                severity={form.watch('severity')}\n                cvssVector={form.watch('cvssVector')}\n                cvssScore={form.watch('cvssScore')}\n                descriptionHtml={form.watch('descriptionHtml')}\n                stepsHtml={form.watch('stepsHtml')}\n                impactHtml={form.watch('impactHtml')}\n                fixHtml={form.watch('fixHtml')}\n                proofOfConceptFiles={form.watch('proofOfConceptFiles')}\n                projectName={typedProjects.find(p => p.id === form.watch('projectId'))?.name}\n              />\n              <div className=\"flex items-center gap-4\">\n                <Link href=\"/findings\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    data-testid=\"button-cancel\"\n                  >\n                    Cancel\n                  </Button>\n                </Link>\n                <Button\n                  type=\"submit\"\n                  disabled={createMutation.isPending}\n                  data-testid=\"button-create-finding\"\n                >\n                  <Save className=\"h-4 w-4 mr-2\" />\n                  {createMutation.isPending ? \"Creating...\" : \"Create Finding\"}\n                </Button>\n              </div>\n            </div>\n          </form>\n        </Form>\n      </div>\n    </div>\n  );\n}","size_bytes":13058},"client/src/components/FindingPreview.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Eye, Calendar, User, FileText } from \"lucide-react\";\nimport { SeverityBadge } from \"@/components/SeverityBadge\";\nimport { format } from \"date-fns\";\n\ninterface FindingPreviewProps {\n  title: string;\n  severity: string;\n  cvssVector?: string;\n  cvssScore?: number;\n  descriptionHtml?: string;\n  stepsHtml?: string;\n  impactHtml?: string;\n  fixHtml?: string;\n  proofOfConceptFiles?: Array<{\n    id: string;\n    name: string;\n    type: string;\n    url: string;\n  }>;\n  projectName?: string;\n  trigger?: React.ReactNode;\n}\n\nexport function FindingPreview({\n  title,\n  severity,\n  cvssVector,\n  cvssScore,\n  descriptionHtml,\n  stepsHtml,\n  impactHtml,\n  fixHtml,\n  proofOfConceptFiles = [],\n  projectName = \"Selected Project\",\n  trigger\n}: FindingPreviewProps) {\n  const defaultTrigger = (\n    <Button variant=\"outline\" data-testid=\"button-preview-finding\">\n      <Eye className=\"h-4 w-4 mr-2\" />\n      Preview\n    </Button>\n  );\n\n  // Helper function to render HTML content safely\n  const renderHtmlContent = (html: string | undefined) => {\n    if (!html || html.trim() === '') {\n      return <p className=\"text-muted-foreground italic\">No content provided</p>;\n    }\n    return (\n      <div \n        className=\"prose prose-sm dark:prose-invert max-w-none\"\n        dangerouslySetInnerHTML={{ __html: html }}\n      />\n    );\n  };\n\n  // Helper function to check if markdown image syntax exists in content\n  const hasMarkdownImages = (html: string | undefined) => {\n    if (!html) return false;\n    return /!\\[.*?\\]\\(.*?\\)/.test(html);\n  };\n\n  // Filter files that are not referenced in markdown\n  const getUnreferencedFiles = () => {\n    const allMarkdownContent = [descriptionHtml, stepsHtml, impactHtml, fixHtml].join(' ');\n    return proofOfConceptFiles.filter(file => \n      !allMarkdownContent.includes(file.url)\n    );\n  };\n\n  const unreferencedFiles = getUnreferencedFiles();\n\n  return (\n    <Dialog>\n      <DialogTrigger asChild>\n        {trigger || defaultTrigger}\n      </DialogTrigger>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\" data-testid=\"finding-preview-dialog\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <FileText className=\"h-5 w-5\" />\n            Finding Preview\n          </DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"space-y-6\">\n          {/* Header Section */}\n          <div className=\"space-y-4\">\n            <div>\n              <h1 className=\"text-2xl font-bold\" data-testid=\"preview-title\">\n                {title || \"Untitled Finding\"}\n              </h1>\n              <div className=\"flex items-center gap-4 mt-2 text-sm text-muted-foreground\">\n                <div className=\"flex items-center gap-1\">\n                  <User className=\"h-4 w-4\" />\n                  <span>Current User</span>\n                </div>\n                <div className=\"flex items-center gap-1\">\n                  <Calendar className=\"h-4 w-4\" />\n                  <span>{format(new Date(), 'MMM d, yyyy')}</span>\n                </div>\n                <Badge variant=\"outline\">{projectName}</Badge>\n              </div>\n            </div>\n\n            {/* Severity and CVSS */}\n            <div className=\"flex items-center gap-4\">\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-sm font-medium\">Severity:</span>\n                <SeverityBadge severity={severity as any} />\n              </div>\n              {cvssScore && cvssScore > 0 && (\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"text-sm font-medium\">CVSS Score:</span>\n                  <Badge variant=\"outline\" className=\"font-mono\">\n                    {cvssScore.toFixed(1)}\n                  </Badge>\n                </div>\n              )}\n            </div>\n\n            {cvssVector && (\n              <div className=\"p-3 bg-muted rounded-md\">\n                <div className=\"text-sm font-medium mb-1\">CVSS Vector</div>\n                <code className=\"text-xs text-muted-foreground break-all\">\n                  {cvssVector}\n                </code>\n              </div>\n            )}\n          </div>\n\n          {/* Content Sections */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Description */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Vulnerability Description</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {renderHtmlContent(descriptionHtml)}\n              </CardContent>\n            </Card>\n\n            {/* Steps to Reproduce */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Steps to Reproduce</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {renderHtmlContent(stepsHtml)}\n              </CardContent>\n            </Card>\n\n            {/* Impact Assessment */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Impact Assessment</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {renderHtmlContent(impactHtml)}\n              </CardContent>\n            </Card>\n\n            {/* Fix Recommendations */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Fix Recommendations</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {renderHtmlContent(fixHtml)}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Proof of Concept Files */}\n          {unreferencedFiles.length > 0 && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Proof of Concept</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  {unreferencedFiles.map((file) => (\n                    <div\n                      key={file.id}\n                      className=\"border rounded-lg p-4 space-y-2\"\n                      data-testid={`preview-file-${file.id}`}\n                    >\n                      {file.type.startsWith('image/') ? (\n                        <img\n                          src={file.url}\n                          alt={file.name}\n                          className=\"w-full h-auto rounded-md max-h-64 object-contain\"\n                        />\n                      ) : (\n                        <div className=\"flex items-center justify-center h-32 bg-muted rounded-md\">\n                          <FileText className=\"h-8 w-8 text-muted-foreground\" />\n                        </div>\n                      )}\n                      <p className=\"text-sm font-medium truncate\">{file.name}</p>\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {file.type.split('/')[1]?.toUpperCase() || 'FILE'}\n                      </Badge>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Information Notice */}\n          <div className=\"text-xs text-muted-foreground bg-muted/30 p-3 rounded-md\">\n            <p><strong>Preview Note:</strong></p>\n            <p>• This is how your finding will appear once saved</p>\n            <p>• Images referenced in markdown will display inline within the content sections</p>\n            <p>• Images not referenced in markdown will appear in the \"Proof of Concept\" section</p>\n            <p>• You can still edit the finding after saving</p>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":7979},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { relations } from \"drizzle-orm\";\nimport {\n  index,\n  jsonb,\n  pgEnum,\n  pgTable,\n  text,\n  timestamp,\n  varchar,\n  real,\n  integer,\n  boolean,\n  uniqueIndex,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table - mandatory for Replit Auth\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// Enums\nexport const userRoleEnum = pgEnum(\"user_role\", [\n  \"researcher\",\n  \"project_user\",\n  \"customer_admin\",\n  \"org_admin\",\n  \"super_admin\",\n]);\n\nexport const permissionEnum = pgEnum(\"permission\", [\n  \"view_assigned_projects\",\n  \"submit_finding\",\n  \"view_finding\",\n  \"edit_finding\",\n  \"edit_comment\",\n  \"view_comment\",\n  \"invite_users\",\n  \"create_projects\",\n  \"edit_projects\",\n  \"export_reports\",\n  \"view_all_projects\",\n  \"manage_users\",\n  \"manage_roles\",\n]);\n\nexport const projectStatusEnum = pgEnum(\"project_status\", [\n  \"planned\",\n  \"in_progress\",\n  \"complete\",\n]);\n\nexport const findingStatusEnum = pgEnum(\"finding_status\", [\n  \"draft\",\n  \"submitted\",\n  \"company_review\",\n  \"remediation_in_progress\",\n  \"ready_for_retest\",\n  \"verified_fixed\",\n  \"risk_accepted\",\n  \"closed\",\n]);\n\nexport const severityEnum = pgEnum(\"severity\", [\n  \"critical\",\n  \"high\",\n  \"medium\",\n  \"low\",\n  \"informational\",\n]);\n\nexport const templateTypeEnum = pgEnum(\"template_type\", [\n  \"html\",\n  \"docx\", \n  \"markdown\",\n]);\n\nexport const credentialTypeEnum = pgEnum(\"credential_type\", [\n  \"user\",\n  \"admin\", \n  \"service\",\n]);\n\nexport const reportTemplateTypeEnum = pgEnum(\"report_template_type\", [\n  \"web\",\n  \"mobile\",\n  \"network\",\n  \"cloud\",\n  \"api\",\n  \"executive-summary\",\n  \"html\",\n]);\n\n// Core entities\nexport const organizations = pgTable(\"organizations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  domain: text(\"domain\"),\n  settings: jsonb(\"settings\").default({}),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  passwordHash: text(\"password_hash\"),\n  organizationId: varchar(\"organization_id\").references(() => organizations.id),\n  role: userRoleEnum(\"role\").notNull().default(\"researcher\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const projects = pgTable(\"projects\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  customerName: text(\"customer_name\").notNull(),\n  scope: text(\"scope\"),\n  methodology: text(\"methodology\"),\n  startDate: timestamp(\"start_date\"),\n  endDate: timestamp(\"end_date\"),\n  status: projectStatusEnum(\"status\").notNull().default(\"planned\"),\n  organizationId: varchar(\"organization_id\")\n    .references(() => organizations.id)\n    .notNull(),\n  createdBy: varchar(\"created_by\").references(() => users.id),\n  tags: text(\"tags\").array().default([]),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const projectMembers = pgTable(\"project_members\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  projectId: varchar(\"project_id\")\n    .references(() => projects.id, { onDelete: \"cascade\" })\n    .notNull(),\n  userId: varchar(\"user_id\")\n    .references(() => users.id, { onDelete: \"cascade\" })\n    .notNull(),\n  canEdit: boolean(\"can_edit\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const findings = pgTable(\"findings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  projectId: varchar(\"project_id\")\n    .references(() => projects.id, { onDelete: \"cascade\" })\n    .notNull(),\n  title: text(\"title\").notNull(),\n  descriptionHtml: text(\"description_html\"),\n  stepsHtml: text(\"steps_html\"),\n  impactHtml: text(\"impact_html\"),\n  fixHtml: text(\"fix_html\"),\n  references: text(\"references\").array().default([]),\n  affectedAssets: text(\"affected_assets\").array().default([]),\n  tags: text(\"tags\").array().default([]),\n  cvssVector: text(\"cvss_vector\"),\n  cvssScore: real(\"cvss_score\"),\n  severity: severityEnum(\"severity\"),\n  manualSeverityOverride: text(\"manual_severity_override\"),\n  status: findingStatusEnum(\"status\").notNull().default(\"draft\"),\n  createdBy: varchar(\"created_by\")\n    .references(() => users.id)\n    .notNull(),\n  assignedTo: varchar(\"assigned_to\").references(() => users.id),\n  isDuplicate: boolean(\"is_duplicate\").default(false),\n  duplicateOf: varchar(\"duplicate_of\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const evidenceAttachments = pgTable(\"evidence_attachments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  findingId: varchar(\"finding_id\")\n    .references(() => findings.id, { onDelete: \"cascade\" })\n    .notNull(),\n  filename: text(\"filename\").notNull(),\n  originalFilename: text(\"original_filename\").notNull(),\n  mimeType: text(\"mime_type\").notNull(),\n  fileSize: integer(\"file_size\").notNull(),\n  filePath: text(\"file_path\").notNull(),\n  fileHash: text(\"file_hash\").notNull(),\n  caption: text(\"caption\"),\n  description: text(\"description\"),\n  uploadedBy: varchar(\"uploaded_by\")\n    .references(() => users.id)\n    .notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const comments = pgTable(\"comments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  findingId: varchar(\"finding_id\")\n    .references(() => findings.id, { onDelete: \"cascade\" })\n    .notNull(),\n  authorId: varchar(\"author_id\")\n    .references(() => users.id)\n    .notNull(),\n  content: text(\"content\").notNull(),\n  isPrivate: boolean(\"is_private\").default(false),\n  mentions: text(\"mentions\").array().default([]),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const reportTemplates = pgTable(\"report_templates\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  type: templateTypeEnum(\"type\").notNull(),\n  content: text(\"content\").notNull(),\n  variables: jsonb(\"variables\").default([]),\n  organizationId: varchar(\"organization_id\").references(() => organizations.id),\n  customerId: varchar(\"customer_id\"),\n  isDefault: boolean(\"is_default\").default(false),\n  version: integer(\"version\").default(1),\n  createdBy: varchar(\"created_by\")\n    .references(() => users.id)\n    .notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const projectCredentials = pgTable(\"project_credentials\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  projectId: varchar(\"project_id\")\n    .references(() => projects.id, { onDelete: \"cascade\" })\n    .notNull(),\n  name: text(\"name\").notNull(),\n  type: credentialTypeEnum(\"type\").notNull(),\n  username: text(\"username\"),\n  password: text(\"password\"),\n  environment: text(\"environment\").notNull(),\n  description: text(\"description\"),\n  notes: text(\"notes\"),\n  createdBy: varchar(\"created_by\").references(() => users.id).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const postmanCollections = pgTable(\"postman_collections\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  projectId: varchar(\"project_id\")\n    .references(() => projects.id, { onDelete: \"cascade\" })\n    .notNull(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  fileName: text(\"file_name\").notNull(),\n  filePath: text(\"file_path\").notNull(),\n  fileSize: integer(\"file_size\").notNull(),\n  uploadedBy: varchar(\"uploaded_by\").references(() => users.id).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const reportExports = pgTable(\"report_exports\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  projectId: varchar(\"project_id\")\n    .references(() => projects.id)\n    .notNull(),\n  templateId: varchar(\"template_id\")\n    .references(() => reportTemplates.id),\n  reportName: text(\"report_name\").notNull(),\n  reportScope: text(\"report_scope\"),\n  templateType: reportTemplateTypeEnum(\"template_type\").notNull(),\n  executiveSummary: text(\"executive_summary\"),\n  format: text(\"format\").notNull(),\n  filename: text(\"filename\").notNull(),\n  filePath: text(\"file_path\").notNull(),\n  checksum: text(\"checksum\").notNull(),\n  metadata: jsonb(\"metadata\").default({}),\n  exportedBy: varchar(\"exported_by\")\n    .references(() => users.id)\n    .notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const activityLogs = pgTable(\"activity_logs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  actorId: varchar(\"actor_id\")\n    .references(() => users.id)\n    .notNull(),\n  action: text(\"action\").notNull(),\n  targetType: text(\"target_type\").notNull(),\n  targetId: varchar(\"target_id\").notNull(),\n  oldValues: jsonb(\"old_values\"),\n  newValues: jsonb(\"new_values\"),\n  ipAddress: text(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n  metadata: jsonb(\"metadata\").default({}),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Role and Permission Management\nexport const roles = pgTable(\"roles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull().unique(),\n  description: text(\"description\"),\n  organizationId: varchar(\"organization_id\")\n    .references(() => organizations.id)\n    .notNull(),\n  isSystemRole: boolean(\"is_system_role\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const rolePermissions = pgTable(\"role_permissions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  roleId: varchar(\"role_id\")\n    .references(() => roles.id, { onDelete: \"cascade\" })\n    .notNull(),\n  permission: permissionEnum(\"permission\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const userRoles = pgTable(\"user_roles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\")\n    .references(() => users.id, { onDelete: \"cascade\" })\n    .notNull(),\n  roleId: varchar(\"role_id\")\n    .references(() => roles.id, { onDelete: \"cascade\" })\n    .notNull(),\n  assignedBy: varchar(\"assigned_by\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => [\n  uniqueIndex(\"idx_user_roles_unique\").on(table.userId, table.roleId),\n]);\n\nexport const userInvitations = pgTable(\"user_invitations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").notNull(),\n  organizationId: varchar(\"organization_id\")\n    .references(() => organizations.id)\n    .notNull(),\n  roleId: varchar(\"role_id\")\n    .references(() => roles.id)\n    .notNull(),\n  invitedBy: varchar(\"invited_by\")\n    .references(() => users.id)\n    .notNull(),\n  token: varchar(\"token\").notNull().unique(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  acceptedAt: timestamp(\"accepted_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Relations\nexport const organizationsRelations = relations(organizations, ({ many }) => ({\n  users: many(users),\n  projects: many(projects),\n  templates: many(reportTemplates),\n  roles: many(roles),\n  invitations: many(userInvitations),\n}));\n\nexport const usersRelations = relations(users, ({ one, many }) => ({\n  organization: one(organizations, {\n    fields: [users.organizationId],\n    references: [organizations.id],\n  }),\n  createdProjects: many(projects),\n  projectMemberships: many(projectMembers),\n  findings: many(findings),\n  comments: many(comments),\n  uploads: many(evidenceAttachments),\n  templates: many(reportTemplates),\n  exports: many(reportExports),\n  activities: many(activityLogs),\n  roleAssignments: many(userRoles),\n  sentInvitations: many(userInvitations),\n}));\n\nexport const projectsRelations = relations(projects, ({ one, many }) => ({\n  organization: one(organizations, {\n    fields: [projects.organizationId],\n    references: [organizations.id],\n  }),\n  createdBy: one(users, {\n    fields: [projects.createdBy],\n    references: [users.id],\n  }),\n  members: many(projectMembers),\n  findings: many(findings),\n  exports: many(reportExports),\n}));\n\nexport const projectMembersRelations = relations(projectMembers, ({ one }) => ({\n  project: one(projects, {\n    fields: [projectMembers.projectId],\n    references: [projects.id],\n  }),\n  user: one(users, {\n    fields: [projectMembers.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const findingsRelations = relations(findings, ({ one, many }) => ({\n  project: one(projects, {\n    fields: [findings.projectId],\n    references: [projects.id],\n  }),\n  createdBy: one(users, {\n    fields: [findings.createdBy],\n    references: [users.id],\n  }),\n  assignedTo: one(users, {\n    fields: [findings.assignedTo],\n    references: [users.id],\n  }),\n  duplicateOf: one(findings, {\n    fields: [findings.duplicateOf],\n    references: [findings.id],\n  }),\n  evidence: many(evidenceAttachments),\n  comments: many(comments),\n}));\n\nexport const evidenceAttachmentsRelations = relations(\n  evidenceAttachments,\n  ({ one }) => ({\n    finding: one(findings, {\n      fields: [evidenceAttachments.findingId],\n      references: [findings.id],\n    }),\n    uploadedBy: one(users, {\n      fields: [evidenceAttachments.uploadedBy],\n      references: [users.id],\n    }),\n  })\n);\n\nexport const commentsRelations = relations(comments, ({ one }) => ({\n  finding: one(findings, {\n    fields: [comments.findingId],\n    references: [findings.id],\n  }),\n  author: one(users, {\n    fields: [comments.authorId],\n    references: [users.id],\n  }),\n}));\n\nexport const reportTemplatesRelations = relations(\n  reportTemplates,\n  ({ one, many }) => ({\n    organization: one(organizations, {\n      fields: [reportTemplates.organizationId],\n      references: [organizations.id],\n    }),\n    createdBy: one(users, {\n      fields: [reportTemplates.createdBy],\n      references: [users.id],\n    }),\n    exports: many(reportExports),\n  })\n);\n\nexport const reportExportsRelations = relations(reportExports, ({ one }) => ({\n  project: one(projects, {\n    fields: [reportExports.projectId],\n    references: [projects.id],\n  }),\n  template: one(reportTemplates, {\n    fields: [reportExports.templateId],\n    references: [reportTemplates.id],\n  }),\n  exportedBy: one(users, {\n    fields: [reportExports.exportedBy],\n    references: [users.id],\n  }),\n}));\n\nexport const activityLogsRelations = relations(activityLogs, ({ one }) => ({\n  actor: one(users, {\n    fields: [activityLogs.actorId],\n    references: [users.id],\n  }),\n}));\n\nexport const rolesRelations = relations(roles, ({ one, many }) => ({\n  organization: one(organizations, {\n    fields: [roles.organizationId],\n    references: [organizations.id],\n  }),\n  permissions: many(rolePermissions),\n  userAssignments: many(userRoles),\n  invitations: many(userInvitations),\n}));\n\nexport const rolePermissionsRelations = relations(rolePermissions, ({ one }) => ({\n  role: one(roles, {\n    fields: [rolePermissions.roleId],\n    references: [roles.id],\n  }),\n}));\n\nexport const userRolesRelations = relations(userRoles, ({ one }) => ({\n  user: one(users, {\n    fields: [userRoles.userId],\n    references: [users.id],\n  }),\n  role: one(roles, {\n    fields: [userRoles.roleId],\n    references: [roles.id],\n  }),\n  assignedBy: one(users, {\n    fields: [userRoles.assignedBy],\n    references: [users.id],\n  }),\n}));\n\nexport const userInvitationsRelations = relations(userInvitations, ({ one }) => ({\n  organization: one(organizations, {\n    fields: [userInvitations.organizationId],\n    references: [organizations.id],\n  }),\n  role: one(roles, {\n    fields: [userInvitations.roleId],\n    references: [roles.id],\n  }),\n  invitedBy: one(users, {\n    fields: [userInvitations.invitedBy],\n    references: [users.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertOrganizationSchema = createInsertSchema(organizations).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertProjectSchema = createInsertSchema(projects, {\n  startDate: z.coerce.date().optional(),\n  endDate: z.coerce.date().optional(),\n}).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertFindingSchema = createInsertSchema(findings).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertEvidenceSchema = createInsertSchema(evidenceAttachments).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCommentSchema = createInsertSchema(comments).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertTemplateSchema = createInsertSchema(reportTemplates).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCredentialSchema = createInsertSchema(projectCredentials).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPostmanCollectionSchema = createInsertSchema(postmanCollections).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertReportExportSchema = createInsertSchema(reportExports).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertRoleSchema = createInsertSchema(roles).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertRolePermissionSchema = createInsertSchema(rolePermissions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUserRoleSchema = createInsertSchema(userRoles).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUserInvitationSchema = createInsertSchema(userInvitations).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\nexport type Organization = typeof organizations.$inferSelect;\nexport type Project = typeof projects.$inferSelect;\nexport type ProjectMember = typeof projectMembers.$inferSelect;\nexport type Finding = typeof findings.$inferSelect;\nexport type EvidenceAttachment = typeof evidenceAttachments.$inferSelect;\nexport type Comment = typeof comments.$inferSelect;\nexport type ReportTemplate = typeof reportTemplates.$inferSelect;\nexport type ReportExport = typeof reportExports.$inferSelect;\nexport type ActivityLog = typeof activityLogs.$inferSelect;\nexport type ProjectCredential = typeof projectCredentials.$inferSelect;\nexport type PostmanCollection = typeof postmanCollections.$inferSelect;\nexport type Role = typeof roles.$inferSelect;\nexport type RolePermission = typeof rolePermissions.$inferSelect;\nexport type UserRole = typeof userRoles.$inferSelect;\nexport type UserInvitation = typeof userInvitations.$inferSelect;\n\nexport type InsertOrganization = z.infer<typeof insertOrganizationSchema>;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type InsertProject = z.infer<typeof insertProjectSchema>;\nexport type InsertFinding = z.infer<typeof insertFindingSchema>;\nexport type InsertEvidence = z.infer<typeof insertEvidenceSchema>;\nexport type InsertComment = z.infer<typeof insertCommentSchema>;\nexport type InsertTemplate = z.infer<typeof insertTemplateSchema>;\nexport type InsertCredential = z.infer<typeof insertCredentialSchema>;\nexport type InsertPostmanCollection = z.infer<typeof insertPostmanCollectionSchema>;\nexport type InsertReportExport = z.infer<typeof insertReportExportSchema>;\nexport type InsertRole = z.infer<typeof insertRoleSchema>;\nexport type InsertRolePermission = z.infer<typeof insertRolePermissionSchema>;\nexport type InsertUserRole = z.infer<typeof insertUserRoleSchema>;\nexport type InsertUserInvitation = z.infer<typeof insertUserInvitationSchema>;\n\n// Enum value types for frontend\nexport type ProjectStatus = (typeof projectStatusEnum.enumValues)[number];\nexport type FindingStatus = (typeof findingStatusEnum.enumValues)[number];\nexport type Severity = (typeof severityEnum.enumValues)[number];\nexport type CredentialType = (typeof credentialTypeEnum.enumValues)[number];\nexport type ReportTemplateType = (typeof reportTemplateTypeEnum.enumValues)[number];\nexport type UserRoleType = (typeof userRoleEnum.enumValues)[number];\nexport type Permission = (typeof permissionEnum.enumValues)[number];\n","size_bytes":20905},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"design_guidelines.md":{"content":"# Pentest Reporting Tool - Design Guidelines\n\n## Design Approach\n**System-Based Approach - Material Design**\nThis enterprise security platform requires a professional, data-dense interface that prioritizes functionality and trust. Material Design provides the structured components and clear visual hierarchy needed for complex security workflows.\n\n## Core Design Elements\n\n### A. Color Palette\n**Dark Mode Primary (Default)**\n- Primary: 219 91% 60% (Security Blue)\n- Background: 222 84% 5% (Deep Charcoal)\n- Surface: 217 33% 17% (Dark Surface)\n- Text Primary: 210 40% 98%\n- Text Secondary: 215 25% 70%\n\n**Light Mode**\n- Primary: 219 91% 45%\n- Background: 0 0% 100%\n- Surface: 210 40% 98%\n- Text Primary: 222 84% 5%\n\n**Status Colors**\n- Critical: 0 84% 60% (Red)\n- High: 25 95% 53% (Orange)\n- Medium: 45 93% 47% (Yellow)\n- Low: 142 76% 36% (Green)\n- Info: 217 91% 60% (Blue)\n\n### B. Typography\n**Font Family**: Inter (Google Fonts)\n- Headers: Inter 600 (Semibold)\n- Body: Inter 400 (Regular)\n- Code/Technical: JetBrains Mono 400\n\n**Scale**\n- H1: 2rem (32px) - Dashboard titles\n- H2: 1.5rem (24px) - Section headers\n- H3: 1.25rem (20px) - Card titles\n- Body: 0.875rem (14px) - Primary text\n- Caption: 0.75rem (12px) - Metadata\n\n### C. Layout System\n**Spacing Units**: Tailwind 2, 4, 6, 8, 12, 16\n- Micro spacing: p-2, m-2 (8px)\n- Standard spacing: p-4, m-4 (16px)\n- Section spacing: p-8, m-8 (32px)\n- Page margins: p-6, m-6 (24px)\n\n**Grid**: 12-column responsive grid with consistent gutters\n\n### D. Component Library\n\n**Navigation**\n- Top navigation bar with org/project context switcher\n- Sidebar navigation with role-based menu items\n- Breadcrumb navigation for deep pages\n- Tab navigation for multi-view pages (Findings/Templates/Exports)\n\n**Data Display**\n- Dense data tables with sorting, filtering, and pagination\n- Finding cards with severity indicators and status badges\n- Evidence galleries with thumbnail previews\n- Activity timelines with user avatars and timestamps\n\n**Forms & Input**\n- Rich text editors with sanitized HTML toolbar\n- File upload areas with drag-and-drop and progress indicators\n- CVSS calculator with visual vector breakdown\n- Multi-select dropdowns for tags and assets\n\n**Status & Feedback**\n- Severity pills with color-coded backgrounds\n- Status badges with appropriate semantic colors\n- Progress indicators for long-running exports\n- Toast notifications for actions and updates\n\n**Overlays**\n- Modal dialogs for finding creation/editing\n- Slide-over panels for comments and activity\n- Dropdown menus for bulk actions\n- Confirmation dialogs for destructive actions\n\n### E. Security-Focused Design Patterns\n\n**Trust Indicators**\n- Audit trail visibility with timestamps and user attribution\n- Version history with clear diff indicators\n- Export validation with checksums and metadata\n- Template version tracking with change indicators\n\n**Data Hierarchy**\n- Critical findings prominently displayed with red indicators\n- Evidence thumbnails with hover previews\n- Expandable sections for detailed technical content\n- Clear separation between draft and submitted content\n\n**Role-Based UI**\n- Dynamic navigation based on user permissions\n- Contextual action buttons (submit, approve, export)\n- Clear visual distinction between read-only and editable content\n- Role badges and project access indicators\n\n## Key Pages Layout\n\n**Researcher Dashboard**\n- Left sidebar: Project list with search and filters\n- Main area: Selected project findings table\n- Right panel: Quick actions and recent activity\n\n**Customer Portal**\n- Header: Project overview with severity summary cards\n- Tabbed interface: Findings | Templates | Exports | Activity\n- Findings table with advanced filtering and bulk actions\n\n**Finding Editor**\n- Tabbed form: Details | Steps | Impact | Fix | Evidence\n- Split view: Form on left, preview on right\n- Floating save/submit actions bar\n\n**Template Manager**\n- Template library with preview thumbnails\n- Side-by-side editor and preview for HTML templates\n- Variable reference panel with drag-and-drop placeholders\n\n## Animations\nMinimal and purposeful:\n- Smooth page transitions (200ms ease-in-out)\n- Loading states for data fetching\n- Hover states for interactive elements\n- No decorative animations to maintain professional focus","size_bytes":4269},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"scripts/create-default-template.ts":{"content":"import { storage } from \"../server/storage\";\n\nconst DEFAULT_VAPT_TEMPLATE_HTML = `<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\" />\n    <style>\n    html {\n        font-size: 14px;\n        word-wrap: break-word;\n    }\n\n    body {\n        font-family: 'Arial', sans-serif;\n        line-height: 1.6;  \n        margin: 0;\n        padding: 0;\n    }\n\n    pre {\n        font-family: 'Arial';\n        overflow-x: auto;\n        white-space: pre-wrap;\n        white-space: -moz-pre-wrap;\n        white-space: -pre-wrap;\n        white-space: -o-pre-wrap;\n        word-wrap: break-word;\n        line-height: 1.6;\n    }\n\n    .footer-text {\n        font-size: 10px;\n        color: #666;\n        display: inline-block;\n    }\n\n    .footer-link {\n        font-size: 11px;\n        color: #4299e1;\n        font-weight: 500;\n        display: inline-block;\n    }\n\n    .footer-image {\n        width: 70px;\n        opacity: 0.3;\n    }\n\n    .page {\n        position: relative;\n        display: block;\n        page-break-after: auto;\n        margin: 15mm;\n        margin-bottom: 10mm;\n        overflow: hidden;\n    }\n\n    .flex {\n        display: -webkit-box;\n        display: -webkit-flex;\n        display: flex;\n    }\n\n    .justify-start {\n        -webkit-box-pack: start;\n        -webkit-justify-content: flex-start;\n        justify-content: flex-start;\n    }\n\n    .justify-end {\n        -webkit-box-pack: end;\n        -webkit-justify-content: flex-end;\n        justify-content: flex-end;\n    }\n\n    .justify-center {\n        -webkit-box-pack: center;\n        -webkit-justify-content: center;\n        justify-content: center;\n    }\n\n    .justify-between {\n        -webkit-box-pack: justify;\n        -webkit-justify-content: space-between;\n        justify-content: space-between;\n    }\n\n    .justify-around {\n        -webkit-justify-content: space-around;\n        justify-content: space-around;\n    }\n\n    .justify-evenly {\n        -webkit-box-pack: space-evenly;\n        -webkit-justify-content: space-evenly;\n        justify-content: space-evenly;\n    }\n\n    .items-start {\n        -webkit-box-align: start;\n        -webkit-align-items: flex-start;\n        align-items: flex-start;\n    }\n\n    .items-end {\n        -webkit-box-align: end;\n        -webkit-align-items: flex-end;\n        align-items: flex-end;\n    }\n\n    .items-center {\n        -webkit-box-align: center;\n        -webkit-align-items: center;\n        align-items: center;\n    }\n    .critical {\n      color: #CC0500;\n    }\n    .high{\n      color: #DF3D03;\n    }\n    .medium {\n      color: #F9A009;\n    }\n    .low {\n      color: #ffcb0d;\n    }\n    .none{\n      color: #53aa33;\n    }\n\n    .border-critical {\n      border-color: #CC0500;\n    }\n    .border-high{\n      border-color: #DF3D03;\n    }\n    .border-medium {\n      border-color: #F9A009;\n    }\n    .border-low {\n      border-color: #ffcb0d;\n    }\n    .border-none{\n      border-color: #53aa33;\n    }\n\n    /* Basic utility classes */\n    .w-full { width: 100%; }\n    .w-1-2 { width: 50%; }\n    .w-1-6 { width: 16.66%; }\n    .w-5-6 { width: 83.33%; }\n    .mt-8 { margin-top: 2rem; }\n    .mt-16 { margin-top: 4rem; }\n    .ml-4 { margin-left: 1rem; }\n    .my-2 { margin-top: 0.5rem; margin-bottom: 0.5rem; }\n    .my-4 { margin-top: 1rem; margin-bottom: 1rem; }\n    .my-6 { margin-top: 1.5rem; margin-bottom: 1.5rem; }\n    .mb-3 { margin-bottom: 0.75rem; }\n    .mb-8 { margin-bottom: 2rem; }\n    .pl-2 { padding-left: 0.5rem; }\n    .pl-4 { padding-left: 1rem; }\n    .px-2 { padding-left: 0.5rem; padding-right: 0.5rem; }\n    .px-4 { padding-left: 1rem; padding-right: 1rem; }\n    .py-2 { padding-top: 0.5rem; padding-bottom: 0.5rem; }\n    .py-4 { padding-top: 1rem; padding-bottom: 1rem; }\n    .py-5 { padding-top: 1.25rem; padding-bottom: 1.25rem; }\n    .pb-2 { padding-bottom: 0.5rem; }\n    .pb-3 { padding-bottom: 0.75rem; }\n    .pb-5 { padding-bottom: 1.25rem; }\n    .pt-2 { padding-top: 0.5rem; }\n    .text-xl { font-size: 1.25rem; }\n    .text-lg { font-size: 1.125rem; }\n    .text-base { font-size: 1rem; }\n    .text-sm { font-size: 0.875rem; }\n    .text-xs { font-size: 0.75rem; }\n    .font-medium { font-weight: 500; }\n    .font-semibold { font-weight: 600; }\n    .font-light { font-weight: 300; }\n    .text-gray-900 { color: #1a202c; }\n    .text-gray-800 { color: #2d3748; }\n    .text-gray-700 { color: #4a5568; }\n    .text-blue-500 { color: #3182ce; }\n    .text-black { color: #000; }\n    .text-center { text-align: center; }\n    .text-left { text-align: left; }\n    .border { border: 1px solid #e2e8f0; }\n    .border-b { border-bottom: 1px solid #e2e8f0; }\n    .border-b-2 { border-bottom: 2px solid #e2e8f0; }\n    .bg-gray-100 { background-color: #f7fafc; }\n    .rounded { border-radius: 0.25rem; }\n    .leading-6 { line-height: 1.5; }\n    .break-words { word-wrap: break-word; }\n    .table { display: table; }\n    .table-auto { table-layout: auto; }\n    .table-row { display: table-row; }\n    .table-row-group { display: table-row-group; }\n    .table-cell { display: table-cell; }\n\n    @media print {\n        .page {\n            margin: 0;\n            min-height: 100%;\n            width: 100%;\n        }\n    }\n    </style>\n    <title>{{report_title}}</title>\n</head>\n\n<body>\n    <!-- Cover Page -->\n    <div class=\"page\">\n        <div style=\"text-align: center; margin-top: 100px;\">\n            <h1 style=\"font-size: 18px; font-weight: bold; margin-bottom: 20px;\">{{company_name}} {{application_type}}</h1>\n            <h2 style=\"font-size: 16px; font-weight: bold; margin-bottom: 60px;\">Security Assessment Report</h2>\n            \n            <div style=\"margin: 60px 0;\">\n                {{#each test_scope}}\n                <p style=\"margin: 10px 0;\">{{this}}</p>\n                {{/each}}\n            </div>\n            \n            <div style=\"margin-top: 100px;\">\n                <p style=\"font-weight: bold;\">REPORT PUBLISH DATE</p>\n                <p style=\"margin-top: 10px;\">{{test_time}}</p>\n            </div>\n        </div>\n        \n        <div style=\"position: absolute; bottom: 30px; width: 100%; text-align: center;\">\n            <p style=\"font-size: 12px;\">Page 1 of 14 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; © {{organization_name}} {{current_year}}</p>\n        </div>\n        <div style=\"page-break-after: always;\"></div>\n    </div>\n\n    <!-- Contents -->\n    <div class=\"page\">\n        <h1 style=\"font-size: 18px; font-weight: bold; margin-bottom: 20px;\">Contents</h1>\n        <div style=\"margin-top: 30px;\">\n            <table style=\"width: 100%; font-size: 12px;\">\n                <tr>\n                    <td>Executive Summary</td>\n                    <td style=\"text-align: right;\">3</td>\n                </tr>\n                <tr>\n                    <td>Security Checklist</td>\n                    <td style=\"text-align: right;\">4</td>\n                </tr>\n                <tr>\n                    <td>Scope of Work</td>\n                    <td style=\"text-align: right;\">7</td>\n                </tr>\n                <tr>\n                    <td>Methodology</td>\n                    <td style=\"text-align: right;\">9</td>\n                </tr>\n                <tr>\n                    <td style=\"padding-left: 20px;\">Pre Engagement</td>\n                    <td style=\"text-align: right;\">9</td>\n                </tr>\n                <tr>\n                    <td style=\"padding-left: 20px;\">Penetration Testing</td>\n                    <td style=\"text-align: right;\">9</td>\n                </tr>\n                <tr>\n                    <td style=\"padding-left: 20px;\">Post Engagement | 30 days time after Reporting (Reverification)</td>\n                    <td style=\"text-align: right;\">9</td>\n                </tr>\n                <tr>\n                    <td style=\"padding-left: 20px;\">Severity Ratings</td>\n                    <td style=\"text-align: right;\">10</td>\n                </tr>\n                <tr>\n                    <td style=\"padding-left: 20px;\">Severity Rating Scale</td>\n                    <td style=\"text-align: right;\">10</td>\n                </tr>\n                <tr>\n                    <td>Vulnerabilities Summary</td>\n                    <td style=\"text-align: right;\">11</td>\n                </tr>\n                <tr>\n                    <td>Appendix A - Vulnerability Summary & Recommendations</td>\n                    <td style=\"text-align: right;\">12</td>\n                </tr>\n            </table>\n        </div>\n        <div style=\"position: absolute; bottom: 30px; width: 100%; text-align: center;\">\n            <p style=\"font-size: 12px;\">Page 2 of 14 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; © {{organization_name}} {{current_year}}</p>\n        </div>\n        <div style=\"page-break-after: always;\"></div>\n    </div>\n\n    <!-- Executive Summary Page -->\n    <div class=\"page\">\n        <h1 style=\"font-size: 18px; font-weight: bold; margin-bottom: 20px;\">Executive Summary</h1>\n        <div style=\"font-size: 12px; line-height: 1.6; text-align: justify;\">\n            <p style=\"margin-bottom: 15px;\">{{organization_name}} successfully conducted a comprehensive Vulnerability Assessment and Penetration Testing (VAPT) engagement for {{company_name}}'s {{application_type}}. The objective was to identify security gaps that could expose the organization to potential threats and ensure compliance with industry best practices.</p>\n            \n            <p style=\"margin-bottom: 15px;\">The assessment methodology included both manual and automated testing approaches, providing an in-depth evaluation of the application's security posture. Testing was guided by the OWASP Top 10 Web Application Security Risks, covering critical areas such as authentication, access control, input validation, and session management.</p>\n            \n            <p style=\"margin-bottom: 15px;\">{{executive_summary}}</p>\n            \n            <p style=\"margin-bottom: 15px;\">Below is a graphical representation of the vulnerabilities discovered</p>\n        </div>\n        \n        <div style=\"position: absolute; bottom: 30px; width: 100%; text-align: center;\">\n            <p style=\"font-size: 12px;\">Page 3 of 14 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; © {{organization_name}} {{current_year}}</p>\n        </div>\n        <div style=\"page-break-after: always;\"></div>\n    </div>\n\n    <!-- Security Checklist Page -->\n    <div class=\"page\">\n        <h1 style=\"font-size: 18px; font-weight: bold; margin-bottom: 20px;\">Security Checklist</h1>\n        <div style=\"margin-top: 30px; font-size: 10px;\">\n            <!-- Identity Management Testing -->\n            <table style=\"width: 100%; border-collapse: collapse; margin-bottom: 20px;\">\n                <thead>\n                    <tr>\n                        <th style=\"background-color: #f0f0f0; padding: 10px; border: 1px solid #ccc; text-align: left;\" colspan=\"2\">1. Identity Management Testing</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td style=\"border: 1px solid #ccc; padding: 8px; width: 50%;\">1.1 Test Role Definitions</td>\n                        <td style=\"border: 1px solid #ccc; padding: 8px;\">1.2 Test User Registration Process</td>\n                    </tr>\n                    <tr>\n                        <td style=\"border: 1px solid #ccc; padding: 8px;\">1.3 Test Account Provisioning Process</td>\n                        <td style=\"border: 1px solid #ccc; padding: 8px;\">1.4 Testing for Account Enumeration and Guessable User Account</td>\n                    </tr>\n                    <tr>\n                        <td style=\"border: 1px solid #ccc; padding: 8px;\">1.5 Testing for Weak or Unenforced Username Policy</td>\n                        <td style=\"border: 1px solid #ccc; padding: 8px;\"></td>\n                    </tr>\n                </tbody>\n            </table>\n\n            <!-- Authentication Testing -->\n            <table style=\"width: 100%; border-collapse: collapse; margin-bottom: 20px;\">\n                <thead>\n                    <tr>\n                        <th style=\"background-color: #f0f0f0; padding: 10px; border: 1px solid #ccc; text-align: left;\" colspan=\"2\">2. Authentication Testing</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td style=\"border: 1px solid #ccc; padding: 8px; width: 50%;\">2.1 Testing for Credentials Transported over an Encrypted Channel</td>\n                        <td style=\"border: 1px solid #ccc; padding: 8px;\">2.2 Testing for Default Credentials</td>\n                    </tr>\n                    <tr>\n                        <td style=\"border: 1px solid #ccc; padding: 8px;\">2.3 Testing for Weak Lock Out Mechanism</td>\n                        <td style=\"border: 1px solid #ccc; padding: 8px;\">2.4 Testing for Bypassing Authentication Schema</td>\n                    </tr>\n                    <tr>\n                        <td style=\"border: 1px solid #ccc; padding: 8px;\">2.5 Testing for Vulnerable Remember Password</td>\n                        <td style=\"border: 1px solid #ccc; padding: 8px;\">2.6 Testing for Browser Cache Weaknesses</td>\n                    </tr>\n                    <tr>\n                        <td style=\"border: 1px solid #ccc; padding: 8px;\">2.7 Testing for Weak Password Policy</td>\n                        <td style=\"border: 1px solid #ccc; padding: 8px;\">2.8 Testing for Weak Security Question Answer</td>\n                    </tr>\n                    <tr>\n                        <td style=\"border: 1px solid #ccc; padding: 8px;\">2.9 Testing for Weak Password Change or Reset Functionalities</td>\n                        <td style=\"border: 1px solid #ccc; padding: 8px;\">2.10 Testing for Weaker Authentication in Alternative Channel</td>\n                    </tr>\n                </tbody>\n            </table>\n\n            <!-- Add more security categories as needed -->\n        </div>\n        \n        <div style=\"position: absolute; bottom: 30px; width: 100%; text-align: center;\">\n            <p style=\"font-size: 12px;\">Page 4 of 14 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; © {{organization_name}} {{current_year}}</p>\n        </div>\n        <div style=\"page-break-after: always;\"></div>\n    </div>\n\n    <!-- Scope of Work Page -->\n    <div class=\"page\">\n        <h1 style=\"font-size: 18px; font-weight: bold; margin-bottom: 20px;\">Scope of Work</h1>\n        \n        <h2 style=\"font-size: 14px; font-weight: bold; margin-bottom: 15px; margin-top: 30px;\">Coverage</h2>\n        <div style=\"font-size: 12px; line-height: 1.6; text-align: justify;\">\n            <p style=\"margin-bottom: 15px;\">This penetration test was a manual assessment of the security of the app's functionality, business logic, and vulnerabilities such as those cataloged in the OWASP Top 10. The assessment also included a review of security controls and requirements listed in the OWASP Application Security Verification Standard (ASVS). The researchers rely on tools to facilitate their work, but the majority of the assessment involves manual analysis.</p>\n            \n            <p style=\"margin-bottom: 10px;\">The following is a quick summary of the main tests performed on the {{application_type}}:</p>\n            <ul style=\"margin-left: 20px; margin-bottom: 15px;\">\n                <li style=\"margin-bottom: 5px;\">Authenticated user testing for session and authentication issues</li>\n                <li style=\"margin-bottom: 5px;\">Authorization testing for privilege escalation and access control issues</li>\n                <li style=\"margin-bottom: 5px;\">Input injection tests (SQL injection, XSS, and others)</li>\n                <li style=\"margin-bottom: 5px;\">Platform configuration and infrastructure tests</li>\n                <li style=\"margin-bottom: 5px;\">OWASP Top 10 Assessment</li>\n            </ul>\n            <p style=\"margin-bottom: 15px;\">The team had access to authenticated users, enabling them to test security controls across roles and permissions.</p>\n        </div>\n        \n        <div style=\"position: absolute; bottom: 30px; width: 100%; text-align: center;\">\n            <p style=\"font-size: 12px;\">Page 7 of 14 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; © {{organization_name}} {{current_year}}</p>\n        </div>\n        <div style=\"page-break-after: always;\"></div>\n    </div>\n\n    <!-- Scope Target Description and Assumptions Page -->\n    <div class=\"page\">\n        <h2 style=\"font-size: 14px; font-weight: bold; margin-bottom: 15px;\">Target description</h2>\n        <div style=\"font-size: 12px; line-height: 1.6;\">\n            <p style=\"margin-bottom: 10px;\">The following URLs/apps were in scope for this assessment:</p>\n            <ul style=\"margin-left: 20px; margin-bottom: 20px;\">\n                {{#each test_scope}}\n                <li style=\"margin-bottom: 5px;\">{{this}}</li>\n                {{/each}}\n            </ul>\n        </div>\n        \n        <h2 style=\"font-size: 14px; font-weight: bold; margin-bottom: 15px;\">Assumptions/Constraints</h2>\n        <div style=\"font-size: 12px; line-height: 1.6;\">\n            <p style=\"margin-bottom: 15px;\">1. The issues identified and proposed action plans in this report are based on our testing performed within the limited timespan and limited access to the servers. We made specific efforts to verify the accuracy and authenticity of the information gathered only in those cases where it was deemed necessary.</p>\n            \n            <p style=\"margin-bottom: 15px;\">2. While precautions have been taken in the preparation of this document, {{organization_name}} the publisher, and the author(s) assume no responsibility for errors, omissions, or for damages resulting from the use of the information contained herein. Use of {{organization_name}}'s services does not guarantee the security of a system, or that computer intrusions will not occur.</p>\n            \n            <p style=\"margin-bottom: 15px;\">3. Any configuration changes or software/hardware updates made on hosts/machines or on the application covered in this test after the date mentioned herein may impact the security posture either positively or negatively and hence invalidates the claims & observations in this report. Whenever there is a change in the architecture, we recommend that you conduct a vulnerability assessment and penetration test to ensure that your security posture is compliant with your security policies.</p>\n        </div>\n        \n        <div style=\"position: absolute; bottom: 30px; width: 100%; text-align: center;\">\n            <p style=\"font-size: 12px;\">Page 8 of 14 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; © {{organization_name}} {{current_year}}</p>\n        </div>\n        <div style=\"page-break-after: always;\"></div>\n    </div>\n\n    <!-- Methodology Page -->\n    <div class=\"page text-gray-700 text-sm font-light\">\n        <h1 class=\"text-lg font-medium text-gray-900\">Methodology</h1>\n        <div class=\"w-full border border-b border-grey-200 my-2\"></div>\n        <p>The test was done according to penetration testing best practices. The flow from start to finish is listed below.</p>\n        \n        <div class=\"my-4 pl-4\">\n            <p class=\"font-medium text-gray-800\">Pre Engagement</p>\n            <div class=\"pl-4 text-xs\">\n                <li class=\"my-2\">Scoping</li>\n                <li class=\"my-2\">Discovery</li>\n            </div>\n        </div>\n        \n        <div class=\"my-4 pl-4\">\n            <p class=\"font-medium text-gray-800\">Penetration Testing</p>\n            <div class=\"pl-4 text-xs\">\n                <li class=\"my-2\">Tool assisted assessment</li>\n                <li class=\"my-2\">Manual assessment of OWASP top 10/SANS top 25 & business logic flaws</li>\n                <li class=\"my-2\">Exploitation</li>\n                <li class=\"my-2\">Risk analysis</li>\n                <li class=\"my-2\">Reporting</li>\n            </div>\n        </div>\n        \n        <div class=\"my-4 pl-4\">\n            <p class=\"font-medium text-gray-800\">Post Engagement</p>\n            <div class=\"pl-4 text-xs\">\n                <li class=\"my-2\">Best practice support</li>\n                <li class=\"my-2\">Re-testing</li>\n            </div>\n        </div>\n\n        <h2 class=\"text-base text-gray-800 font-medium mb-1 mt-8\">Severity Ratings</h2>\n        <p class=\"pb-5\">The Common Vulnerability Scoring System (CVSS) v3.0 is a framework for rating the severity of security vulnerabilities in software. Operated by the Forum of Incident Response and Security Teams (FIRST), the CVSS uses an algorithm to determine three severity rating scores: Base, Temporal and Environmental. The scores are numeric; they range from 0.0 through 10.0 with 10.0 being the most severe.</p>\n        \n        <h2 class=\"text-base text-gray-800 font-medium mb-1\">Severity Rating Scale</h2>\n        <p class=\"pb-5\">Findings are grouped into four criticality levels based on their risk.</p>\n        \n        <div style=\"page-break-after: always;\"></div>\n    </div>\n\n    <!-- Vulnerabilities Summary -->\n    <div class=\"page text-gray-700 text-sm font-light\">\n        <h1 class=\"text-lg font-medium text-gray-900\">Vulnerabilities Summary</h1>\n        <div class=\"table w-full\">\n            <div class=\"table-row-group\">\n                <div class=\"table-row text-xs\" style=\"background-color: #dde7ea;\">\n                    <div class=\"table-cell text-gray-800 px-2 pl-4 py-4\">S.NO.</div>\n                    <div class=\"table-cell text-gray-800 px-2 pl-4 py-4\">VULNERABILITY TITLE</div>\n                    <div class=\"table-cell text-gray-800 px-2 py-5 text-center\">IMPACT</div>\n                    <div class=\"table-cell text-gray-800 px-2 py-5 text-center\">STATE</div>\n                </div>\n                {{#each findings}}\n                <div class=\"table-row bg-gray-100\" style=\"background-color:rgb(247, 250, 252);\">\n                    <div class=\"table-cell text-blue-500 px-2 pl-4 py-5\">{{@index}}</div>\n                    <div class=\"table-cell text-blue-500 px-2 pl-4 py-5\">{{title}}</div>\n                    <div class=\"table-cell text-gray-800 px-2 py-5 text-center {{severity}}\">{{severity}}</div>\n                    <div class=\"table-cell text-gray-800 px-2 py-5 text-center\">{{status}}</div>\n                </div>\n                {{/each}}\n            </div>\n        </div>\n        <div style=\"page-break-after: always;\"></div>\n    </div>\n\n    <!-- Appendix A - Vulnerability Summary & Recommendations -->\n    <div class=\"page text-gray-700 text-sm font-light\">\n        <h1 class=\"text-lg font-medium text-gray-900\">Appendix A - Vulnerability Summary & Recommendations</h1>\n        \n        {{#each findings}}\n        <!-- Individual Finding -->\n        <div class=\"flex items-center w-full my-2 pb-3 border-b-2 border-gray-200\">\n            <div class=\"w-5-6\">\n                <h1 class=\"text-sm font-medium text-gray-800 break-words\">\n                    <span class=\"text-xs text-gray-700 font-normal\">#{{@index}} </span>{{title}}\n                </h1>\n                <div class=\"flex items-center my-2 font-medium\" style=\"font-size: 10px;\">\n                    <span class=\"{{severity}} border border-{{severity}} px-2 rounded\">{{severity}}</span>\n                    <p class=\"pl-2 text-gray-700\">{{type}}</p>\n                </div>\n                {{#if cvssScore}}\n                <div class=\"flex items-center my-2 font-medium\" style=\"font-size: 10px;\">\n                    <p class=\"pl-2 text-gray-700\">CVSS Score: {{cvssScore}}</p>\n                </div>\n                {{/if}}\n                {{#if cvssVector}}\n                <div class=\"flex items-center my-2 font-medium\" style=\"font-size: 10px;\">\n                    <p class=\"pl-2 text-gray-700\">CVSS Vector: {{cvssVector}}</p>\n                </div>\n                {{/if}}\n            </div>\n        </div>\n\n        <div class=\"flex w-full my-6 pb-3 border-b-2 border-gray-200 text-xs\">\n            <div class=\"w-1-6 text-xs mr-2 text-gray-700\">DESCRIPTION</div>\n            <div class=\"w-5-6 pl-2 break-words text-xs\">\n                <pre>{{description}}</pre>\n            </div>\n        </div>\n\n        <div class=\"flex w-full my-6 pb-3 border-b-2 border-gray-200 text-xs\">\n            <div class=\"w-1-6 text-xs mr-2 text-gray-700\">STEPS TO REPRODUCE</div>\n            <div class=\"w-5-6 pl-2 break-words text-xs\">\n                <pre>{{stepsToReproduce}}</pre>\n            </div>\n        </div>\n\n        {{#if screenshots}}\n        <div class=\"flex w-full my-6 pb-3 border-b-2 border-gray-200 text-xs\">\n            <div class=\"w-1-6 text-xs mr-2 text-gray-700\">SCREENSHOTS</div>\n            <div class=\"w-5-6 pl-2 break-words text-xs\">\n                {{#each screenshots}}\n                <img style=\"max-height: 400px; width: auto; max-width: 100%; height: auto;\" src=\"{{this}}\" /><br>\n                {{/each}}\n            </div>\n        </div>\n        {{/if}}\n\n        <div class=\"flex w-full my-6 pb-3 border-b-2 border-gray-200 text-xs\">\n            <div class=\"w-1-6 text-xs mr-2 text-gray-700\">IMPACT</div>\n            <div class=\"w-5-6 pl-2 break-words text-xs\">\n                <pre>{{impact}}</pre>\n            </div>\n        </div>\n\n        {{#if httpRequest}}\n        <div class=\"flex w-full my-6 pb-3 border-b-2 border-gray-200 text-xs\">\n            <div class=\"w-1-6 text-xs mr-2 text-gray-700\">HTTP REQUEST</div>\n            <div class=\"w-5-6 p-2 break-words text-xs\" style=\"background-color: rgb(237, 242, 247);\">\n                <pre>{{httpRequest}}</pre>\n            </div>\n        </div>\n        {{/if}}\n\n        <div class=\"flex w-full my-6 pb-3 border-b-2 border-gray-200 text-xs\">\n            <div class=\"w-1-6 text-xs mr-2 text-gray-700\">SUGGESTED FIX</div>\n            <div class=\"w-5-6 pl-2 break-words text-xs\">\n                <pre>{{recommendation}}</pre>\n            </div>\n        </div>\n\n        <div style=\"page-break-after: always;\"></div>\n        {{/each}}\n    </div>\n</body>\n</html>`;\n\nconst TEMPLATE_VARIABLES = [\n  {\n    name: \"report_title\",\n    description: \"Main title of the penetration testing report\",\n    type: \"string\",\n    required: true,\n    example: \"Vulnerability Assessment and Penetration Testing Report\"\n  },\n  {\n    name: \"company_name\",\n    description: \"Name of the client company\",\n    type: \"string\",\n    required: true,\n    example: \"ACME Corporation\"\n  },\n  {\n    name: \"application_type\",\n    description: \"Type of application being tested\",\n    type: \"string\",\n    required: true,\n    example: \"Web Application\"\n  },\n  {\n    name: \"organization_name\",\n    description: \"Name of the testing organization\",\n    type: \"string\",\n    required: true,\n    example: \"AppSecure\"\n  },\n  {\n    name: \"current_year\",\n    description: \"Current year for copyright notice\",\n    type: \"string\",\n    required: true,\n    example: \"2024\"\n  },\n  {\n    name: \"test_scope\",\n    description: \"Array of URLs/applications that were tested\",\n    type: \"array\",\n    required: true,\n    example: [\"https://www.acme.com\"]\n  },\n  {\n    name: \"test_time\",\n    description: \"Date when the test was performed\",\n    type: \"string\",\n    required: true,\n    example: \"Tue May 23 2024 11:15:40 GMT+0000 (UTC)\"\n  },\n  {\n    name: \"testers\",\n    description: \"Array of testers with name and role properties\",\n    type: \"array\",\n    required: false,\n    example: [{\"name\": \"John Doe\", \"role\": \"Senior Security Researcher\"}]\n  },\n  {\n    name: \"executive_summary\", \n    description: \"Executive summary of the assessment\",\n    type: \"string\",\n    required: true,\n    example: \"This report summarizes the findings from the security assessment...\"\n  },\n  {\n    name: \"coverage_asset_type\",\n    description: \"Type of asset being tested (web application, mobile app, etc.)\",\n    type: \"string\",\n    required: true,\n    example: \"web application\"\n  },\n  {\n    name: \"assumptions\",\n    description: \"Assumptions and constraints for the testing\",\n    type: \"string\",\n    required: true,\n    example: \"Testing was performed with provided user accounts...\"\n  },\n  {\n    name: \"findings\",\n    description: \"Array of security findings/vulnerabilities\",\n    type: \"array\",\n    required: true,\n    example: [{\n      \"title\": \"SQL Injection in Login Form\",\n      \"description\": \"The application is vulnerable to SQL injection...\",\n      \"severity\": \"high\",\n      \"type\": \"Input Validation\",\n      \"cvssScore\": \"8.1\",\n      \"cvssVector\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N\",\n      \"stepsToReproduce\": \"1. Navigate to login page...\",\n      \"impact\": \"An attacker could extract sensitive data...\",\n      \"httpRequest\": \"POST /login HTTP/1.1...\",\n      \"recommendation\": \"Use parameterized queries...\",\n      \"screenshots\": [\"https://example.com/screenshot1.png\"],\n      \"status\": \"Open\"\n    }]\n  }\n];\n\nexport async function createDefaultVAPTTemplate(organizationId: string, createdBy: string) {\n  console.log(\"Creating default VAPT template...\");\n  \n  try {\n    const template = await storage.createTemplate({\n      name: \"Professional VAPT Report Template\",\n      description: \"Comprehensive vulnerability assessment and penetration testing report template with OWASP security checklist, executive summary, methodology, and detailed findings sections.\",\n      type: \"html\" as const,\n      content: DEFAULT_VAPT_TEMPLATE_HTML,\n      variables: TEMPLATE_VARIABLES,\n      organizationId,\n      isDefault: true,\n      version: 1,\n      createdBy\n    });\n    \n    console.log(\"Default VAPT template created successfully:\", template.id);\n    return template;\n  } catch (error) {\n    console.error(\"Error creating default VAPT template:\", error);\n    throw error;\n  }\n}\n\n// Export for use in other files\nexport { DEFAULT_VAPT_TEMPLATE_HTML, TEMPLATE_VARIABLES };","size_bytes":32182},"server/auth.ts":{"content":"import bcrypt from 'bcryptjs';\nimport type { Express, RequestHandler } from \"express\";\nimport session from \"express-session\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\n// Simple in-memory rate limiting for login attempts\nconst loginAttempts = new Map<string, { count: number; lastAttempt: number }>();\nconst MAX_LOGIN_ATTEMPTS = 5;\nconst RATE_LIMIT_WINDOW = 15 * 60 * 1000; // 15 minutes\n\nconst checkRateLimit = (ip: string): boolean => {\n  const now = Date.now();\n  const attempts = loginAttempts.get(ip);\n  \n  if (!attempts) {\n    loginAttempts.set(ip, { count: 1, lastAttempt: now });\n    return true;\n  }\n  \n  // Reset if outside window\n  if (now - attempts.lastAttempt > RATE_LIMIT_WINDOW) {\n    loginAttempts.set(ip, { count: 1, lastAttempt: now });\n    return true;\n  }\n  \n  // Check if exceeded limit\n  if (attempts.count >= MAX_LOGIN_ATTEMPTS) {\n    return false;\n  }\n  \n  // Increment count\n  attempts.count++;\n  attempts.lastAttempt = now;\n  return true;\n};\n\nconst resetRateLimit = (ip: string): void => {\n  loginAttempts.delete(ip);\n};\n\nconst SALT_ROUNDS = 12;\n\n// Password utilities\nexport const hashPassword = async (password: string): Promise<string> => {\n  return bcrypt.hash(password, SALT_ROUNDS);\n};\n\nexport const verifyPassword = async (password: string, hash: string): Promise<boolean> => {\n  return bcrypt.compare(password, hash);\n};\n\n// Session configuration\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      sameSite: 'lax', // CSRF protection\n      maxAge: sessionTtl,\n    },\n  });\n}\n\n// Authentication middleware\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  if (!req.session?.userId) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n  \n  // Attach user to request for convenience\n  try {\n    const user = await storage.getUser(req.session.userId);\n    if (!user || !user.isActive) {\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n    (req as any).user = user;\n    next();\n  } catch (error) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n};\n\n// Role-based access control middleware\nexport const hasPermission = (requiredPermission: string): RequestHandler => {\n  return async (req, res, next) => {\n    try {\n      const user = (req as any).user;\n      \n      if (!user) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      \n      // Check if user is super admin first (bypass all permissions)\n      if (user.role === 'super_admin') {\n        return next();\n      }\n      \n      // Get user permissions efficiently in one query\n      const userPermissions = await storage.getUserPermissions(user.id);\n      \n      if (!userPermissions.has(requiredPermission)) {\n        return res.status(403).json({ \n          message: \"Access denied\", \n          requiredPermission \n        });\n      }\n      \n      next();\n    } catch (error) {\n      console.error(\"Error checking permissions:\", error);\n      res.status(500).json({ message: \"Error checking permissions\" });\n    }\n  };\n};\n\n// Check multiple permissions (user must have ALL of them)\nexport const hasAllPermissions = (requiredPermissions: string[]): RequestHandler => {\n  return async (req, res, next) => {\n    try {\n      const user = (req as any).user;\n      \n      if (!user) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      \n      // Check if user is super admin first (bypass all permissions)\n      if (user.role === 'super_admin') {\n        return next();\n      }\n      \n      // Get user permissions efficiently in one query\n      const userPermissions = await storage.getUserPermissions(user.id);\n      \n      // Check if user has all required permissions\n      const missingPermissions = requiredPermissions.filter(p => !userPermissions.has(p));\n      \n      if (missingPermissions.length > 0) {\n        return res.status(403).json({ \n          message: \"Access denied\", \n          missingPermissions \n        });\n      }\n      \n      next();\n    } catch (error) {\n      console.error(\"Error checking permissions:\", error);\n      res.status(500).json({ message: \"Error checking permissions\" });\n    }\n  };\n};\n\n// Check if user has any of the provided permissions\nexport const hasAnyPermission = (allowedPermissions: string[]): RequestHandler => {\n  return async (req, res, next) => {\n    try {\n      const user = (req as any).user;\n      \n      if (!user) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      \n      // Check if user is super admin first (bypass all permissions)\n      if (user.role === 'super_admin') {\n        return next();\n      }\n      \n      // Get user permissions efficiently in one query\n      const userPermissions = await storage.getUserPermissions(user.id);\n      \n      // Check if user has any of the allowed permissions\n      const hasAllowedPermission = allowedPermissions.some(p => userPermissions.has(p));\n      \n      if (!hasAllowedPermission) {\n        return res.status(403).json({ \n          message: \"Access denied\", \n          allowedPermissions \n        });\n      }\n      \n      next();\n    } catch (error) {\n      console.error(\"Error checking permissions:\", error);\n      res.status(500).json({ message: \"Error checking permissions\" });\n    }\n  };\n};\n\n// Super admin check - users with role 'super_admin'\nexport const isSuperAdmin: RequestHandler = async (req, res, next) => {\n  try {\n    const user = (req as any).user;\n    \n    if (!user) {\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n    \n    if (user.role !== 'super_admin') {\n      return res.status(403).json({ \n        message: \"Super admin access required\" \n      });\n    }\n    \n    next();\n  } catch (error) {\n    console.error(\"Error checking super admin status:\", error);\n    res.status(500).json({ message: \"Error checking admin status\" });\n  }\n};\n\n// Setup authentication\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n\n  // Signup endpoint with hardcoded token for super admin creation\n  app.post(\"/api/signup\", async (req, res) => {\n    try {\n      const { email, password, token } = req.body;\n\n      if (!email || !password || !token) {\n        return res.status(400).json({ message: \"Email, password, and token are required\" });\n      }\n\n      // Check hardcoded signup token\n      if (token !== \"Q7emI3Z3tOo6b2xc70\") {\n        return res.status(403).json({ message: \"Invalid signup token\" });\n      }\n\n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(409).json({ message: \"User already exists\" });\n      }\n\n      // Hash password\n      const passwordHash = await hashPassword(password);\n\n      // Create a default organization for the super admin\n      const defaultOrg = await storage.createOrganization({\n        name: \"Admin Organization\",\n        domain: email.split('@')[1] || \"admin.local\",\n        settings: {}\n      });\n\n      // Create super admin user with organization\n      const newUser = {\n        email,\n        firstName: \"Super\",\n        lastName: \"Admin\",\n        passwordHash,\n        role: \"super_admin\" as const,\n        organizationId: defaultOrg.id,\n        isActive: true\n      };\n\n      const createdUser = await storage.upsertUser(newUser);\n\n      res.status(201).json({\n        message: \"Super admin account created successfully\",\n        user: {\n          id: createdUser.id,\n          email: createdUser.email,\n          firstName: createdUser.firstName,\n          lastName: createdUser.lastName,\n          role: createdUser.role\n        }\n      });\n    } catch (error) {\n      console.error(\"Signup error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Fix existing super admin without organization - special endpoint\n  app.post(\"/api/fix-super-admin\", async (req, res) => {\n    try {\n      const { email, fixToken } = req.body;\n\n      // Use the same hardcoded token for security\n      if (fixToken !== \"Q7emI3Z3tOo6b2xc70\") {\n        return res.status(403).json({ message: \"Invalid fix token\" });\n      }\n\n      // Get the user\n      const user = await storage.getUserByEmail(email);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      if (user.role !== \"super_admin\") {\n        return res.status(403).json({ message: \"Only super admin accounts can be fixed\" });\n      }\n\n      if (user.organizationId) {\n        return res.status(400).json({ message: \"User already has an organization\" });\n      }\n\n      // Create organization for the super admin\n      const defaultOrg = await storage.createOrganization({\n        name: \"AppSecure Organization\",\n        domain: email.split('@')[1] || \"appsecure.local\",\n        settings: {}\n      });\n\n      // Update user with organization\n      const updatedUser = await storage.upsertUser({\n        ...user,\n        organizationId: defaultOrg.id\n      });\n\n      res.json({\n        message: \"Super admin organization fixed successfully\",\n        user: {\n          id: updatedUser.id,\n          email: updatedUser.email,\n          firstName: updatedUser.firstName,\n          lastName: updatedUser.lastName,\n          role: updatedUser.role,\n          organizationId: updatedUser.organizationId\n        }\n      });\n    } catch (error) {\n      console.error(\"Fix super admin error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Login endpoint\n  app.post(\"/api/login\", async (req, res) => {\n    try {\n      const clientIp = req.ip || req.socket.remoteAddress || 'unknown';\n      \n      // Check rate limit\n      if (!checkRateLimit(clientIp)) {\n        return res.status(429).json({ \n          message: \"Too many login attempts. Please try again later.\" \n        });\n      }\n\n      const { email, password } = req.body;\n\n      if (!email || !password) {\n        return res.status(400).json({ message: \"Email and password are required\" });\n      }\n\n      // Get user by email\n      const user = await storage.getUserByEmail(email);\n      if (!user || !user.passwordHash) {\n        return res.status(401).json({ message: \"Invalid email or password\" });\n      }\n\n      // Verify password\n      const isValidPassword = await verifyPassword(password, user.passwordHash);\n      if (!isValidPassword) {\n        return res.status(401).json({ message: \"Invalid email or password\" });\n      }\n\n      // Check if user is active\n      if (!user.isActive) {\n        return res.status(401).json({ message: \"Account is deactivated\" });\n      }\n\n      // Regenerate session to prevent session fixation\n      req.session.regenerate((err) => {\n        if (err) {\n          console.error(\"Session regeneration error:\", err);\n          return res.status(500).json({ message: \"Internal server error\" });\n        }\n        \n        // Create session with new ID\n        req.session.userId = user.id;\n        \n        // Reset rate limit on successful login\n        resetRateLimit(clientIp);\n        \n        res.json({ \n          message: \"Login successful\",\n          user: {\n            id: user.id,\n            email: user.email,\n            firstName: user.firstName,\n            lastName: user.lastName,\n            role: user.role\n          }\n        });\n      });\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Logout endpoint\n  app.post(\"/api/logout\", (req, res) => {\n    req.session.destroy((err) => {\n      if (err) {\n        return res.status(500).json({ message: \"Could not log out\" });\n      }\n      res.clearCookie('connect.sid');\n      res.json({ message: \"Logout successful\" });\n    });\n  });\n\n  // Get current user endpoint\n  app.get(\"/api/auth/user\", isAuthenticated, async (req, res) => {\n    const user = (req as any).user;\n    res.json({\n      id: user.id,\n      email: user.email,\n      firstName: user.firstName,\n      lastName: user.lastName,\n      role: user.role,\n      organizationId: user.organizationId\n    });\n  });\n\n  // Get user permissions endpoint\n  app.get(\"/api/auth/permissions\", isAuthenticated, async (req, res) => {\n    try {\n      const user = (req as any).user;\n      const permissions = await storage.getUserPermissions(user.id);\n      res.json(Array.from(permissions).map(name => ({ name })));\n    } catch (error) {\n      console.error(\"Error fetching permissions:\", error);\n      res.status(500).json({ message: \"Error fetching permissions\" });\n    }\n  });\n}\n\n// Extend session type\ndeclare module \"express-session\" {\n  interface SessionData {\n    userId?: string;\n  }\n}","size_bytes":13185},"client/src/pages/MyFindings.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Search, Filter, Eye, Plus } from \"lucide-react\";\nimport { SeverityBadge } from \"@/components/SeverityBadge\";\nimport { StatusBadge } from \"@/components/StatusBadge\";\nimport { format } from \"date-fns\";\n\ninterface Finding {\n  id: string;\n  title: string;\n  severity: 'critical' | 'high' | 'medium' | 'low' | 'informational';\n  status: string;\n  createdAt: string;\n  project: {\n    name: string;\n    id: string;\n  };\n  reporter: {\n    firstName: string;\n    lastName: string;\n  };\n}\n\nexport default function MyFindings() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedProject, setSelectedProject] = useState<string>(\"all\");\n  const [selectedReporter, setSelectedReporter] = useState<string>(\"all\");\n\n  const { data: findingsData = [], isLoading } = useQuery({\n    queryKey: ['/api/findings'],\n  });\n\n  const findings = findingsData as Finding[];\n\n  // Get unique projects and reporters for filtering\n  const uniqueProjects = findings.reduce((acc: Array<{id: string, name: string}>, finding) => {\n    if (!acc.find((p: any) => p.id === finding.project.id)) {\n      acc.push(finding.project);\n    }\n    return acc;\n  }, []);\n\n  const uniqueReporters = findings.reduce((acc: Array<{name: string}>, finding) => {\n    const fullName = `${finding.reporter.firstName} ${finding.reporter.lastName}`;\n    if (!acc.find((r: any) => r.name === fullName)) {\n      acc.push({ name: fullName });\n    }\n    return acc;\n  }, []);\n\n  // Filter findings based on search and filters\n  const filteredFindings = findings.filter((finding) => {\n    const matchesSearch = finding.title.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesProject = selectedProject === \"all\" || finding.project.id === selectedProject;\n    const reporterName = `${finding.reporter.firstName} ${finding.reporter.lastName}`;\n    const matchesReporter = selectedReporter === \"all\" || reporterName === selectedReporter;\n    \n    return matchesSearch && matchesProject && matchesReporter;\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6\" data-testid=\"page-my-findings\">\n      <div className=\"flex flex-col gap-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold\" data-testid=\"heading-my-findings\">My Findings</h1>\n            <p className=\"text-muted-foreground\">\n              Manage and track security findings across all your projects\n            </p>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Link href=\"/findings/new\">\n              <Button data-testid=\"button-create-finding\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Create Finding\n              </Button>\n            </Link>\n            <Badge variant=\"outline\" data-testid=\"badge-total-findings\">\n              Total: {findings.length}\n            </Badge>\n            <Badge variant=\"outline\" data-testid=\"badge-filtered-findings\">\n              Filtered: {filteredFindings.length}\n            </Badge>\n          </div>\n        </div>\n\n        {/* Filters */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Filter className=\"h-5 w-5\" />\n              Filters\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex flex-col sm:flex-row gap-4\">\n              {/* Search */}\n              <div className=\"flex-1\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                  <Input\n                    placeholder=\"Search findings...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"pl-9\"\n                    data-testid=\"input-search-findings\"\n                  />\n                </div>\n              </div>\n\n              {/* Project Filter */}\n              <div className=\"w-full sm:w-48\">\n                <Select value={selectedProject} onValueChange={setSelectedProject}>\n                  <SelectTrigger data-testid=\"select-project-filter\">\n                    <SelectValue placeholder=\"Filter by project\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Projects</SelectItem>\n                    {uniqueProjects.map((project: any) => (\n                      <SelectItem key={project.id} value={project.id}>\n                        {project.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {/* Reporter Filter */}\n              <div className=\"w-full sm:w-48\">\n                <Select value={selectedReporter} onValueChange={setSelectedReporter}>\n                  <SelectTrigger data-testid=\"select-reporter-filter\">\n                    <SelectValue placeholder=\"Filter by reporter\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Reporters</SelectItem>\n                    {uniqueReporters.map((reporter: any) => (\n                      <SelectItem key={reporter.name} value={reporter.name}>\n                        {reporter.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {/* Clear Filters */}\n              {(searchTerm || selectedProject !== \"all\" || selectedReporter !== \"all\") && (\n                <Button\n                  variant=\"outline\"\n                  onClick={() => {\n                    setSearchTerm(\"\");\n                    setSelectedProject(\"all\");\n                    setSelectedReporter(\"all\");\n                  }}\n                  data-testid=\"button-clear-filters\"\n                >\n                  Clear Filters\n                </Button>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Findings Table */}\n        <Card>\n          <CardContent className=\"p-0\">\n            {filteredFindings.length === 0 ? (\n              <div className=\"flex flex-col items-center justify-center py-12 text-center\">\n                <div className=\"text-muted-foreground mb-2\">\n                  {findings.length === 0 ? (\n                    <>No findings found. Start by creating findings in your projects.</>\n                  ) : (\n                    <>No findings match your current filters.</>\n                  )}\n                </div>\n                {(searchTerm || selectedProject !== \"all\" || selectedReporter !== \"all\") && (\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => {\n                      setSearchTerm(\"\");\n                      setSelectedProject(\"all\");\n                      setSelectedReporter(\"all\");\n                    }}\n                    className=\"mt-2\"\n                  >\n                    Clear Filters\n                  </Button>\n                )}\n              </div>\n            ) : (\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Title</TableHead>\n                    <TableHead>Severity</TableHead>\n                    <TableHead>Project</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Reporter</TableHead>\n                    <TableHead>Submitted On</TableHead>\n                    <TableHead className=\"w-20\">Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredFindings.map((finding) => (\n                    <TableRow \n                      key={finding.id} \n                      className=\"hover:bg-muted/50 cursor-pointer\"\n                      data-testid={`row-finding-${finding.id}`}\n                    >\n                      <TableCell className=\"font-medium\">\n                        <Link \n                          href={`/findings/${finding.id}`}\n                          className=\"hover:text-primary transition-colors\"\n                          data-testid={`link-finding-${finding.id}`}\n                        >\n                          {finding.title}\n                        </Link>\n                      </TableCell>\n                      <TableCell>\n                        <SeverityBadge severity={finding.severity} />\n                      </TableCell>\n                      <TableCell>\n                        <Link \n                          href={`/projects/${finding.project.id}`}\n                          className=\"text-muted-foreground hover:text-primary transition-colors\"\n                        >\n                          {finding.project.name}\n                        </Link>\n                      </TableCell>\n                      <TableCell>\n                        <StatusBadge status={finding.status as any} />\n                      </TableCell>\n                      <TableCell className=\"text-muted-foreground\">\n                        {`${finding.reporter.firstName} ${finding.reporter.lastName}`}\n                      </TableCell>\n                      <TableCell className=\"text-muted-foreground\">\n                        {format(new Date(finding.createdAt), 'MMM d, yyyy')}\n                      </TableCell>\n                      <TableCell>\n                        <Link href={`/findings/${finding.id}`}>\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\"\n                            data-testid={`button-view-finding-${finding.id}`}\n                          >\n                            <Eye className=\"h-4 w-4\" />\n                          </Button>\n                        </Link>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":10904},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/pages/Landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ThemeToggle } from \"@/components/ThemeToggle\";\nimport {\n  Shield,\n  Bug,\n  FileText,\n  Users,\n  BarChart3,\n  Lock,\n  Zap,\n  CheckCircle2,\n} from \"lucide-react\";\n\nconst features = [\n  {\n    icon: Bug,\n    title: \"Smart Finding Management\",\n    description: \"Create, track, and manage security findings with rich text editing, CVSS scoring, and evidence attachments.\"\n  },\n  {\n    icon: FileText,\n    title: \"Custom Report Templates\",\n    description: \"Generate professional security reports with customizable templates and automated content population.\"\n  },\n  {\n    icon: Users,\n    title: \"Team Collaboration\",\n    description: \"Multi-role access with researcher and customer portals for seamless collaboration and communication.\"\n  },\n  {\n    icon: BarChart3,\n    title: \"Advanced Analytics\",\n    description: \"Track project progress, finding statistics, and security trends with comprehensive dashboards.\"\n  },\n  {\n    icon: Lock,\n    title: \"Enterprise Security\",\n    description: \"Multi-tenant architecture with role-based access control and complete audit trails.\"\n  },\n  {\n    icon: Zap,\n    title: \"Workflow Automation\",\n    description: \"Automated status tracking, notifications, and integrations with popular security tools.\"\n  }\n];\n\nconst benefits = [\n  \"Streamline penetration testing workflows\",\n  \"Reduce reporting time by 80%\",\n  \"Ensure consistent finding quality\",\n  \"Enable real-time collaboration\",\n  \"Maintain complete audit trails\",\n  \"Scale across multiple projects\"\n];\n\nexport default function Landing() {\n  const handleLogin = () => {\n    window.location.href = '/api/login';\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-background to-muted/20\">\n      {/* Header */}\n      <header className=\"container mx-auto px-4 py-6\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <div className=\"flex h-8 w-8 items-center justify-center rounded-md bg-primary text-primary-foreground\">\n              <Shield className=\"h-4 w-4\" />\n            </div>\n            <span className=\"text-xl font-bold\">PenTest Pro</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <ThemeToggle />\n            <Button onClick={handleLogin} data-testid=\"button-login\">\n              Sign In\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"container mx-auto px-4 py-16 text-center\">\n        <div className=\"max-w-4xl mx-auto\">\n          <Badge variant=\"outline\" className=\"mb-4\">\n            🔒 Enterprise-Grade Security Platform\n          </Badge>\n          <h1 className=\"text-4xl md:text-6xl font-bold mb-6 bg-gradient-to-r from-foreground to-foreground/80 bg-clip-text text-transparent\">\n            Modern Penetration Testing Platform\n          </h1>\n          <p className=\"text-xl text-muted-foreground mb-8 max-w-2xl mx-auto leading-relaxed\">\n            Streamline your security assessments with comprehensive finding management, \n            collaborative workflows, and automated reporting capabilities.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button size=\"lg\" onClick={handleLogin} data-testid=\"button-get-started\">\n              Get Started\n            </Button>\n            <Button size=\"lg\" variant=\"outline\" onClick={() => console.log('View demo')}>\n              View Demo\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Grid */}\n      <section className=\"container mx-auto px-4 py-16\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-3xl font-bold mb-4\">Powerful Features for Security Teams</h2>\n          <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n            Everything you need to conduct professional penetration tests and deliver \n            comprehensive security assessments.\n          </p>\n        </div>\n        \n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {features.map((feature, index) => {\n            const IconComponent = feature.icon;\n            return (\n              <Card key={index} className=\"hover-elevate transition-all duration-200\">\n                <CardHeader>\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"flex h-10 w-10 items-center justify-center rounded-md bg-primary/10\">\n                      <IconComponent className=\"h-5 w-5 text-primary\" />\n                    </div>\n                    <CardTitle className=\"text-lg\">{feature.title}</CardTitle>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <CardDescription className=\"text-sm leading-relaxed\">\n                    {feature.description}\n                  </CardDescription>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n      </section>\n\n      {/* Benefits Section */}\n      <section className=\"container mx-auto px-4 py-16\">\n        <div className=\"max-w-4xl mx-auto\">\n          <Card className=\"bg-gradient-to-r from-primary/5 to-primary/10 border-primary/20\">\n            <CardHeader className=\"text-center\">\n              <CardTitle className=\"text-2xl mb-2\">Why Choose PenTest Pro?</CardTitle>\n              <CardDescription className=\"text-base\">\n                Join hundreds of security teams who trust our platform for their penetration testing needs.\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                {benefits.map((benefit, index) => (\n                  <div key={index} className=\"flex items-center gap-3\">\n                    <CheckCircle2 className=\"h-5 w-5 text-green-500 shrink-0\" />\n                    <span className=\"text-sm\">{benefit}</span>\n                  </div>\n                ))}\n              </div>\n              <div className=\"mt-8 text-center\">\n                <Button size=\"lg\" onClick={handleLogin} data-testid=\"button-start-free\">\n                  Start Your Free Trial\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"container mx-auto px-4 py-8 border-t\">\n        <div className=\"flex flex-col md:flex-row items-center justify-between gap-4\">\n          <div className=\"flex items-center gap-2\">\n            <div className=\"flex h-6 w-6 items-center justify-center rounded bg-primary text-primary-foreground\">\n              <Shield className=\"h-3 w-3\" />\n            </div>\n            <span className=\"text-sm font-medium\">PenTest Pro</span>\n          </div>\n          <p className=\"text-sm text-muted-foreground\">\n            © 2024 PenTest Pro. All rights reserved.\n          </p>\n        </div>\n      </footer>\n    </div>\n  );\n}","size_bytes":7179},"client/src/components/StatusBadge.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\nimport { cn } from \"@/lib/utils\";\n\ntype FindingStatus = \"draft\" | \"submitted\" | \"company_review\" | \"remediation_in_progress\" | \"ready_for_retest\" | \"verified_fixed\" | \"risk_accepted\" | \"closed\";\ntype ProjectStatus = \"planned\" | \"in_progress\" | \"complete\";\n\ninterface StatusBadgeProps {\n  status: FindingStatus | ProjectStatus;\n  className?: string;\n}\n\nconst statusConfig = {\n  // Finding statuses\n  draft: {\n    label: \"Draft\",\n    className: \"bg-gray-100 text-gray-800 border-gray-200 dark:bg-gray-900/20 dark:text-gray-400 dark:border-gray-800\",\n  },\n  submitted: {\n    label: \"Submitted\",\n    className: \"bg-blue-100 text-blue-800 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\",\n  },\n  company_review: {\n    label: \"Under Review\",\n    className: \"bg-yellow-100 text-yellow-800 border-yellow-200 dark:bg-yellow-900/20 dark:text-yellow-400 dark:border-yellow-800\",\n  },\n  remediation_in_progress: {\n    label: \"In Remediation\",\n    className: \"bg-orange-100 text-orange-800 border-orange-200 dark:bg-orange-900/20 dark:text-orange-400 dark:border-orange-800\",\n  },\n  ready_for_retest: {\n    label: \"Ready for Retest\",\n    className: \"bg-purple-100 text-purple-800 border-purple-200 dark:bg-purple-900/20 dark:text-purple-400 dark:border-purple-800\",\n  },\n  verified_fixed: {\n    label: \"Verified Fixed\",\n    className: \"bg-green-100 text-green-800 border-green-200 dark:bg-green-900/20 dark:text-green-400 dark:border-green-800\",\n  },\n  risk_accepted: {\n    label: \"Risk Accepted\",\n    className: \"bg-cyan-100 text-cyan-800 border-cyan-200 dark:bg-cyan-900/20 dark:text-cyan-400 dark:border-cyan-800\",\n  },\n  closed: {\n    label: \"Closed\",\n    className: \"bg-slate-100 text-slate-800 border-slate-200 dark:bg-slate-900/20 dark:text-slate-400 dark:border-slate-800\",\n  },\n  // Project statuses\n  planned: {\n    label: \"Planned\",\n    className: \"bg-indigo-100 text-indigo-800 border-indigo-200 dark:bg-indigo-900/20 dark:text-indigo-400 dark:border-indigo-800\",\n  },\n  in_progress: {\n    label: \"In Progress\",\n    className: \"bg-blue-100 text-blue-800 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\",\n  },\n  complete: {\n    label: \"Complete\",\n    className: \"bg-green-100 text-green-800 border-green-200 dark:bg-green-900/20 dark:text-green-400 dark:border-green-800\",\n  },\n};\n\nexport function StatusBadge({ status, className }: StatusBadgeProps) {\n  const config = statusConfig[status];\n  \n  return (\n    <Badge \n      variant=\"outline\" \n      className={cn(config.className, className)}\n      data-testid={`badge-status-${status}`}\n    >\n      {config.label}\n    </Badge>\n  );\n}","size_bytes":2685},"client/src/pages/RoleManagement.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Shield, Plus, Edit2, Trash2, Settings, Users, FileText } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\n\ninterface Role {\n  id: string;\n  name: string;\n  description: string;\n  organizationId: string;\n  createdAt: string;\n}\n\ninterface Permission {\n  name: string;\n}\n\ninterface RolePermission {\n  roleId: string;\n  permission: string;\n}\n\nconst createRoleSchema = z.object({\n  name: z.string().min(1, \"Role name is required\"),\n  description: z.string().min(1, \"Description is required\"),\n});\n\ntype CreateRoleForm = z.infer<typeof createRoleSchema>;\n\nconst PERMISSION_CATEGORIES = {\n  projects: \"Project Management\",\n  findings: \"Finding Management\", \n  users: \"User Management\",\n  reports: \"Report Management\",\n  system: \"System Administration\"\n};\n\nexport default function RoleManagement() {\n  const { toast } = useToast();\n  const [selectedRole, setSelectedRole] = useState<Role | null>(null);\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [isPermissionsDialogOpen, setIsPermissionsDialogOpen] = useState(false);\n\n  const form = useForm<CreateRoleForm>({\n    resolver: zodResolver(createRoleSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n    },\n  });\n\n  const editForm = useForm<CreateRoleForm>({\n    resolver: zodResolver(createRoleSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n    },\n  });\n\n  // Fetch all roles\n  const { data: roles = [] } = useQuery<Role[]>({\n    queryKey: ['/api/roles'],\n  });\n\n  // Fetch all permissions\n  const { data: permissions = [] } = useQuery<Permission[]>({\n    queryKey: ['/api/permissions'],\n  });\n\n  // Fetch role permissions\n  const { data: rolePermissions = [] } = useQuery<RolePermission[]>({\n    queryKey: ['/api/role-permissions'],\n  });\n\n  // Create role mutation\n  const createRoleMutation = useMutation({\n    mutationFn: async (data: CreateRoleForm) => {\n      return apiRequest('POST', '/api/roles', data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Role Created\",\n        description: \"The role has been created successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/roles'] });\n      setIsCreateDialogOpen(false);\n      form.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create role\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update role mutation\n  const updateRoleMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: CreateRoleForm }) => {\n      return apiRequest('PUT', `/api/roles/${id}`, data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Role Updated\",\n        description: \"The role has been updated successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/roles'] });\n      setIsEditDialogOpen(false);\n      setSelectedRole(null);\n      editForm.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update role\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete role mutation\n  const deleteRoleMutation = useMutation({\n    mutationFn: async (roleId: string) => {\n      return apiRequest('DELETE', `/api/roles/${roleId}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Role Deleted\",\n        description: \"The role has been deleted successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/roles'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete role\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Add permission to role mutation\n  const addPermissionMutation = useMutation({\n    mutationFn: async ({ roleId, permission }: { roleId: string; permission: string }) => {\n      return apiRequest('POST', `/api/roles/${roleId}/permissions`, { permission });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Permission Added\",\n        description: \"The permission has been added to the role.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/role-permissions'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to add permission\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Remove permission from role mutation\n  const removePermissionMutation = useMutation({\n    mutationFn: async ({ roleId, permissionName }: { roleId: string; permissionName: string }) => {\n      return apiRequest('DELETE', `/api/roles/${roleId}/permissions/${permissionName}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Permission Removed\",\n        description: \"The permission has been removed from the role.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/role-permissions'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to remove permission\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onCreateSubmit = (data: CreateRoleForm) => {\n    createRoleMutation.mutate(data);\n  };\n\n  const onEditSubmit = (data: CreateRoleForm) => {\n    if (selectedRole) {\n      updateRoleMutation.mutate({ id: selectedRole.id, data });\n    }\n  };\n\n  const handleEditRole = (role: Role) => {\n    setSelectedRole(role);\n    editForm.setValue(\"name\", role.name);\n    editForm.setValue(\"description\", role.description);\n    setIsEditDialogOpen(true);\n  };\n\n  const handleManagePermissions = (role: Role) => {\n    setSelectedRole(role);\n    setIsPermissionsDialogOpen(true);\n  };\n\n  const getRolePermissions = (roleId: string) => {\n    return rolePermissions.filter(rp => rp.roleId === roleId);\n  };\n\n  const hasPermission = (roleId: string, permissionId: string) => {\n    return rolePermissions.some(rp => rp.roleId === roleId && rp.permission === permissionId);\n  };\n\n  const handlePermissionToggle = (roleId: string, permissionName: string, isChecked: boolean) => {\n    if (isChecked) {\n      addPermissionMutation.mutate({ roleId, permission: permissionName });\n    } else {\n      removePermissionMutation.mutate({ roleId, permissionName });\n    }\n  };\n\n  const groupPermissionsByCategory = () => {\n    const grouped: Record<string, Permission[]> = {};\n    permissions.forEach(permission => {\n      if (!grouped[permission.category]) {\n        grouped[permission.category] = [];\n      }\n      grouped[permission.category].push(permission);\n    });\n    return grouped;\n  };\n\n  const getCategoryIcon = (category: string) => {\n    const icons: Record<string, any> = {\n      projects: FileText,\n      findings: Shield,\n      users: Users,\n      reports: FileText,\n      system: Settings\n    };\n    const IconComponent = icons[category] || Shield;\n    return <IconComponent className=\"w-4 h-4\" />;\n  };\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-8\" data-testid=\"page-role-management\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-semibold text-foreground\">Role Management</h1>\n          <p className=\"text-sm text-muted-foreground\">\n            Create and manage roles with granular permissions\n          </p>\n        </div>\n        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-create-role\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Create Role\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"sm:max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Create New Role</DialogTitle>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onCreateSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Role Name</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          placeholder=\"e.g., Senior Researcher\"\n                          data-testid=\"input-role-name\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Description</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          {...field} \n                          placeholder=\"Describe the role and its responsibilities...\"\n                          data-testid=\"input-role-description\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <div className=\"flex justify-end space-x-2\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setIsCreateDialogOpen(false)}\n                    data-testid=\"button-cancel-create\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    disabled={createRoleMutation.isPending}\n                    data-testid=\"button-save-role\"\n                  >\n                    {createRoleMutation.isPending ? \"Creating...\" : \"Create Role\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Statistics Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Roles</CardTitle>\n            <Shield className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"stat-total-roles\">{roles.length}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Configured roles in organization\n            </p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Available Permissions</CardTitle>\n            <Settings className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"stat-total-permissions\">{permissions.length}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              System permissions available\n            </p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Permission Categories</CardTitle>\n            <FileText className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"stat-permission-categories\">\n              {Object.keys(groupPermissionsByCategory()).length}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Permission groupings\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Roles Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Roles</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Name</TableHead>\n                <TableHead>Description</TableHead>\n                <TableHead>Permissions</TableHead>\n                <TableHead>Created</TableHead>\n                <TableHead>Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {roles.map((role) => {\n                const rolePerms = getRolePermissions(role.id);\n                return (\n                  <TableRow key={role.id} data-testid={`row-role-${role.id}`}>\n                    <TableCell className=\"font-medium\">{role.name}</TableCell>\n                    <TableCell className=\"max-w-xs truncate\">{role.description}</TableCell>\n                    <TableCell>\n                      <div className=\"flex flex-wrap gap-1\">\n                        {rolePerms.slice(0, 3).map((rp) => (\n                          <Badge \n                            key={rp.permissionId} \n                            variant=\"outline\"\n                            data-testid={`badge-permission-${rp.permission.name}`}\n                          >\n                            {rp.permission.name}\n                          </Badge>\n                        ))}\n                        {rolePerms.length > 3 && (\n                          <Badge variant=\"secondary\">\n                            +{rolePerms.length - 3} more\n                          </Badge>\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>{new Date(role.createdAt).toLocaleDateString()}</TableCell>\n                    <TableCell>\n                      <div className=\"flex space-x-2\">\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          onClick={() => handleEditRole(role)}\n                          data-testid={`button-edit-role-${role.id}`}\n                        >\n                          <Edit2 className=\"w-3 h-3\" />\n                        </Button>\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          onClick={() => handleManagePermissions(role)}\n                          data-testid={`button-manage-permissions-${role.id}`}\n                        >\n                          <Shield className=\"w-3 h-3\" />\n                        </Button>\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          onClick={() => deleteRoleMutation.mutate(role.id)}\n                          data-testid={`button-delete-role-${role.id}`}\n                        >\n                          <Trash2 className=\"w-3 h-3\" />\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                );\n              })}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n\n      {/* Edit Role Dialog */}\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Edit Role</DialogTitle>\n          </DialogHeader>\n          <Form {...editForm}>\n            <form onSubmit={editForm.handleSubmit(onEditSubmit)} className=\"space-y-4\">\n              <FormField\n                control={editForm.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Role Name</FormLabel>\n                    <FormControl>\n                      <Input \n                        {...field} \n                        placeholder=\"e.g., Senior Researcher\"\n                        data-testid=\"input-edit-role-name\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={editForm.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Description</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        {...field} \n                        placeholder=\"Describe the role and its responsibilities...\"\n                        data-testid=\"input-edit-role-description\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <div className=\"flex justify-end space-x-2\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setIsEditDialogOpen(false)}\n                  data-testid=\"button-cancel-edit\"\n                >\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={updateRoleMutation.isPending}\n                  data-testid=\"button-update-role\"\n                >\n                  {updateRoleMutation.isPending ? \"Updating...\" : \"Update Role\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Manage Permissions Dialog */}\n      <Dialog open={isPermissionsDialogOpen} onOpenChange={setIsPermissionsDialogOpen}>\n        <DialogContent className=\"sm:max-w-2xl max-h-[80vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>\n              Manage Permissions - {selectedRole?.name}\n            </DialogTitle>\n          </DialogHeader>\n          {selectedRole && (\n            <div className=\"space-y-6\">\n              {Object.entries(groupPermissionsByCategory()).map(([category, categoryPermissions]) => (\n                <div key={category} className=\"space-y-3\">\n                  <div className=\"flex items-center space-x-2\">\n                    {getCategoryIcon(category)}\n                    <h3 className=\"text-lg font-medium\">\n                      {PERMISSION_CATEGORIES[category as keyof typeof PERMISSION_CATEGORIES] || category}\n                    </h3>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-3 ml-6\">\n                    {categoryPermissions.map((permission) => (\n                      <div \n                        key={permission.name} \n                        className=\"flex items-center space-x-3 p-3 border rounded-lg\"\n                        data-testid={`permission-item-${permission.name}`}\n                      >\n                        <Checkbox\n                          id={permission.name}\n                          checked={hasPermission(selectedRole.id, permission.name)}\n                          onCheckedChange={(checked) => \n                            handlePermissionToggle(selectedRole.id, permission.name, !!checked)\n                          }\n                          data-testid={`checkbox-permission-${permission.name}`}\n                        />\n                        <div className=\"flex-1\">\n                          <Label \n                            htmlFor={permission.name} \n                            className=\"text-sm font-medium cursor-pointer\"\n                          >\n                            {permission.name}\n                          </Label>\n                          <p className=\"text-xs text-muted-foreground\">\n                            {permission.name}\n                          </p>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              ))}\n              <div className=\"flex justify-end\">\n                <Button\n                  onClick={() => setIsPermissionsDialogOpen(false)}\n                  data-testid=\"button-close-permissions\"\n                >\n                  Done\n                </Button>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":21238},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"replit.md":{"content":"# Replit.md - PenTest Pro\n\n## Overview\n\nPenTest Pro is a modern enterprise-grade penetration testing platform designed to streamline security assessment workflows. The application provides comprehensive tools for managing security findings, generating professional reports, and facilitating collaboration between security researchers and client teams. Built with a focus on data-dense interfaces and professional trust, the platform supports multi-role access with specialized portals for researchers, project users, customer admins, and organization admins.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript, utilizing Wouter for client-side routing\n- **UI Design System**: Material Design principles with Shadcn/ui components and Radix UI primitives\n- **Styling**: Tailwind CSS with custom design tokens supporting both light and dark themes\n- **State Management**: TanStack Query for server state management and data fetching\n- **Rich Text Editing**: TipTap editor with support for tables, images, links, and custom formatting\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **API Design**: RESTful API with role-based access control and comprehensive error handling\n- **Database Layer**: Drizzle ORM with PostgreSQL database using Neon serverless\n- **Authentication**: Replit Auth integration with OpenID Connect and session management\n- **File Structure**: Monorepo with shared schema definitions between client and server\n\n### Database Design\n- **ORM**: Drizzle with type-safe schema definitions\n- **Schema**: Comprehensive data model including users, organizations, projects, findings, evidence attachments, comments, and audit logs\n- **Enums**: Strongly typed status and role enumerations for findings, projects, and users\n- **Relationships**: Proper foreign key relationships with cascading operations\n\n### Authentication & Authorization\n- **Auth Provider**: Replit Auth with OpenID Connect flow\n- **Session Management**: PostgreSQL-backed sessions with configurable TTL\n- **Role-Based Access**: Multi-level permissions (researcher, project_user, customer_admin, org_admin)\n- **Security**: HTTP-only cookies, CSRF protection, and secure session handling\n\n### Component Architecture\n- **Design System**: Custom component library built on Radix UI primitives\n- **Reusable Components**: Specialized components for severity badges, status indicators, CVSS calculators, and rich text editing\n- **Form Handling**: React Hook Form with Zod validation for type-safe form management\n- **File Uploads**: Drag-and-drop file upload zones with progress tracking and metadata capture\n\n## External Dependencies\n\n### Database Services\n- **Neon Database**: Serverless PostgreSQL hosting with connection pooling\n- **@neondatabase/serverless**: Neon's serverless database driver for optimal performance\n\n### Authentication Services\n- **Replit Auth**: Identity provider with OpenID Connect protocol\n- **connect-pg-simple**: PostgreSQL session store for Express sessions\n\n### UI Libraries\n- **Radix UI**: Comprehensive set of low-level UI primitives for accessibility\n- **Lucide React**: Icon library providing consistent iconography\n- **TipTap**: Rich text editor with extensible plugin architecture\n\n### Development Tools\n- **Vite**: Fast build tool with HMR and optimized bundling\n- **TypeScript**: Type safety across the entire application stack\n- **Drizzle Kit**: Database migration and schema management tools\n\n### Utility Libraries\n- **TanStack Query**: Server state management with caching and synchronization\n- **React Hook Form**: Performant form library with minimal re-renders\n- **Zod**: TypeScript-first schema validation library\n- **date-fns**: Date manipulation and formatting utilities","size_bytes":3838},"client/src/components/FileUploadZone.tsx":{"content":"import { useCallback, useState } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Progress } from '@/components/ui/progress';\nimport { Badge } from '@/components/ui/badge';\nimport {\n  Upload,\n  File,\n  Image,\n  FileText,\n  Video,\n  Archive,\n  X,\n  CheckCircle2,\n} from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\ninterface FileWithMetadata {\n  id: string;\n  file: File;\n  progress: number;\n  status: 'uploading' | 'complete' | 'error';\n  url?: string;\n  caption?: string;\n}\n\ninterface FileUploadZoneProps {\n  onFilesAdded?: (files: FileWithMetadata[]) => void;\n  maxFiles?: number;\n  maxSize?: number; // in bytes\n  acceptedTypes?: string[];\n  className?: string;\n  disabled?: boolean;\n}\n\nconst getFileIcon = (mimeType: string) => {\n  if (mimeType.startsWith('image/')) return Image;\n  if (mimeType.startsWith('video/')) return Video;\n  if (mimeType.startsWith('text/')) return FileText;\n  if (mimeType.includes('zip') || mimeType.includes('archive')) return Archive;\n  return File;\n};\n\nconst formatFileSize = (bytes: number) => {\n  if (bytes === 0) return '0 Bytes';\n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n};\n\nexport function FileUploadZone({\n  onFilesAdded,\n  maxFiles = 10,\n  maxSize = 50 * 1024 * 1024, // 50MB\n  acceptedTypes = [\n    'image/*',\n    'video/mp4',\n    'application/pdf',\n    'text/*',\n    'application/json',\n    'text/csv',\n    'application/zip',\n  ],\n  className,\n  disabled,\n}: FileUploadZoneProps) {\n  const [files, setFiles] = useState<FileWithMetadata[]>([]);\n\n  const onDrop = useCallback(\n    (acceptedFiles: File[]) => {\n      if (disabled) return;\n\n      const newFiles: FileWithMetadata[] = acceptedFiles\n        .slice(0, maxFiles - files.length)\n        .map((file) => ({\n          id: Math.random().toString(36).substr(2, 9),\n          file,\n          progress: 0,\n          status: 'uploading' as const,\n        }));\n\n      setFiles((prev) => [...prev, ...newFiles]);\n      \n      // Simulate upload progress\n      newFiles.forEach((fileMetadata) => {\n        let progress = 0;\n        const interval = setInterval(() => {\n          progress += Math.random() * 30;\n          if (progress >= 100) {\n            progress = 100;\n            clearInterval(interval);\n            setFiles((prev) =>\n              prev.map((f) =>\n                f.id === fileMetadata.id\n                  ? { ...f, progress: 100, status: 'complete' }\n                  : f\n              )\n            );\n          } else {\n            setFiles((prev) =>\n              prev.map((f) =>\n                f.id === fileMetadata.id ? { ...f, progress } : f\n              )\n            );\n          }\n        }, 200);\n      });\n\n      onFilesAdded?.(newFiles);\n    },\n    [files.length, maxFiles, onFilesAdded, disabled]\n  );\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop,\n    accept: acceptedTypes.reduce((acc, type) => ({ ...acc, [type]: [] }), {}),\n    maxSize,\n    disabled,\n    multiple: true,\n  });\n\n  const removeFile = (id: string) => {\n    setFiles((prev) => prev.filter((f) => f.id !== id));\n  };\n\n  const updateCaption = (id: string, caption: string) => {\n    setFiles((prev) =>\n      prev.map((f) => (f.id === id ? { ...f, caption } : f))\n    );\n  };\n\n  return (\n    <div className={cn('space-y-4', className)} data-testid=\"file-upload-zone\">\n      <Card\n        {...getRootProps()}\n        className={cn(\n          'border-2 border-dashed transition-colors cursor-pointer',\n          isDragActive && 'border-primary bg-primary/5',\n          disabled && 'opacity-50 cursor-not-allowed'\n        )}\n      >\n        <input {...getInputProps()} data-testid=\"file-input\" />\n        <CardContent className=\"p-8 text-center\">\n          <Upload className=\"mx-auto h-12 w-12 text-muted-foreground mb-4\" />\n          <h3 className=\"text-lg font-medium mb-2\">\n            {isDragActive ? 'Drop files here' : 'Upload evidence files'}\n          </h3>\n          <p className=\"text-sm text-muted-foreground mb-4\">\n            Drag and drop files here, or click to browse\n          </p>\n          <div className=\"flex justify-center gap-2 text-xs text-muted-foreground flex-wrap\">\n            <Badge variant=\"outline\">Images</Badge>\n            <Badge variant=\"outline\">Videos</Badge>\n            <Badge variant=\"outline\">PDFs</Badge>\n            <Badge variant=\"outline\">Text Files</Badge>\n            <Badge variant=\"outline\">Archives</Badge>\n          </div>\n          <p className=\"text-xs text-muted-foreground mt-2\">\n            Max {maxFiles} files, {formatFileSize(maxSize)} each\n          </p>\n        </CardContent>\n      </Card>\n\n      {files.length > 0 && (\n        <div className=\"space-y-2\">\n          <h4 className=\"text-sm font-medium\">Uploaded Files ({files.length})</h4>\n          {files.map((fileMetadata) => {\n            const IconComponent = getFileIcon(fileMetadata.file.type);\n            return (\n              <Card key={fileMetadata.id} className=\"p-3\">\n                <div className=\"flex items-start gap-3\">\n                  <IconComponent className=\"h-8 w-8 text-muted-foreground shrink-0 mt-1\" />\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-center justify-between gap-2\">\n                      <h5 className=\"font-medium truncate\">\n                        {fileMetadata.file.name}\n                      </h5>\n                      <div className=\"flex items-center gap-2 shrink-0\">\n                        {fileMetadata.status === 'complete' && (\n                          <CheckCircle2 className=\"h-4 w-4 text-green-500\" />\n                        )}\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => removeFile(fileMetadata.id)}\n                          data-testid={`button-remove-${fileMetadata.id}`}\n                        >\n                          <X className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {formatFileSize(fileMetadata.file.size)} • {fileMetadata.file.type}\n                    </p>\n                    {fileMetadata.status === 'uploading' && (\n                      <Progress value={fileMetadata.progress} className=\"mt-2\" />\n                    )}\n                    {fileMetadata.status === 'complete' && (\n                      <input\n                        type=\"text\"\n                        placeholder=\"Add a caption for this file...\"\n                        value={fileMetadata.caption || ''}\n                        onChange={(e) => updateCaption(fileMetadata.id, e.target.value)}\n                        className=\"mt-2 w-full px-3 py-1 text-sm bg-background border border-input rounded-md\"\n                        data-testid={`input-caption-${fileMetadata.id}`}\n                      />\n                    )}\n                  </div>\n                </div>\n              </Card>\n            );\n          })}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":7351},"client/src/pages/Projects.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport type { Project, ProjectStatus } from \"@shared/schema\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { StatusBadge } from \"@/components/StatusBadge\";\nimport { Calendar, Clock, FileText, Plus, Search, Users, Upload, Link as LinkIcon } from \"lucide-react\";\nimport { formatDistanceToNow, format } from \"date-fns\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\n\ninterface ProjectWithStats extends Project {\n  teamSize: number;\n  findingStats: {\n    total: number;\n    critical: number;\n    high: number;\n    medium: number;\n    low: number;\n    informational: number;\n  };\n  progress?: number;\n}\n\n// Mock data for development\nconst mockProjects: ProjectWithStats[] = [\n  {\n    id: \"proj-001\",\n    name: \"Healthcare Portal Security Assessment\",\n    customerName: \"HealthTech Solutions\",\n    description: \"Comprehensive security assessment of patient portal and healthcare management system including HIPAA compliance review.\",\n    status: \"in_progress\" as ProjectStatus,\n    startDate: new Date(\"2024-01-20\"),\n    endDate: new Date(\"2024-03-15\"),\n\n    scope: null,\n    methodology: null,\n    organizationId: \"org-001\",\n    createdBy: null,\n    tags: [],\n    createdAt: new Date(\"2024-01-15\"),\n    updatedAt: new Date(\"2024-02-10\"),\n    teamSize: 5,\n    findingStats: { total: 18, critical: 1, high: 4, medium: 7, low: 5, informational: 1 },\n    progress: 72\n  },\n  {\n    id: \"proj-002\", \n    name: \"E-commerce Platform Penetration Test\",\n    customerName: \"RetailCorp Inc.\",\n    description: \"Full-scope penetration test of online shopping platform including payment processing systems and customer data handling.\",\n    status: \"planned\" as ProjectStatus,\n    startDate: new Date(\"2024-04-01\"),\n    endDate: new Date(\"2024-05-30\"),\n\n    scope: null,\n    methodology: null,\n    organizationId: \"org-001\",\n    createdBy: null,\n    tags: [],\n    createdAt: new Date(\"2024-03-15\"),\n    updatedAt: new Date(\"2024-03-15\"),\n    teamSize: 3,\n    findingStats: { total: 0, critical: 0, high: 0, medium: 0, low: 0, informational: 0 }\n  },\n  {\n    id: \"proj-003\",\n    name: \"Banking API Security Review\",\n    customerName: \"SecureBank Ltd.\",\n    description: \"API security assessment and code review for mobile banking application and core banking interfaces.\",\n    status: \"complete\" as ProjectStatus,\n    startDate: new Date(\"2023-11-15\"),\n    endDate: new Date(\"2024-01-08\"),\n\n    scope: null,\n    methodology: null,\n    organizationId: \"org-001\",\n    createdBy: null,\n    tags: [],\n    createdAt: new Date(\"2023-11-10\"),\n    updatedAt: new Date(\"2024-01-08\"),\n    teamSize: 4,\n    findingStats: { total: 24, critical: 2, high: 6, medium: 9, low: 5, informational: 2 }\n  },\n  {\n    id: \"proj-004\",\n    name: \"Cloud Infrastructure Assessment\",\n    customerName: \"TechStartup Co.\",\n    description: \"AWS cloud security assessment including IAM, S3 configurations, and container security review.\",\n    status: \"in_progress\" as ProjectStatus,\n    startDate: new Date(\"2024-02-01\"),\n    endDate: new Date(\"2024-03-30\"),\n\n    scope: null,\n    methodology: null,\n    organizationId: \"org-001\",\n    createdBy: null,\n    tags: [],\n    createdAt: new Date(\"2024-01-25\"),\n    updatedAt: new Date(\"2024-02-15\"),\n    teamSize: 2,\n    findingStats: { total: 12, critical: 0, high: 2, medium: 6, low: 3, informational: 1 },\n    progress: 45\n  }\n];\n\n// Form validation schema\nconst createProjectSchema = z.object({\n  name: z.string().min(1, \"Project name is required\"),\n  startDate: z.string().min(1, \"Start date is required\"),\n  endDate: z.string().min(1, \"End date is required\"),\n  description: z.string().optional(),\n  customerName: z.string().optional(),\n  scope: z.string().optional(),\n  methodology: z.string().optional(),\n  tags: z.string().optional(),\n  postmanCollectionType: z.enum([\"none\", \"upload\", \"link\"]).optional(),\n  postmanLink: z.string().url().optional().or(z.literal(\"\")),\n});\n\ntype CreateProjectForm = z.infer<typeof createProjectSchema>;\n\nfunction CreateProjectDialog() {\n  const [isOpen, setIsOpen] = useState(false);\n  const [postmanFile, setPostmanFile] = useState<File | null>(null);\n  const { toast } = useToast();\n  \n  const form = useForm<CreateProjectForm>({\n    resolver: zodResolver(createProjectSchema),\n    defaultValues: {\n      name: \"\",\n      startDate: \"\",\n      endDate: \"\",\n      description: \"\",\n      customerName: \"\",\n      scope: \"\",\n      methodology: \"\",\n      tags: \"\",\n      postmanCollectionType: \"none\",\n      postmanLink: \"\",\n    },\n  });\n\n  const createProjectMutation = useMutation({\n    mutationFn: async (data: CreateProjectForm) => {\n      const projectData = {\n        name: data.name,\n        description: data.description || null,\n        customerName: data.customerName || \"TBD\",\n        scope: data.scope || null,\n        methodology: data.methodology || null,\n        startDate: data.startDate,\n        endDate: data.endDate,\n        tags: data.tags ? data.tags.split(\",\").map(tag => tag.trim()).filter(Boolean) : [],\n      };\n      \n      return apiRequest(\"POST\", \"/api/projects\", projectData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Project created\",\n        description: \"The project has been created successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/projects\"] });\n      setIsOpen(false);\n      form.reset();\n      setPostmanFile(null);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create project. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (data: CreateProjectForm) => {\n    // Validate end date is after start date\n    if (new Date(data.endDate) <= new Date(data.startDate)) {\n      form.setError(\"endDate\", {\n        message: \"End date must be after start date\",\n      });\n      return;\n    }\n    \n    createProjectMutation.mutate(data);\n  };\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      if (file.type !== \"application/json\") {\n        toast({\n          title: \"Invalid file type\",\n          description: \"Please select a JSON file for Postman collection.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      setPostmanFile(file);\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={setIsOpen}>\n      <DialogTrigger asChild>\n        <Button data-testid=\"button-new-project\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          New Project\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Create New Project</DialogTitle>\n          <DialogDescription>\n            Create a new penetration testing project. Fields marked with * are required.\n          </DialogDescription>\n        </DialogHeader>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-6\">\n            {/* Mandatory Fields */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-sm font-medium text-muted-foreground\">Required Information</h3>\n              \n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Project Name *</FormLabel>\n                    <FormControl>\n                      <Input\n                        placeholder=\"e.g., Healthcare Portal Security Assessment\"\n                        {...field}\n                        data-testid=\"input-project-name\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"startDate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Start Date *</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"date\"\n                          {...field}\n                          data-testid=\"input-start-date\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"endDate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>End Date *</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"date\"\n                          {...field}\n                          data-testid=\"input-end-date\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </div>\n\n            {/* Optional Fields */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-sm font-medium text-muted-foreground\">Additional Information</h3>\n              \n              <FormField\n                control={form.control}\n                name=\"customerName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Customer Name</FormLabel>\n                    <FormControl>\n                      <Input\n                        placeholder=\"e.g., HealthTech Solutions\"\n                        {...field}\n                        data-testid=\"input-customer-name\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Project Description</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        placeholder=\"Describe the scope and objectives of this security assessment...\"\n                        rows={3}\n                        {...field}\n                        data-testid=\"textarea-description\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"scope\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Scope</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        placeholder=\"Define what is included in the assessment scope...\"\n                        rows={2}\n                        {...field}\n                        data-testid=\"textarea-scope\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"methodology\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Methodology</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        placeholder=\"e.g., OWASP Testing Guide, NIST SP 800-115...\"\n                        rows={2}\n                        {...field}\n                        data-testid=\"textarea-methodology\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"tags\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Tags</FormLabel>\n                    <FormControl>\n                      <Input\n                        placeholder=\"web, api, mobile, compliance (comma-separated)\"\n                        {...field}\n                        data-testid=\"input-tags\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Postman Collection */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-sm font-medium text-muted-foreground\">Postman Collection</h3>\n              \n              <FormField\n                control={form.control}\n                name=\"postmanCollectionType\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Postman Collection</FormLabel>\n                    <FormControl>\n                      <Select value={field.value} onValueChange={field.onChange}>\n                        <SelectTrigger data-testid=\"select-postman-type\">\n                          <SelectValue placeholder=\"Select option\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"none\">No Postman Collection</SelectItem>\n                          <SelectItem value=\"upload\">Upload Collection File</SelectItem>\n                          <SelectItem value=\"link\">Postman Link</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {form.watch(\"postmanCollectionType\") === \"upload\" && (\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium\">Collection File</label>\n                  <div className=\"flex items-center gap-2\">\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={() => document.getElementById(\"postman-file\")?.click()}\n                      data-testid=\"button-upload-postman\"\n                    >\n                      <Upload className=\"h-4 w-4 mr-2\" />\n                      Choose File\n                    </Button>\n                    {postmanFile && (\n                      <span className=\"text-sm text-muted-foreground\">{postmanFile.name}</span>\n                    )}\n                  </div>\n                  <input\n                    id=\"postman-file\"\n                    type=\"file\"\n                    accept=\".json\"\n                    onChange={handleFileChange}\n                    className=\"hidden\"\n                    data-testid=\"input-postman-file\"\n                  />\n                </div>\n              )}\n\n              {form.watch(\"postmanCollectionType\") === \"link\" && (\n                <FormField\n                  control={form.control}\n                  name=\"postmanLink\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Postman Collection Link</FormLabel>\n                      <FormControl>\n                        <div className=\"flex items-center gap-2\">\n                          <LinkIcon className=\"h-4 w-4 text-muted-foreground\" />\n                          <Input\n                            placeholder=\"https://www.postman.com/collections/...\"\n                            {...field}\n                            data-testid=\"input-postman-link\"\n                          />\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              )}\n            </div>\n\n            <div className=\"flex gap-3 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setIsOpen(false)}\n                className=\"flex-1\"\n                data-testid=\"button-cancel-project\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={createProjectMutation.isPending}\n                className=\"flex-1\"\n                data-testid=\"button-create-project\"\n              >\n                {createProjectMutation.isPending ? \"Creating...\" : \"Create Project\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nfunction ProjectTile({ project }: { project: ProjectWithStats }) {\n  const isOverdue = project.status !== 'complete' && project.endDate && new Date() > project.endDate;\n  const endDate = project.endDate;\n  \n  return (\n    <Card className=\"hover-elevate transition-all duration-200\">\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"space-y-1 flex-1\">\n            <CardTitle className=\"text-lg leading-6\">{project.name}</CardTitle>\n            <CardDescription className=\"text-sm\">{project.customerName}</CardDescription>\n          </div>\n          <StatusBadge status={project.status} />\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-4\">\n        {/* Project Info */}\n        <div className=\"grid grid-cols-2 gap-3 text-sm\">\n          <div className=\"flex items-center gap-2\">\n            <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n            <span className=\"text-muted-foreground\">Start:</span>\n            <span>{project.startDate ? format(project.startDate, \"MMM d, yyyy\") : 'TBD'}</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Clock className={`h-4 w-4 ${isOverdue ? 'text-red-500' : 'text-muted-foreground'}`} />\n            <span className=\"text-muted-foreground\">Due:</span>\n            <span className={isOverdue ? 'text-red-500 font-medium' : ''}>\n              {endDate ? format(endDate, \"MMM d, yyyy\") : 'TBD'}\n            </span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n            <span className=\"text-muted-foreground\">Team:</span>\n            <span>{project.teamSize} members</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <FileText className=\"h-4 w-4 text-muted-foreground\" />\n            <span className=\"text-muted-foreground\">Findings:</span>\n            <span>{project.findingStats?.total || 0}</span>\n          </div>\n        </div>\n\n        {/* Progress Bar (for in-progress projects) */}\n        {project.status === 'in_progress' && project.progress && (\n          <div className=\"space-y-1\">\n            <div className=\"flex justify-between text-xs text-muted-foreground\">\n              <span>Progress</span>\n              <span>{project.progress}%</span>\n            </div>\n            <div className=\"w-full bg-secondary rounded-full h-2\">\n              <div \n                className=\"bg-primary h-2 rounded-full transition-all duration-300\" \n                style={{ width: `${project.progress}%` }}\n              />\n            </div>\n          </div>\n        )}\n\n        {/* Finding Stats */}\n        {(project.findingStats?.total || 0) > 0 && (\n          <div className=\"flex gap-1 flex-wrap\">\n            {(project.findingStats?.critical || 0) > 0 && (\n              <Badge variant=\"destructive\" className=\"text-xs px-2 py-0\">\n                {project.findingStats?.critical || 0} Critical\n              </Badge>\n            )}\n            {(project.findingStats?.high || 0) > 0 && (\n              <Badge variant=\"secondary\" className=\"text-xs px-2 py-0 bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200\">\n                {project.findingStats?.high || 0} High\n              </Badge>\n            )}\n            {(project.findingStats?.medium || 0) > 0 && (\n              <Badge variant=\"secondary\" className=\"text-xs px-2 py-0 bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200\">\n                {project.findingStats?.medium || 0} Medium\n              </Badge>\n            )}\n          </div>\n        )}\n\n        {/* Action Buttons */}\n        <div className=\"flex gap-2 pt-2\">\n          <Link href={`/projects/${project.id}`} className=\"flex-1\">\n            <Button variant=\"default\" size=\"sm\" className=\"w-full\" data-testid={`button-view-project-${project.id}`}>\n              View Details\n            </Button>\n          </Link>\n          {project.status === 'in_progress' && (\n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              data-testid={`button-submit-report-${project.id}`}\n              onClick={() => {\n                // TODO: Navigate to report submission\n                console.log('Submit report for project:', project.id);\n              }}\n            >\n              Submit Report\n            </Button>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default function Projects() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\");\n\n  // Real API call with fallback to mock data\n  const { data: projects, isLoading, error } = useQuery<ProjectWithStats[]>({\n    queryKey: ['/api/projects'],\n    queryFn: async () => {\n      const response = await fetch('/api/projects', {\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        // If authentication fails, fall back to empty array (will use mock data)\n        if (response.status === 401) {\n          return [];\n        }\n        throw new Error('Failed to fetch projects');\n      }\n      const data = await response.json();\n      // Transform backend projects to include stats (for now with default values)\n      return data.map((project: Project) => ({\n        ...project,\n        teamSize: 1, // Default team size\n        findingStats: { \n          total: 0, \n          critical: 0, \n          high: 0, \n          medium: 0, \n          low: 0, \n          informational: 0 \n        },\n        progress: 0 // Default progress\n      }));\n    },\n    retry: false, // Don't retry on auth failures\n    initialData: [], // Provide empty array as initial data to prevent undefined access\n  });\n\n  // Use mock data if API fails or returns empty results\n  const projectsData = (projects && projects.length > 0) ? projects : mockProjects;\n\n  const filteredProjects = projectsData.filter((project: ProjectWithStats) => {\n    const matchesSearch = project.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         project.customerName.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = statusFilter === \"all\" || project.status === statusFilter;\n    return matchesSearch && matchesStatus;\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"flex items-center justify-center min-h-[400px]\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n            <p className=\"text-muted-foreground\">Loading projects...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n        <div>\n          <h1 className=\"text-3xl font-bold\" data-testid=\"heading-projects\">Projects</h1>\n          <p className=\"text-muted-foreground\">\n            Manage penetration testing projects and security assessments\n          </p>\n        </div>\n        <CreateProjectDialog />\n      </div>\n\n      {/* Filters */}\n      <div className=\"flex flex-col sm:flex-row gap-4\">\n        <div className=\"relative flex-1\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n          <Input\n            placeholder=\"Search projects...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"pl-10\"\n            data-testid=\"input-search-projects\"\n          />\n        </div>\n        <Select value={statusFilter} onValueChange={setStatusFilter}>\n          <SelectTrigger className=\"w-full sm:w-48\" data-testid=\"select-status-filter\">\n            <SelectValue placeholder=\"Filter by status\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All Status</SelectItem>\n            <SelectItem value=\"planned\">Planned</SelectItem>\n            <SelectItem value=\"in_progress\">In Progress</SelectItem>\n            <SelectItem value=\"complete\">Complete</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      {/* Project Stats */}\n      <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"text-2xl font-bold\">{projectsData.filter((p: ProjectWithStats) => p.status === 'in_progress').length}</div>\n            <div className=\"text-sm text-muted-foreground\">Active Projects</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"text-2xl font-bold\">{projectsData.filter((p: ProjectWithStats) => p.status === 'planned').length}</div>\n            <div className=\"text-sm text-muted-foreground\">Planned Projects</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"text-2xl font-bold\">\n              {projectsData.reduce((sum: number, p: ProjectWithStats) => sum + (p.findingStats?.total || 0), 0)}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Total Findings</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Projects Grid */}\n      {filteredProjects.length === 0 ? (\n        <Card>\n          <CardContent className=\"p-8 text-center\">\n            <FileText className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium mb-2\">No projects found</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              {searchTerm || statusFilter !== \"all\" \n                ? \"Try adjusting your search terms or filters\"\n                : \"Get started by creating your first project\"\n              }\n            </p>\n            {!searchTerm && statusFilter === \"all\" && (\n              <Button data-testid=\"button-create-first-project\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Create First Project\n              </Button>\n            )}\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6\">\n          {filteredProjects.map((project: ProjectWithStats) => (\n            <ProjectTile key={project.id} project={project} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":27993},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/examples/SeverityBadge.tsx":{"content":"import { SeverityBadge } from '../SeverityBadge'\n\nexport default function SeverityBadgeExample() {\n  return (\n    <div className=\"flex gap-2 flex-wrap\">\n      <SeverityBadge severity=\"critical\" />\n      <SeverityBadge severity=\"high\" />\n      <SeverityBadge severity=\"medium\" />\n      <SeverityBadge severity=\"low\" />\n      <SeverityBadge severity=\"informational\" />\n    </div>\n  )\n}","size_bytes":383},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066}},"version":2}